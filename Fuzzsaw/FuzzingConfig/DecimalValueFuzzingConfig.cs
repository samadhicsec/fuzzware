using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Fuzzware.Schemer.AutoGenerated;

namespace Fuzzware.Fuzzsaw.FuzzingConfig
{
    class DecimalValueFuzzingConfig : BaseFuzzingConfig
    {
        public DecimalValueFuzzingConfig(SimpleTypeFuzzerConfig Config)
        {
            oConfig = Config;
            oAvailableFuzzers = new List<string>();
            oAvailableFuzzers.Add("ReplaceDecimal");
            oAvailableFuzzers.Add("RandomDecimal");

            if (null != oConfig.DecimalValueFuzzer)
            {
                if (null != oConfig.DecimalValueFuzzer.DefaultFuzzers)
                {
                    bDefaultFuzzerToAdd = true;
                    DefaultFuzzersType = oConfig.DecimalValueFuzzer.DefaultFuzzers.GetType();
                    DefaultFuzzersObj = oConfig.DecimalValueFuzzer.DefaultFuzzers;
                }
                if (null != oConfig.DecimalValueFuzzer.CustomFuzzer)
                {
                    bCustomFuzzersToAdd = true;
                    CustomFuzzersTypes = new Type[oConfig.DecimalValueFuzzer.CustomFuzzer.Length];
                    CustomFuzzersObjs = new object[oConfig.DecimalValueFuzzer.CustomFuzzer.Length];
                    for (int i = 0; i < oConfig.DecimalValueFuzzer.CustomFuzzer.Length; i++)
                    {
                        CustomFuzzersTypes[i] = oConfig.DecimalValueFuzzer.CustomFuzzer[i].GetType();
                        CustomFuzzersObjs[i] = oConfig.DecimalValueFuzzer.CustomFuzzer[i];
                    }
                }
            }

            CreateNodesAndFuzzersList();
            CreateValueGroups();

            ValueRangesList = new List<ValueRange>();
        }

        protected override Type GetFuzzerType()
        {
            return typeof(DecimalValueFuzzersType);
        }

        protected override void CreateValueGroups()
        {
            ValueGroupsList = new List<ValueGroup>();
            if ((null != oConfig.DecimalValueFuzzer) && (null != oConfig.DecimalValueFuzzer.DecimalGroup))
            {
                for (int i = 0; i < oConfig.DecimalValueFuzzer.DecimalGroup.Length; i++)
                {
                    DecimalValueFuzzerDecimalGroup grp = oConfig.DecimalValueFuzzer.DecimalGroup[i];
                    ValueGroup oValueGroups = new ValueGroup(grp.ID);
                    // Copy values to a string array
                    oValueGroups.ValuesObj.AddRange(grp.DecimalValue);
                    ValueGroupsList.Add(oValueGroups);
                }
            }
        }

        /// <summary>
        /// The make sure its an integer
        /// </summary>
        public override void AddValueToValueGroup(ValueGroup oValueGroup, string Value)
        {
            Decimal Val;
            
            if(Decimal.TryParse(Value, out Val))
                oValueGroup.ValuesObj.Add(Value);
            else
                System.Windows.MessageBox.Show("Could not add value '" + Value + "'.  Could not convert to a decimal.", "Bad Type", System.Windows.MessageBoxButton.OK);
        
        }

        public override bool EnableValueRange
        {
            get
            {
                return false;
            }
        }

        public DecimalValueFuzzer Serialise()
        {
            DecimalValueFuzzer oDecimalValueFuzzer = new DecimalValueFuzzer();
            // Note this custom fuzzer array is 1 too long if it includes a Default fuzzer
            oDecimalValueFuzzer.CustomFuzzer = new DecimalValueFuzzerCustomFuzzer[NodeFuzzersList.Count];
            int iCustomIndex = 0;
            for (int i = 0; i < NodeFuzzersList.Count; i++)
            {
                if (NodeFuzzersList[i].ToString().Equals("Default", StringComparison.CurrentCultureIgnoreCase))
                {
                    oDecimalValueFuzzer.DefaultFuzzers = new DecimalValueFuzzersType();
                    NodeFuzzersList[i].Serialise(oDecimalValueFuzzer.DefaultFuzzers.GetType(), oDecimalValueFuzzer.DefaultFuzzers);
                    // Remove the last custom fuzzer as we assigned one too many
                    DecimalValueFuzzerCustomFuzzer[] array = oDecimalValueFuzzer.CustomFuzzer;
                    Array.Resize<DecimalValueFuzzerCustomFuzzer>(ref array, array.Length - 1);
                    oDecimalValueFuzzer.CustomFuzzer = array;
                }
                else
                {
                    DecimalValueFuzzerCustomFuzzer oCustom = new DecimalValueFuzzerCustomFuzzer();
                    NodeFuzzersList[i].Serialise(oCustom.GetType(), oCustom);
                    oDecimalValueFuzzer.CustomFuzzer[iCustomIndex++] = oCustom;
                }
            }

            oDecimalValueFuzzer.DecimalGroup = new DecimalValueFuzzerDecimalGroup[ValueGroupsList.Count];
            for (int i = 0; i < ValueGroupsList.Count; i++)
            {
                oDecimalValueFuzzer.DecimalGroup[i] = new DecimalValueFuzzerDecimalGroup();
                oDecimalValueFuzzer.DecimalGroup[i].ID = ValueGroupsList[i].ToString();
                oDecimalValueFuzzer.DecimalGroup[i].DecimalValue = ValueGroupsList[i].Values;
            }

            return oDecimalValueFuzzer;
        }
    }
    
}
