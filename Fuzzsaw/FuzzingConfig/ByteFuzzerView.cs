using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Text;
using System.Windows;
using Fuzzware.Fuzzsaw.Common;
using Fuzzware.Schemer.AutoGenerated;

namespace Fuzzware.Fuzzsaw.FuzzingConfig
{
    public class ByteFuzzerView : BaseFuzzerView
    {
        #region Bindable Objects Setup

        // Byte value fuzzers data
        public static DependencyProperty ReplaceBytesFuzzDataProperty;
        public static DependencyProperty InsertBytesFuzzDataProperty;
        public static DependencyProperty RandomBytesFuzzDataProperty;
        public static DependencyProperty RandomBitFlipsFuzzDataProperty;
        public static DependencyProperty XORBytesFuzzDataProperty;
        public static DependencyProperty ANDBytesFuzzDataProperty;
        public static DependencyProperty ORBytesFuzzDataProperty;
        // Range data
        public static DependencyProperty ReplaceBytesRangeProperty;
        public static DependencyProperty InsertBytesRangeProperty;
        public static DependencyProperty XORBytesRangeProperty;
        public static DependencyProperty ANDBytesRangeProperty;
        public static DependencyProperty ORBytesRangeProperty;

        static ByteFuzzerView()
        {
            ReplaceBytesFuzzDataProperty = DependencyProperty.Register("ReplaceBytesFuzzData", typeof(ObservableCollection<ObservableString>), typeof(ByteFuzzerView),
                new FrameworkPropertyMetadata(new ObservableCollection<ObservableString>()));
            InsertBytesFuzzDataProperty = DependencyProperty.Register("InsertBytesFuzzData", typeof(ObservableCollection<ObservableString>), typeof(ByteFuzzerView),
                new FrameworkPropertyMetadata(new ObservableCollection<ObservableString>()));
            RandomBytesFuzzDataProperty = DependencyProperty.Register("RandomBytesFuzzData", typeof(ObservableString), typeof(ByteFuzzerView));
            RandomBitFlipsFuzzDataProperty = DependencyProperty.Register("RandomBitFlipsFuzzData", typeof(ObservableString), typeof(ByteFuzzerView));
            XORBytesFuzzDataProperty = DependencyProperty.Register("XORBytesFuzzData", typeof(ObservableCollection<ObservableString>), typeof(ByteFuzzerView),
                new FrameworkPropertyMetadata(new ObservableCollection<ObservableString>()));
            ANDBytesFuzzDataProperty = DependencyProperty.Register("ANDBytesFuzzData", typeof(ObservableCollection<ObservableString>), typeof(ByteFuzzerView),
                new FrameworkPropertyMetadata(new ObservableCollection<ObservableString>()));
            ORBytesFuzzDataProperty = DependencyProperty.Register("ORBytesFuzzData", typeof(ObservableCollection<ObservableString>), typeof(ByteFuzzerView),
                new FrameworkPropertyMetadata(new ObservableCollection<ObservableString>()));

            ReplaceBytesRangeProperty = DependencyProperty.Register("ReplaceBytesRange", typeof(RangeDataView), typeof(StringFuzzerView));
            InsertBytesRangeProperty = DependencyProperty.Register("InsertBytesRange", typeof(RangeDataView), typeof(StringFuzzerView));
            XORBytesRangeProperty = DependencyProperty.Register("XORBytesRange", typeof(RangeDataView), typeof(StringFuzzerView));
            ANDBytesRangeProperty = DependencyProperty.Register("ANDBytesRange", typeof(RangeDataView), typeof(StringFuzzerView));
            ORBytesRangeProperty = DependencyProperty.Register("ORBytesRange", typeof(RangeDataView), typeof(StringFuzzerView));
        }

        public ObservableCollection<ObservableString> ReplaceBytesFuzzData
        {
            get { return (ObservableCollection<ObservableString>)GetValue(ReplaceBytesFuzzDataProperty); }
            set { SetValue(ReplaceBytesFuzzDataProperty, value); }
        }

        public ObservableCollection<ObservableString> InsertBytesFuzzData
        {
            get { return (ObservableCollection<ObservableString>)GetValue(InsertBytesFuzzDataProperty); }
            set { SetValue(InsertBytesFuzzDataProperty, value); }
        }

        public ObservableString RandomBytesFuzzData
        {
            get { return (ObservableString)GetValue(RandomBytesFuzzDataProperty); }
            set { SetValue(RandomBytesFuzzDataProperty, value); }
        }

        public ObservableString RandomBitFlipsFuzzData
        {
            get { return (ObservableString)GetValue(RandomBitFlipsFuzzDataProperty); }
            set { SetValue(RandomBitFlipsFuzzDataProperty, value); }
        }

        public ObservableCollection<ObservableString> XORBytesFuzzData
        {
            get { return (ObservableCollection<ObservableString>)GetValue(XORBytesFuzzDataProperty); }
            set { SetValue(XORBytesFuzzDataProperty, value); }
        }

        public ObservableCollection<ObservableString> ANDBytesFuzzData
        {
            get { return (ObservableCollection<ObservableString>)GetValue(ANDBytesFuzzDataProperty); }
            set { SetValue(ANDBytesFuzzDataProperty, value); }
        }

        public ObservableCollection<ObservableString> ORBytesFuzzData
        {
            get { return (ObservableCollection<ObservableString>)GetValue(ORBytesFuzzDataProperty); }
            set { SetValue(ORBytesFuzzDataProperty, value); }
        }

        public RangeDataView ReplaceBytesRange
        {
            get { return (RangeDataView)GetValue(ReplaceBytesRangeProperty); }
            set { SetValue(ReplaceBytesRangeProperty, value); }
        }

        public RangeDataView InsertBytesRange
        {
            get { return (RangeDataView)GetValue(InsertBytesRangeProperty); }
            set { SetValue(InsertBytesRangeProperty, value); }
        }

        public RangeDataView XORBytesRange
        {
            get { return (RangeDataView)GetValue(XORBytesRangeProperty); }
            set { SetValue(XORBytesRangeProperty, value); }
        }

        public RangeDataView ANDBytesRange
        {
            get { return (RangeDataView)GetValue(ANDBytesRangeProperty); }
            set { SetValue(ANDBytesRangeProperty, value); }
        }

        public RangeDataView ORBytesRange
        {
            get { return (RangeDataView)GetValue(ORBytesRangeProperty); }
            set { SetValue(ORBytesRangeProperty, value); }
        }

        #endregion

        protected void PopulateFuzzData(SimpleTypeFuzzerConfig oSTFC, ByteValueFuzzersType oBVFT)
        {
            // Always call populate so we add the final value to the collections that allows us to add new values
            PopulateValueFuzzData((null != oBVFT) ? oBVFT.ReplaceBytes : null, oSTFC.BinaryValueFuzzer, ReplaceBytesFuzzData, GetRefName(ReplaceBytesFuzzDataProperty));
            PopulateValueFuzzData((null != oBVFT) ? oBVFT.InsertBytes : null, oSTFC.BinaryValueFuzzer, InsertBytesFuzzData, GetRefName(InsertBytesFuzzDataProperty));
            if ((null != oBVFT) && (null != oBVFT.RandomBinary))
                RandomBytesFuzzData = new ObservableString(oBVFT.RandomBinary.Iterations.ToString());
            if ((null != oBVFT) && (null != oBVFT.RandomBitFlip))
                RandomBitFlipsFuzzData = new ObservableString(oBVFT.RandomBitFlip.Iterations.ToString());
            PopulateValueFuzzData((null != oBVFT) ? oBVFT.XOrBytes : null, oSTFC.BinaryValueFuzzer, XORBytesFuzzData, GetRefName(XORBytesFuzzDataProperty));
            PopulateValueFuzzData((null != oBVFT) ? oBVFT.AndBytes : null, oSTFC.BinaryValueFuzzer, ANDBytesFuzzData, GetRefName(ANDBytesFuzzDataProperty));
            PopulateValueFuzzData((null != oBVFT) ? oBVFT.OrBytes : null, oSTFC.BinaryValueFuzzer, ORBytesFuzzData, GetRefName(ORBytesFuzzDataProperty));

            PopulateRangeData((null != oBVFT) ? oBVFT.ReplaceBytes : null, (null != oSTFC.BinaryValueFuzzer) ? oSTFC.BinaryValueFuzzer.ByteRange : null, ReplaceBytesRange, GetRefName(ReplaceBytesRangeProperty));
            PopulateRangeData((null != oBVFT) ? oBVFT.InsertBytes : null, (null != oSTFC.BinaryValueFuzzer) ? oSTFC.BinaryValueFuzzer.ByteRange : null, InsertBytesRange, GetRefName(InsertBytesRangeProperty));
            PopulateRangeData((null != oBVFT) ? oBVFT.XOrBytes : null, (null != oSTFC.BinaryValueFuzzer) ? oSTFC.BinaryValueFuzzer.ByteRange : null, XORBytesRange, GetRefName(XORBytesRangeProperty));
            PopulateRangeData((null != oBVFT) ? oBVFT.AndBytes : null, (null != oSTFC.BinaryValueFuzzer) ? oSTFC.BinaryValueFuzzer.ByteRange : null, ANDBytesRange, GetRefName(ANDBytesRangeProperty));
            PopulateRangeData((null != oBVFT) ? oBVFT.OrBytes : null, (null != oSTFC.BinaryValueFuzzer) ? oSTFC.BinaryValueFuzzer.ByteRange : null, ORBytesRange, GetRefName(ORBytesFuzzDataProperty));
        }

        /// <summary>
        /// The constructor for the default string fuzzer
        /// </summary>
        public ByteFuzzerView(SimpleTypeFuzzerConfig oSTFC, ByteValueFuzzersType oBVFT)
        {
            InitProperties();

            m_bIsDefault = true;
            IsConfigEnabled = true;

            // For the default fuzzer, if there are no fuzzers configured, then disable config
            if ((null != oBVFT) &&
                (null == oBVFT.ReplaceBytes) &&
                (null == oBVFT.InsertBytes) &&
                (null == oBVFT.RandomBinary) &&
                (null == oBVFT.RandomBitFlip) &&
                (null == oBVFT.XOrBytes) &&
                (null == oBVFT.AndBytes) &&
                (null == oBVFT.OrBytes))
                IsConfigEnabled = false;

            PopulateFuzzData(oSTFC, oBVFT);
            
        }

        /// <summary>
        /// The constructor for the custom string fuzzer
        /// </summary>
        public ByteFuzzerView(SimpleTypeFuzzerConfig oSTFC, BinaryValueFuzzerCustomFuzzer oBVFCF)
            : this(oSTFC, oBVFCF as ByteValueFuzzersType)
        {
            InitProperties();

            IsConfigEnabled = true;

            PopulateFuzzData(oSTFC, oBVFCF as ByteValueFuzzersType);

            if (null != oBVFCF)
            {
                CustomNodeNamespace = new ObservableString(oBVFCF.NodeNamespace);
                CustomNodeName = new ObservableString(oBVFCF.NodeName);
            }
        }

        /// <summary>
        /// I shouldn't need to do this, but when I don't I get weird behaviour, the properties contain the values
        /// of the last object of this type I populated.
        /// </summary>
        private void InitProperties()
        {
            ReplaceBytesFuzzData = new ObservableCollection<ObservableString>();
            InsertBytesFuzzData = new ObservableCollection<ObservableString>();
            RandomBytesFuzzData = new ObservableString("");
            RandomBitFlipsFuzzData = new ObservableString("");
            XORBytesFuzzData = new ObservableCollection<ObservableString>();
            ANDBytesFuzzData = new ObservableCollection<ObservableString>();
            ORBytesFuzzData = new ObservableCollection<ObservableString>();

            ReplaceBytesRange = new RangeDataView();
            InsertBytesRange = new RangeDataView();
            XORBytesRange = new RangeDataView();
            ANDBytesRange = new RangeDataView();
            ORBytesRange = new RangeDataView();
        }

        private void PopulateValueFuzzData(ValueFuzzerType oFuzzerType, BinaryValueFuzzer oBVF, ObservableCollection<ObservableString> BindableData, String DefGroupRef)
        {
            String ValueGroupRef = null;
            if ((null != oFuzzerType) && (null != oBVF))
            {
                ValueGroupRef = oFuzzerType.ValueGroupRef;
            }
            else if (m_bIsDefault && !IsConfigEnabled && (null != oBVF))
            {
                ValueGroupRef = DefGroupRef;
            }
            if (!String.IsNullOrEmpty(ValueGroupRef))
            {
                BinaryValueFuzzerByteGroup oBVFBG = FindStringValueGroup(ValueGroupRef, oBVF.ByteGroup);
                if (null != oBVFBG)
                    CopyFuzzData(oBVFBG.ByteValue, BindableData);
            }
            // Always make sure the last item is the option to add a new value
            BindableData.Add(new ObservableString(ADD_A_VALUE));
        }

        /// <summary>
        /// Find the string value fuzz data
        /// </summary>
        private BinaryValueFuzzerByteGroup FindStringValueGroup(String Name, BinaryValueFuzzerByteGroup[] oBVFBG)
        {
            if (null != oBVFBG)
            {
                for (int i = 0; i < oBVFBG.Length; i++)
                {
                    if (oBVFBG[i].ID.Equals(Name))
                        return oBVFBG[i];
                }
            }
            return null;
        }

        /// <summary>
        /// The save the current Byte types view to its original data source
        /// </summary>
        public void SaveByteTypeConfig(SimpleTypeFuzzerConfig oSTFC)
        {
            if (null == oSTFC.BinaryValueFuzzer)
                oSTFC.BinaryValueFuzzer = new BinaryValueFuzzer();

            // Save the default string fuzzers
            BinaryValueFuzzer oBVF = oSTFC.BinaryValueFuzzer;
            // Create the string length fuzzers
            ByteValueFuzzersType oBVFT = CreateByteValueFuzzersType();
            oBVFT.ReplaceBytes = CreateValueFuzzerType(ReplaceBytesFuzzData, GetRefName(ReplaceBytesFuzzDataProperty), ReplaceBytesRange, GetRefName(ReplaceBytesRangeProperty));
            oBVFT.InsertBytes = CreateValueFuzzerType(InsertBytesFuzzData, GetRefName(InsertBytesFuzzDataProperty), InsertBytesRange, GetRefName(InsertBytesRangeProperty));
            oBVFT.RandomBinary = CreateRandomFuzzerType(RandomBytesFuzzData);
            oBVFT.RandomBitFlip = CreateRandomFuzzerType(RandomBitFlipsFuzzData);
            oBVFT.XOrBytes = CreateValueFuzzerType(XORBytesFuzzData, GetRefName(XORBytesFuzzDataProperty), XORBytesRange, GetRefName(XORBytesRangeProperty));
            oBVFT.AndBytes = CreateValueFuzzerType(ANDBytesFuzzData, GetRefName(ANDBytesFuzzDataProperty), ANDBytesRange, GetRefName(ANDBytesRangeProperty));
            oBVFT.OrBytes = CreateValueFuzzerType(ORBytesFuzzData, GetRefName(ORBytesFuzzDataProperty), ORBytesRange, GetRefName(ORBytesRangeProperty));
            // Add the fuzzers as either the default or a custom
            if (m_bIsDefault)
                oBVF.DefaultFuzzers = oBVFT;
            else
            {
                List<BinaryValueFuzzerCustomFuzzer> oBVFCFList = new List<BinaryValueFuzzerCustomFuzzer>(oBVF.CustomFuzzer);
                oBVFCFList.Add(oBVFT as BinaryValueFuzzerCustomFuzzer);
                oBVF.CustomFuzzer = oBVFCFList.ToArray();
            }
            // Create the string value fuzzer value groups
            List<BinaryValueFuzzerByteGroup> oByteGroups = new List<BinaryValueFuzzerByteGroup>(oBVF.ByteGroup);
            BinaryValueFuzzerByteGroup oBVFBG = new BinaryValueFuzzerByteGroup();
            // Add the ValueGroups, always add the default ones, even if no fuzzers were being used
            if ((null != oBVFT.ReplaceBytes) || m_bIsDefault)
            {
                oBVFBG.ID = m_bIsDefault ? GetRefName(ReplaceBytesFuzzDataProperty) : oBVFT.ReplaceBytes.ValueGroupRef;
                oBVFBG.ByteValue = GetByteArray(ReplaceBytesFuzzData);
                oByteGroups.Add(oBVFBG);
            }
            if ((null != oBVFT.InsertBytes) || m_bIsDefault)
            {
                oBVFBG = new BinaryValueFuzzerByteGroup();
                oBVFBG.ID = m_bIsDefault ? GetRefName(InsertBytesFuzzDataProperty) : oBVFT.InsertBytes.ValueGroupRef;
                oBVFBG.ByteValue = GetByteArray(InsertBytesFuzzData);
                oByteGroups.Add(oBVFBG);
            }
            if ((null != oBVFT.XOrBytes) || m_bIsDefault)
            {
                oBVFBG = new BinaryValueFuzzerByteGroup();
                oBVFBG.ID = m_bIsDefault ? GetRefName(XORBytesFuzzDataProperty) : oBVFT.XOrBytes.ValueGroupRef;
                oBVFBG.ByteValue = GetByteArray(XORBytesFuzzData);
                oByteGroups.Add(oBVFBG);
            }
            if ((null != oBVFT.AndBytes) || m_bIsDefault)
            {
                oBVFBG = new BinaryValueFuzzerByteGroup();
                oBVFBG.ID = m_bIsDefault ? GetRefName(ANDBytesFuzzDataProperty) : oBVFT.AndBytes.ValueGroupRef;
                oBVFBG.ByteValue = GetByteArray(ANDBytesFuzzData);
                oByteGroups.Add(oBVFBG);
            }
            if ((null != oBVFT.OrBytes) || m_bIsDefault)
            {
                oBVFBG = new BinaryValueFuzzerByteGroup();
                oBVFBG.ID = m_bIsDefault ? GetRefName(ORBytesFuzzDataProperty) : oBVFT.OrBytes.ValueGroupRef;
                oBVFBG.ByteValue = GetByteArray(ORBytesFuzzData);
                oByteGroups.Add(oBVFBG);
            }
            oBVF.ByteGroup = oByteGroups.ToArray();

            // Create the ValueRanges
            List<ValueRange> oValueRangeList = new List<ValueRange>(oBVF.ByteRange);
            AddValueRange(oValueRangeList, oBVFT.ReplaceBytes, ReplaceBytesRange, GetRefName(ReplaceBytesRangeProperty));
            AddValueRange(oValueRangeList, oBVFT.InsertBytes, InsertBytesRange, GetRefName(InsertBytesRangeProperty));
            AddValueRange(oValueRangeList, oBVFT.XOrBytes, XORBytesRange, GetRefName(XORBytesRangeProperty));
            AddValueRange(oValueRangeList, oBVFT.AndBytes, ANDBytesRange, GetRefName(ANDBytesRangeProperty));
            AddValueRange(oValueRangeList, oBVFT.OrBytes, ORBytesRange, GetRefName(ORBytesRangeProperty));
            oBVF.ByteRange = oValueRangeList.ToArray();
        }

        /// <summary>
        /// If default return a ByteValueFuzzersType, if not default return BinaryValueFuzzerCustomFuzzer and populate
        /// node name and namespace.  If not default and no name and namespace, return null.
        /// </summary>
        protected ByteValueFuzzersType CreateByteValueFuzzersType()
        {
            if (m_bIsDefault)
                return new ByteValueFuzzersType();
            else
            {
                if (String.IsNullOrEmpty(CustomNodeName.Value) && String.IsNullOrEmpty(CustomNodeNamespace.Value))
                    return null;

                BinaryValueFuzzerCustomFuzzer oSLFCF = new BinaryValueFuzzerCustomFuzzer();
                oSLFCF.NodeName = CustomNodeName.Value;
                oSLFCF.NodeNamespace = CustomNodeNamespace.Value;
                return oSLFCF as ByteValueFuzzersType;
            }
        }
    }
}
