using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Fuzzware.Schemer.AutoGenerated;

namespace Fuzzware.Fuzzsaw.FuzzingConfig
{
    public class StringLengthFuzzingConfig : BaseFuzzingConfig
    {
        String RepetitionString;

        public StringLengthFuzzingConfig(SimpleTypeFuzzerConfig Config)
        {
            oConfig = Config;
            oAvailableFuzzers = new List<string>();
            oAvailableFuzzers.Add("InsertStringLength");
            oAvailableFuzzers.Add("InsertTotalStringLength");
            oAvailableFuzzers.Add("StringLength");

            ValueRangesList = new List<ValueRange>();

            if (null != oConfig.StringLengthFuzzer)
            {
                RepetitionString = oConfig.StringLengthFuzzer.LengthRepetitionString;
                if (null != oConfig.StringLengthFuzzer.DefaultFuzzers)
                {
                    bDefaultFuzzerToAdd = true;
                    DefaultFuzzersType = oConfig.StringLengthFuzzer.DefaultFuzzers.GetType();
                    DefaultFuzzersObj = oConfig.StringLengthFuzzer.DefaultFuzzers;
                }
                if (null != oConfig.StringLengthFuzzer.CustomFuzzer)
                {
                    bCustomFuzzersToAdd = true;
                    CustomFuzzersTypes = new Type[oConfig.StringLengthFuzzer.CustomFuzzer.Length];
                    CustomFuzzersObjs = new object[oConfig.StringLengthFuzzer.CustomFuzzer.Length];
                    for (int i = 0; i < oConfig.StringLengthFuzzer.CustomFuzzer.Length; i++)
                    {
                        CustomFuzzersTypes[i] = oConfig.StringLengthFuzzer.CustomFuzzer[i].GetType();
                        CustomFuzzersObjs[i] = oConfig.StringLengthFuzzer.CustomFuzzer[i];
                    }
                }

                if (null != oConfig.StringLengthFuzzer.LengthRange)
                    ValueRangesList.AddRange(oConfig.StringLengthFuzzer.LengthRange);
            }

            CreateNodesAndFuzzersList();
            CreateValueGroups();
        }

        protected override Type GetFuzzerType()
        {
            return typeof(StringLengthFuzzersType);
        }

        protected override void CreateValueGroups()
        {
            ValueGroupsList = new List<ValueGroup>();
            if ((null != oConfig.StringLengthFuzzer) && (null != oConfig.StringLengthFuzzer.LengthGroup))
            {
                for (int i = 0; i < oConfig.StringLengthFuzzer.LengthGroup.Length; i++)
                {
                    StringLengthFuzzerLengthGroup grp = oConfig.StringLengthFuzzer.LengthGroup[i];
                    ValueGroup oValueGroups = new ValueGroup(grp.ID);
                    // Copy values to a string array
                    for (int j = 0; j < grp.StringLength.Length; j++)
                    {
                        oValueGroups.ValuesObj.Add(grp.StringLength[j].ToString());
                    }
                    ValueGroupsList.Add(oValueGroups);
                }
            }
        }

        public override void AddValueToValueGroup(ValueGroup oValueGroup, string Value)
        {
            uint typedValue = 0;
            if (UInt32.TryParse(Value, out typedValue))
            {
                oValueGroup.ValuesObj.Add(Value);
            }
            else
                System.Windows.MessageBox.Show("Could not add value '" + Value + "'.  Could not convert to an unsigned integer.", "Bad Type", System.Windows.MessageBoxButton.OK);
        }

        public StringLengthFuzzer Serialise()
        {
            StringLengthFuzzer oStringLengthFuzzer = new StringLengthFuzzer();
            oStringLengthFuzzer.LengthRepetitionString = RepetitionString;
            oStringLengthFuzzer.CustomFuzzer = new StringLengthFuzzerCustomFuzzer[NodeFuzzersList.Count];
            int iCustomIndex = 0;
            for (int i = 0; i < NodeFuzzersList.Count; i++)
            {
                if (NodeFuzzersList[i].ToString().Equals("Default", StringComparison.CurrentCultureIgnoreCase))
                {
                    oStringLengthFuzzer.DefaultFuzzers = new StringLengthFuzzersType();
                    NodeFuzzersList[i].Serialise(oStringLengthFuzzer.DefaultFuzzers.GetType(), oStringLengthFuzzer.DefaultFuzzers);
                    // Remove the last custom fuzzer as we assigned one too many
                    StringLengthFuzzerCustomFuzzer[] array = oStringLengthFuzzer.CustomFuzzer;
                    Array.Resize<StringLengthFuzzerCustomFuzzer>(ref array, array.Length - 1);
                    oStringLengthFuzzer.CustomFuzzer = array;
                }
                else
                {
                    StringLengthFuzzerCustomFuzzer oCustom = new StringLengthFuzzerCustomFuzzer();
                    NodeFuzzersList[i].Serialise(oCustom.GetType(), oCustom);
                    oStringLengthFuzzer.CustomFuzzer[iCustomIndex++] = oCustom;
                }
            }

            oStringLengthFuzzer.LengthGroup = new StringLengthFuzzerLengthGroup[ValueGroupsList.Count];
            for (int i = 0; i < ValueGroupsList.Count; i++)
            {
                oStringLengthFuzzer.LengthGroup[i] = new StringLengthFuzzerLengthGroup();
                oStringLengthFuzzer.LengthGroup[i].ID = ValueGroupsList[i].ToString();
                oStringLengthFuzzer.LengthGroup[i].StringLength = new uint[ValueGroupsList[i].Values.Length];
                for (int j = 0; j < ValueGroupsList[i].Values.Length; j++)
                    oStringLengthFuzzer.LengthGroup[i].StringLength[j] = UInt32.Parse(ValueGroupsList[i].Values[j]);
            }

            oStringLengthFuzzer.LengthRange = ValueRangesList.ToArray();
            
            return oStringLengthFuzzer;
        }

        public String LengthRepetitionString
        {
            get
            {
                return RepetitionString;
            }
            set
            {
                RepetitionString = value;
                OnPropertyChanged("LengthRepetitionString");
            }
        }
    }
}
