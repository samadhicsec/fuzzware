using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Text;
using System.Windows;
using Fuzzware.Fuzzsaw.Common;
using Fuzzware.Schemer.AutoGenerated;

namespace Fuzzware.Fuzzsaw.FuzzingConfig
{
    public class OccurrenceFuzzerView : BaseFuzzerView
    {
        #region Bindable Objects Setup
        public static DependencyProperty OccurranceCountsProperty;

        static OccurrenceFuzzerView()
        {
            OccurranceCountsProperty = DependencyProperty.Register("OccurranceCounts", typeof(ObservableCollection<ObservableString>), typeof(OccurrenceFuzzerView),
                new FrameworkPropertyMetadata(new ObservableCollection<ObservableString>()));
        }

        public ObservableCollection<ObservableString> OccurranceCounts
        {
            get { return (ObservableCollection<ObservableString>)GetValue(OccurranceCountsProperty); }
            set { SetValue(OccurranceCountsProperty, value); }
        }

        #endregion

        public OccurrenceFuzzerView(uint[] OccurranceFuzzingCounts)
        {
            if(null != OccurranceFuzzingCounts)
                CopyFuzzData(OccurranceFuzzingCounts, OccurranceCounts);
            OccurranceCounts.Add(new ObservableString(ADD_A_VALUE));
        }

        /// <summary>
        /// The save the Occurrence Fuzzer view to its original data source
        /// </summary>
        public void SaveOccurrenceFuzzerView(ComplexTypeFuzzerConfig oCTFC)
        {
            oCTFC.OccurranceFuzzingCount = GetUIntArray(OccurranceCounts);
        }
    }
}
