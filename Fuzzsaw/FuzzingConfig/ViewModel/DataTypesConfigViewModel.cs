using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Text;
using System.Windows;
using System.Windows.Input;
using Fuzzware.Fuzzsaw.Common;
using Fuzzware.Fuzzsaw.FuzzingConfig;
using Fuzzware.Schemer.AutoGenerated;

namespace Fuzzware.Fuzzsaw.FuzzingConfig.ViewModel
{
    public class DataTypesConfigViewModel : ViewModelBase
    {
        #region Dependency Properties

        static readonly DependencyProperty DefaultStringFuzzerProperty = DependencyProperty.Register("DefaultStringFuzzer", typeof(StringFuzzerViewModel), typeof(DataTypesConfigViewModel));
        /// <summary>
        /// The default String Fuzzer
        /// </summary>
        public StringFuzzerViewModel DefaultStringFuzzer
        {
            get { return (StringFuzzerViewModel)GetValue(DefaultStringFuzzerProperty); }
            set { SetValue(DefaultStringFuzzerProperty, value); }
        }

        static readonly DependencyProperty CustomStringFuzzersProperty = DependencyProperty.Register("CustomStringFuzzers", typeof(ObservableCollection<StringFuzzerViewModel>), typeof(DataTypesConfigViewModel));
        /// <summary>
        /// The custom String Fuzzers
        /// </summary>
        public ObservableCollection<StringFuzzerViewModel> CustomStringFuzzers
        {
            get { return (ObservableCollection<StringFuzzerViewModel>)GetValue(CustomStringFuzzersProperty); }
            set { SetValue(CustomStringFuzzersProperty, value); }
        }

        static readonly DependencyProperty DefaultIntegerFuzzerProperty = DependencyProperty.Register("DefaultIntegerFuzzer", typeof(IntegerFuzzerViewModel), typeof(DataTypesConfigViewModel));
        /// <summary>
        /// The default Integer Fuzzer
        /// </summary>
        public IntegerFuzzerViewModel DefaultIntegerFuzzer
        {
            get { return (IntegerFuzzerViewModel)GetValue(DefaultIntegerFuzzerProperty); }
            set { SetValue(DefaultIntegerFuzzerProperty, value); }
        }

        static readonly DependencyProperty CustomIntegerFuzzersProperty = DependencyProperty.Register("CustomIntegerFuzzers", typeof(ObservableCollection<IntegerFuzzerViewModel>), typeof(DataTypesConfigViewModel));
        /// <summary>
        /// The custom Integer Fuzzers
        /// </summary>
        public ObservableCollection<IntegerFuzzerViewModel> CustomIntegerFuzzers
        {
            get { return (ObservableCollection<IntegerFuzzerViewModel>)GetValue(CustomIntegerFuzzersProperty); }
            set { SetValue(CustomIntegerFuzzersProperty, value); }
        }

        static readonly DependencyProperty DefaultDecimalFuzzerProperty = DependencyProperty.Register("DefaultDecimalFuzzer", typeof(DecimalFuzzerViewModel), typeof(DataTypesConfigViewModel));
        /// <summary>
        /// The default Decimal Fuzzer
        /// </summary>
        public DecimalFuzzerViewModel DefaultDecimalFuzzer
        {
            get { return (DecimalFuzzerViewModel)GetValue(DefaultDecimalFuzzerProperty); }
            set { SetValue(DefaultDecimalFuzzerProperty, value); }
        }

        static readonly DependencyProperty CustomDecimalFuzzersProperty = DependencyProperty.Register("CustomDecimalFuzzers", typeof(ObservableCollection<DecimalFuzzerViewModel>), typeof(DataTypesConfigViewModel));
        /// <summary>
        /// The custom Decimal Fuzzers
        /// </summary>
        public ObservableCollection<DecimalFuzzerViewModel> CustomDecimalFuzzers
        {
            get { return (ObservableCollection<DecimalFuzzerViewModel>)GetValue(CustomDecimalFuzzersProperty); }
            set { SetValue(CustomDecimalFuzzersProperty, value); }
        }

        static readonly DependencyProperty DefaultByteFuzzerProperty = DependencyProperty.Register("DefaultByteFuzzer", typeof(ByteFuzzerViewModel), typeof(DataTypesConfigViewModel));
        /// <summary>
        /// The default Byte Fuzzer
        /// </summary>
        public ByteFuzzerViewModel DefaultByteFuzzer
        {
            get { return (ByteFuzzerViewModel)GetValue(DefaultByteFuzzerProperty); }
            set { SetValue(DefaultByteFuzzerProperty, value); }
        }

        static readonly DependencyProperty CustomByteFuzzersProperty = DependencyProperty.Register("CustomByteFuzzers", typeof(ObservableCollection<ByteFuzzerViewModel>), typeof(DataTypesConfigViewModel));
        /// <summary>
        /// The custom Byte Fuzzers
        /// </summary>
        public ObservableCollection<ByteFuzzerViewModel> CustomByteFuzzers
        {
            get { return (ObservableCollection<ByteFuzzerViewModel>)GetValue(CustomByteFuzzersProperty); }
            set { SetValue(CustomByteFuzzersProperty, value); }
        }

        #endregion

        #region Commands

        #region AddCustomStringFuzzer
        RelayCommand m_oAddCustomStringFuzzerCommand;

        /// <summary>
        /// Add a custom String Fuzzer
        /// </summary>
        public ICommand AddCustomStringFuzzerCommand
        {
            get
            {
                if (null == m_oAddCustomStringFuzzerCommand)
                    m_oAddCustomStringFuzzerCommand = new RelayCommand(AddCustomStringFuzzerExecute);
                return m_oAddCustomStringFuzzerCommand;
            }
        }

        public void AddCustomStringFuzzerExecute()
        {
            StringFuzzerViewModel oSFVM = new StringFuzzerViewModel(m_oSTFConfig, null, null);
            oSFVM.SetValue(Common.Common.CommandProperty, DeleteCustomStringFuzzerCommand);
            CustomStringFuzzers.Insert(0, oSFVM);
        }
        #endregion

        #region DeleteCustomStringFuzzer
        RelayCommand<StringFuzzerViewModel> m_oDeleteCustomStringFuzzerCommand;

        /// <summary>
        /// Delete a custom String Fuzzer
        /// </summary>
        public ICommand DeleteCustomStringFuzzerCommand
        {
            get
            {
                if (null == m_oDeleteCustomStringFuzzerCommand)
                    m_oDeleteCustomStringFuzzerCommand = new RelayCommand<StringFuzzerViewModel>(DeleteCustomStringFuzzerExecute);
                return m_oDeleteCustomStringFuzzerCommand;
            }
        }

        public void DeleteCustomStringFuzzerExecute(StringFuzzerViewModel oStringFuzzerViewModel)
        {
            if((null != oStringFuzzerViewModel) && CustomStringFuzzers.Contains(oStringFuzzerViewModel))
                CustomStringFuzzers.Remove(oStringFuzzerViewModel);
        }
        #endregion

        #region AddCustomIntegerFuzzer
        RelayCommand m_oAddCustomIntegerFuzzerCommand;

        /// <summary>
        /// Add a custom Integer Fuzzer
        /// </summary>
        public ICommand AddCustomIntegerFuzzerCommand
        {
            get
            {
                if (null == m_oAddCustomIntegerFuzzerCommand)
                    m_oAddCustomIntegerFuzzerCommand = new RelayCommand(AddCustomIntegerFuzzerExecute);
                return m_oAddCustomIntegerFuzzerCommand;
            }
        }

        public void AddCustomIntegerFuzzerExecute()
        {
            IntegerFuzzerViewModel oIFVM = new IntegerFuzzerViewModel(m_oSTFConfig, null);
            oIFVM.SetValue(Common.Common.CommandProperty, DeleteCustomIntegerFuzzerCommand);
            CustomIntegerFuzzers.Insert(0, oIFVM);
        }
        #endregion

        #region DeleteCustomIntegerFuzzer
        RelayCommand<IntegerFuzzerViewModel> m_oDeleteCustomIntegerFuzzerCommand;

        /// <summary>
        /// Delete a custom Integer Fuzzer
        /// </summary>
        public ICommand DeleteCustomIntegerFuzzerCommand
        {
            get
            {
                if (null == m_oDeleteCustomIntegerFuzzerCommand)
                    m_oDeleteCustomIntegerFuzzerCommand = new RelayCommand<IntegerFuzzerViewModel>(DeleteCustomIntegerFuzzerExecute);
                return m_oDeleteCustomIntegerFuzzerCommand;
            }
        }

        public void DeleteCustomIntegerFuzzerExecute(IntegerFuzzerViewModel oIntegerFuzzerViewModel)
        {
            if ((null != oIntegerFuzzerViewModel) && CustomIntegerFuzzers.Contains(oIntegerFuzzerViewModel))
                CustomIntegerFuzzers.Remove(oIntegerFuzzerViewModel);
        }
        #endregion

        #region AddCustomDecimalFuzzer
        RelayCommand m_oAddCustomDecimalFuzzerCommand;

        /// <summary>
        /// Add a custom Decimal Fuzzer
        /// </summary>
        public ICommand AddCustomDecimalFuzzerCommand
        {
            get
            {
                if (null == m_oAddCustomDecimalFuzzerCommand)
                    m_oAddCustomDecimalFuzzerCommand = new RelayCommand(AddCustomDecimalFuzzerExecute);
                return m_oAddCustomDecimalFuzzerCommand;
            }
        }

        public void AddCustomDecimalFuzzerExecute()
        {
            DecimalFuzzerViewModel oDFVM = new DecimalFuzzerViewModel(m_oSTFConfig, null);
            oDFVM.SetValue(Common.Common.CommandProperty, DeleteCustomDecimalFuzzerCommand);
            CustomDecimalFuzzers.Insert(0, oDFVM);
        }
        #endregion

        #region DeleteCustomDecimalFuzzer
        RelayCommand<DecimalFuzzerViewModel> m_oDeleteCustomDecimalFuzzerCommand;

        /// <summary>
        /// Delete a custom Decimal Fuzzer
        /// </summary>
        public ICommand DeleteCustomDecimalFuzzerCommand
        {
            get
            {
                if (null == m_oDeleteCustomDecimalFuzzerCommand)
                    m_oDeleteCustomDecimalFuzzerCommand = new RelayCommand<DecimalFuzzerViewModel>(DeleteCustomDecimalFuzzerExecute);
                return m_oDeleteCustomDecimalFuzzerCommand;
            }
        }

        public void DeleteCustomDecimalFuzzerExecute(DecimalFuzzerViewModel oDecimalFuzzerViewModel)
        {
            if ((null != oDecimalFuzzerViewModel) && CustomDecimalFuzzers.Contains(oDecimalFuzzerViewModel))
                CustomDecimalFuzzers.Remove(oDecimalFuzzerViewModel);
        }
        #endregion

        #region AddCustomByteFuzzer
        RelayCommand m_oAddCustomByteFuzzerCommand;

        /// <summary>
        /// Add a custom Byte Fuzzer
        /// </summary>
        public ICommand AddCustomByteFuzzerCommand
        {
            get
            {
                if (null == m_oAddCustomByteFuzzerCommand)
                    m_oAddCustomByteFuzzerCommand = new RelayCommand(AddCustomByteFuzzerExecute);
                return m_oAddCustomByteFuzzerCommand;
            }
        }

        public void AddCustomByteFuzzerExecute()
        {
            ByteFuzzerViewModel oBFVM = new ByteFuzzerViewModel(m_oSTFConfig, null);
            oBFVM.SetValue(Common.Common.CommandProperty, DeleteCustomByteFuzzerCommand);
            CustomByteFuzzers.Insert(0, oBFVM);
        }
        #endregion

        #region DeleteCustomByteFuzzer
        RelayCommand<ByteFuzzerViewModel> m_oDeleteCustomByteFuzzerCommand;

        /// <summary>
        /// Delete a custom Byte Fuzzer
        /// </summary>
        public ICommand DeleteCustomByteFuzzerCommand
        {
            get
            {
                if (null == m_oDeleteCustomByteFuzzerCommand)
                    m_oDeleteCustomByteFuzzerCommand = new RelayCommand<ByteFuzzerViewModel>(DeleteCustomByteFuzzerExecute);
                return m_oDeleteCustomByteFuzzerCommand;
            }
        }

        public void DeleteCustomByteFuzzerExecute(ByteFuzzerViewModel oByteFuzzerViewModel)
        {
            if ((null != oByteFuzzerViewModel) && CustomByteFuzzers.Contains(oByteFuzzerViewModel))
                CustomByteFuzzers.Remove(oByteFuzzerViewModel);
        }
        #endregion

        #endregion

        const String DEFAULT_LENGTHSTRING = "a";
        SimpleTypeFuzzerConfig m_oSTFConfig;

        public DataTypesConfigViewModel()
        {
            DefaultStringFuzzer = new StringFuzzerViewModel();
            CustomStringFuzzers = new ObservableCollection<StringFuzzerViewModel>();
            DefaultIntegerFuzzer = new IntegerFuzzerViewModel();
            DefaultIntegerFuzzer.SetValue(Common.Common.CommandProperty, DeleteCustomIntegerFuzzerCommand);
            CustomIntegerFuzzers = new ObservableCollection<IntegerFuzzerViewModel>();
            DefaultDecimalFuzzer = new DecimalFuzzerViewModel();
            DefaultDecimalFuzzer.SetValue(Common.Common.CommandProperty, DeleteCustomDecimalFuzzerCommand);
            CustomDecimalFuzzers = new ObservableCollection<DecimalFuzzerViewModel>();
            DefaultByteFuzzer = new ByteFuzzerViewModel();
            DefaultByteFuzzer.SetValue(Common.Common.CommandProperty, DeleteCustomByteFuzzerCommand);
            CustomByteFuzzers = new ObservableCollection<ByteFuzzerViewModel>();
        }

        public void ApplyConfiguration(SimpleTypeFuzzerConfig oSTFConfig)
        {
            m_oSTFConfig = oSTFConfig;

            CreateStringFuzzersData();
            CreateIntegerFuzzersView();
            CreateDecimalFuzzersView();
            CreateByteFuzzersView();
        }

        private void CreateStringFuzzersData()
        {
            // Create Default String fuzzer data
            StringLengthFuzzersType oSLFT = null;
            StringValueFuzzersType oSVFT = null;
            if (null != m_oSTFConfig.StringLengthFuzzer)
                oSLFT = m_oSTFConfig.StringLengthFuzzer.DefaultFuzzers;
            if (null != m_oSTFConfig.StringValueFuzzer)
                oSVFT = m_oSTFConfig.StringValueFuzzer.DefaultFuzzers;
            DefaultStringFuzzer.InitialiseData(m_oSTFConfig, oSLFT, oSVFT);

            // Create Custom String fuzzer data

            // Pre-compute Dictionary of nodename/StringValueFuzzerCustomFuzzer
            Dictionary<string, StringValueFuzzerCustomFuzzer> oValueCustomFuzzers = new Dictionary<string, StringValueFuzzerCustomFuzzer>();
            if ((null != m_oSTFConfig.StringValueFuzzer) && (null != m_oSTFConfig.StringValueFuzzer.CustomFuzzer))
            {
                for (int i = 0; i < m_oSTFConfig.StringValueFuzzer.CustomFuzzer.Length; i++)
                    oValueCustomFuzzers.Add(GetNodeName(m_oSTFConfig.StringValueFuzzer.CustomFuzzer[i].NodeNamespace, m_oSTFConfig.StringValueFuzzer.CustomFuzzer[i].NodeName),
                        m_oSTFConfig.StringValueFuzzer.CustomFuzzer[i]);
            }

            // Need to combine custom fuzzers for the length and value types
            if ((null != m_oSTFConfig.StringLengthFuzzer) && (null != m_oSTFConfig.StringLengthFuzzer.CustomFuzzer))
            {
                for (int i = 0; i < m_oSTFConfig.StringLengthFuzzer.CustomFuzzer.Length; i++)
                {
                    StringLengthFuzzerCustomFuzzer oSLFCF = m_oSTFConfig.StringLengthFuzzer.CustomFuzzer[i];
                    String NodeName = GetNodeName(oSLFCF.NodeNamespace, oSLFCF.NodeName);
                    StringValueFuzzerCustomFuzzer oSVFCF = null;
                    // See if the same node exists for value types
                    if (oValueCustomFuzzers.ContainsKey(NodeName))
                    {
                        oSVFCF = oValueCustomFuzzers[NodeName];
                        oValueCustomFuzzers.Remove(NodeName);
                    }
                    CustomStringFuzzers.Add(new StringFuzzerViewModel(m_oSTFConfig, oSLFCF, oSVFCF));
                }
            }
            // Add any string value fuzzers that did not match up with string length fuzzers
            foreach (KeyValuePair<string, StringValueFuzzerCustomFuzzer> oKVP in oValueCustomFuzzers)
            {
                CustomStringFuzzers.Add(new StringFuzzerViewModel(m_oSTFConfig, null, oKVP.Value));
            }
        }

        private void CreateIntegerFuzzersView()
        {
            // Create Default String fuzzer data
            IntegerValueFuzzersType oIVFT = null;
            if (null != m_oSTFConfig.IntegerValueFuzzer)
                oIVFT = m_oSTFConfig.IntegerValueFuzzer.DefaultFuzzers;
            DefaultIntegerFuzzer.InitialiseData(m_oSTFConfig, oIVFT);

            // Create Custom Integer fuzzer data
            if ((null != m_oSTFConfig.IntegerValueFuzzer) && (null != m_oSTFConfig.IntegerValueFuzzer.CustomFuzzer))
            {
                for (int i = 0; i < m_oSTFConfig.IntegerValueFuzzer.CustomFuzzer.Length; i++)
                {
                    IntegerValueFuzzerCustomFuzzer oIVFCF = m_oSTFConfig.IntegerValueFuzzer.CustomFuzzer[i];
                    CustomIntegerFuzzers.Add(new IntegerFuzzerViewModel(m_oSTFConfig, oIVFCF));
                }
            }
        }

        private void CreateDecimalFuzzersView()
        {
            // Create Default String fuzzer data
            DecimalValueFuzzersType oDVFT = null;
            if (null != m_oSTFConfig.DecimalValueFuzzer)
                oDVFT = m_oSTFConfig.DecimalValueFuzzer.DefaultFuzzers;
            DefaultDecimalFuzzer.InitialiseData(m_oSTFConfig, oDVFT);

            // Create Custom Integer fuzzer data
            if ((null != m_oSTFConfig.DecimalValueFuzzer) && (null != m_oSTFConfig.DecimalValueFuzzer.CustomFuzzer))
            {
                for (int i = 0; i < m_oSTFConfig.DecimalValueFuzzer.CustomFuzzer.Length; i++)
                {
                    DecimalValueFuzzerCustomFuzzer oDVFCF = m_oSTFConfig.DecimalValueFuzzer.CustomFuzzer[i];
                    CustomDecimalFuzzers.Add(new DecimalFuzzerViewModel(m_oSTFConfig, oDVFCF));
                }
            }
        }

        private void CreateByteFuzzersView()
        {
            // Create Default String fuzzer data
            ByteValueFuzzersType oBVFT = null;
            if (null != m_oSTFConfig.BinaryValueFuzzer)
                oBVFT = m_oSTFConfig.BinaryValueFuzzer.DefaultFuzzers;
            DefaultByteFuzzer.InitialiseData(m_oSTFConfig, oBVFT);

            // Create Custom Integer fuzzer data
            if ((null != m_oSTFConfig.BinaryValueFuzzer) && (null != m_oSTFConfig.BinaryValueFuzzer.CustomFuzzer))
            {
                for (int i = 0; i < m_oSTFConfig.BinaryValueFuzzer.CustomFuzzer.Length; i++)
                {
                    BinaryValueFuzzerCustomFuzzer oBVFCF = m_oSTFConfig.BinaryValueFuzzer.CustomFuzzer[i];
                    CustomByteFuzzers.Add(new ByteFuzzerViewModel(m_oSTFConfig, oBVFCF));
                }
            }
        }

        private string GetNodeName(string Namespace, string Name)
        {
            return Namespace + "/" + Name;
        }

        /// <summary>
        /// Gets an updated SimpleTypeFuzzerConfig with data in this view model
        /// </summary>
        public SimpleTypeFuzzerConfig SimpleTypeConfig
        {
            get
            {
                // Initialise the String Type fuzzers for saving
                if (null == m_oSTFConfig.StringLengthFuzzer)
                {
                    m_oSTFConfig.StringLengthFuzzer = new StringLengthFuzzer();
                    m_oSTFConfig.StringLengthFuzzer.LengthRepetitionString = DEFAULT_LENGTHSTRING;
                }
                if (null == m_oSTFConfig.StringValueFuzzer)
                    m_oSTFConfig.StringValueFuzzer = new StringValueFuzzer();
                m_oSTFConfig.StringLengthFuzzer.CustomFuzzer = new StringLengthFuzzerCustomFuzzer[0];
                m_oSTFConfig.StringLengthFuzzer.LengthGroup = new StringLengthFuzzerLengthGroup[0];
                m_oSTFConfig.StringLengthFuzzer.LengthRange = new ValueRange[0];
                m_oSTFConfig.StringValueFuzzer.CustomFuzzer = new StringValueFuzzerCustomFuzzer[0];
                m_oSTFConfig.StringValueFuzzer.StringGroup = new StringValueFuzzerStringGroup[0];
                m_oSTFConfig.StringValueFuzzer.StringRange = new ValueRange[0];
                // Save the current values of the SimpleTypeConfig
                DefaultStringFuzzer.UpdateSimpleTypeFuzzerConfig(m_oSTFConfig);
                for (int i = 0; i < CustomStringFuzzers.Count; i++)
                    CustomStringFuzzers[i].UpdateSimpleTypeFuzzerConfig(m_oSTFConfig);

                // Initialise the Integer Type fuzzers for saving
                if (null == m_oSTFConfig.IntegerValueFuzzer)
                    m_oSTFConfig.IntegerValueFuzzer = new IntegerValueFuzzer();
                m_oSTFConfig.IntegerValueFuzzer.CustomFuzzer = new IntegerValueFuzzerCustomFuzzer[0];
                m_oSTFConfig.IntegerValueFuzzer.IntegerGroup = new IntegerValueFuzzerIntegerGroup[0];
                // Save the current values of the SimpleTypeConfig
                DefaultIntegerFuzzer.UpdateIntegerTypeConfig(m_oSTFConfig);
                for (int i = 0; i < CustomIntegerFuzzers.Count; i++)
                    CustomIntegerFuzzers[i].UpdateIntegerTypeConfig(m_oSTFConfig);

                // Initialise the Decimal Type fuzzers for saving
                if (null == m_oSTFConfig.DecimalValueFuzzer)
                    m_oSTFConfig.DecimalValueFuzzer = new DecimalValueFuzzer();
                m_oSTFConfig.DecimalValueFuzzer.CustomFuzzer = new DecimalValueFuzzerCustomFuzzer[0];
                m_oSTFConfig.DecimalValueFuzzer.DecimalGroup = new DecimalValueFuzzerDecimalGroup[0];
                // Save the current values of the SimpleTypeConfig
                DefaultDecimalFuzzer.UpdateDecimalTypeConfig(m_oSTFConfig);
                for (int i = 0; i < CustomDecimalFuzzers.Count; i++)
                    CustomDecimalFuzzers[i].UpdateDecimalTypeConfig(m_oSTFConfig);

                // Initialise the  Byte Type fuzzers for saving
                if (null == m_oSTFConfig.BinaryValueFuzzer)
                    m_oSTFConfig.BinaryValueFuzzer = new BinaryValueFuzzer();
                m_oSTFConfig.BinaryValueFuzzer.CustomFuzzer = new BinaryValueFuzzerCustomFuzzer[0];
                m_oSTFConfig.BinaryValueFuzzer.ByteGroup = new BinaryValueFuzzerByteGroup[0];
                m_oSTFConfig.BinaryValueFuzzer.ByteRange = new ValueRange[0];
                // Save the current values of the SimpleTypeConfig
                DefaultByteFuzzer.UpdateByteTypeConfig(m_oSTFConfig);
                for (int i = 0; i < CustomByteFuzzers.Count; i++)
                    CustomByteFuzzers[i].UpdateByteTypeConfig(m_oSTFConfig);

                return m_oSTFConfig;
            }
        }
    }
}
