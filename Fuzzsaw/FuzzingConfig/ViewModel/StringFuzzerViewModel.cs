using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Text;
using System.Windows;
using System.Windows.Input;
using Fuzzware.Fuzzsaw.Common;
using Fuzzware.Schemer.AutoGenerated;

namespace Fuzzware.Fuzzsaw.FuzzingConfig.ViewModel
{
    public class StringFuzzerViewModel : BaseFuzzerViewModel
    {
        #region Dependency Properties

        static readonly DependencyProperty ReplaceWithLongStringsFuzzDataProperty = DependencyProperty.Register("ReplaceWithLongStringsFuzzData", typeof(FuzzDataSelectorViewModel), typeof(StringFuzzerViewModel));
        /// <summary>
        /// ReplaceWithLongStringsFuzzData
        /// </summary>
        public FuzzDataSelectorViewModel ReplaceWithLongStringsFuzzData
        {
            get { return (FuzzDataSelectorViewModel)GetValue(ReplaceWithLongStringsFuzzDataProperty); }
            set { SetValue(ReplaceWithLongStringsFuzzDataProperty, value); }
        }

        static readonly DependencyProperty InsertLongStringsFuzzDataProperty = DependencyProperty.Register("InsertLongStringsFuzzData", typeof(FuzzDataSelectorViewModel), typeof(StringFuzzerViewModel));
        /// <summary>
        /// InsertLongStringsFuzzData
        /// </summary>
        public FuzzDataSelectorViewModel InsertLongStringsFuzzData
        {
            get { return (FuzzDataSelectorViewModel)GetValue(InsertLongStringsFuzzDataProperty); }
            set { SetValue(InsertLongStringsFuzzDataProperty, value); }
        }

        static readonly DependencyProperty InsertToLengthLongStringsFuzzDataProperty = DependencyProperty.Register("InsertToLengthLongStringsFuzzData", typeof(FuzzDataSelectorViewModel), typeof(StringFuzzerViewModel));
        /// <summary>
        /// InsertToLengthLongStringsFuzzData
        /// </summary>
        public FuzzDataSelectorViewModel InsertToLengthLongStringsFuzzData
        {
            get { return (FuzzDataSelectorViewModel)GetValue(InsertToLengthLongStringsFuzzDataProperty); }
            set { SetValue(InsertToLengthLongStringsFuzzDataProperty, value); }
        }

        static readonly DependencyProperty ReplaceStringsFuzzDataProperty = DependencyProperty.Register("ReplaceStringsFuzzData", typeof(FuzzDataSelectorViewModel), typeof(StringFuzzerViewModel));
        /// <summary>
        /// ReplaceStringsFuzzData
        /// </summary>
        public FuzzDataSelectorViewModel ReplaceStringsFuzzData
        {
            get { return (FuzzDataSelectorViewModel)GetValue(ReplaceStringsFuzzDataProperty); }
            set { SetValue(ReplaceStringsFuzzDataProperty, value); }
        }

        static readonly DependencyProperty InsertStringsFuzzDataProperty = DependencyProperty.Register("InsertStringsFuzzData", typeof(FuzzDataSelectorViewModel), typeof(StringFuzzerViewModel));
        /// <summary>
        /// InsertStringsFuzzData
        /// </summary>
        public FuzzDataSelectorViewModel InsertStringsFuzzData
        {
            get { return (FuzzDataSelectorViewModel)GetValue(InsertStringsFuzzDataProperty); }
            set { SetValue(InsertStringsFuzzDataProperty, value); }
        }

        static readonly DependencyProperty EncodeStringsFuzzDataProperty = DependencyProperty.Register("EncodeStringsFuzzData", typeof(FuzzDataSelectorViewModel), typeof(StringFuzzerViewModel));
        /// <summary>
        /// EncodeStringsFuzzData
        /// </summary>
        public FuzzDataSelectorViewModel EncodeStringsFuzzData
        {
            get { return (FuzzDataSelectorViewModel)GetValue(EncodeStringsFuzzDataProperty); }
            set { SetValue(EncodeStringsFuzzDataProperty, value); }
        }

        static readonly DependencyProperty InsertLongStringsRangeProperty = DependencyProperty.Register("InsertLongStringsRange", typeof(RangeDataViewModel), typeof(StringFuzzerViewModel));
        /// <summary>
        /// InsertLongStringsRange
        /// </summary>
        public RangeDataViewModel InsertLongStringsRange
        {
            get { return (RangeDataViewModel)GetValue(InsertLongStringsRangeProperty); }
            set { SetValue(InsertLongStringsRangeProperty, value); }
        }

        static readonly DependencyProperty InsertToLengthLongStringsRangeProperty = DependencyProperty.Register("InsertToLengthLongStringsRange", typeof(RangeDataViewModel), typeof(StringFuzzerViewModel));
        /// <summary>
        /// InsertToLengthLongStringsRange
        /// </summary>
        public RangeDataViewModel InsertToLengthLongStringsRange
        {
            get { return (RangeDataViewModel)GetValue(InsertToLengthLongStringsRangeProperty); }
            set { SetValue(InsertToLengthLongStringsRangeProperty, value); }
        }

        static readonly DependencyProperty InsertStringsRangeProperty = DependencyProperty.Register("InsertStringsRange", typeof(RangeDataViewModel), typeof(StringFuzzerViewModel));
        /// <summary>
        /// InsertStringsRange
        /// </summary>
        public RangeDataViewModel InsertStringsRange
        {
            get { return (RangeDataViewModel)GetValue(InsertStringsRangeProperty); }
            set { SetValue(InsertStringsRangeProperty, value); }
        }

        #endregion

        #region Validation
        protected Func<object, string> m_oValidateLengthValueCallback;
        /// <summary>
        /// Returns the Func to validate the data values.  The object is the value, the string is the error (or null for no error)
        /// </summary>
        public Func<object, string> ValidateLengthValues
        {
            get { return m_oValidateLengthValueCallback; }
        }

        protected string ValidateLength(object oValue)
        {
            if (!(oValue is String))
                return "Invalid Object";

            String strValue = oValue as String;

            if (strValue.Equals(ADD_A_VALUE))
                return null;

            if (String.IsNullOrEmpty(strValue))
                return "Empty values are not allowed";

            UInt64 num = 0;
            if (!UInt64.TryParse(strValue, out num))
                return "Value must be a positive integer";

            return null;
        }
        #endregion

        public StringFuzzerViewModel() : base()
        {
            // Set up the validation
            m_oValidateLengthValueCallback += ValidateLength;

            ReplaceWithLongStringsFuzzData = new FuzzDataSelectorViewModel();
            ReplaceWithLongStringsFuzzData.ValidateValuesMethod = ValidateLengthValues;
            InsertLongStringsFuzzData = new FuzzDataSelectorViewModel();
            InsertLongStringsFuzzData.ValidateValuesMethod = ValidateLengthValues;
            InsertToLengthLongStringsFuzzData = new FuzzDataSelectorViewModel();
            InsertToLengthLongStringsFuzzData.ValidateValuesMethod = ValidateLengthValues;
            ReplaceStringsFuzzData = new FuzzDataSelectorViewModel();
            InsertStringsFuzzData = new FuzzDataSelectorViewModel();
            EncodeStringsFuzzData = new FuzzDataSelectorViewModel();
            InsertLongStringsRange = new RangeDataViewModel();
            InsertToLengthLongStringsRange = new RangeDataViewModel();
            InsertStringsRange = new RangeDataViewModel();
        }

        private void InitProperties()
        {
            ReplaceWithLongStringsFuzzData.DataCollection.Clear();
            InsertLongStringsFuzzData.DataCollection.Clear();
            InsertToLengthLongStringsFuzzData.DataCollection.Clear();
            ReplaceStringsFuzzData.DataCollection.Clear();
            InsertStringsFuzzData.DataCollection.Clear();
            EncodeStringsFuzzData.DataCollection.Clear();
            InsertLongStringsRange.Reset();
            InsertToLengthLongStringsRange.Reset();
            InsertStringsRange.Reset();
        }

        /// <summary>
        /// Initialisation for the default string fuzzer
        /// </summary>
        public void InitialiseData(SimpleTypeFuzzerConfig oSTFC, StringLengthFuzzersType oSLFT, StringValueFuzzersType oSVFT)
        {
            InitProperties();

            DefaultFuzzer = true;
            OnOffControl.On = true;
            CustomFuzzer = false;

            // For the default fuzzer, if there are no fuzzers configured, then disable config
            if ((null != oSLFT) && (null != oSVFT) &&
                (null == oSLFT.StringLength) &&
                (null == oSLFT.InsertStringLength) &&
                (null == oSLFT.InsertTotalStringLength) &&
                (null == oSVFT.ReplaceString) &&
                (null == oSVFT.InsertString) &&
                (null == oSVFT.EncodeString))
            {
                OnOffControl.On = false;
            }

            PopulateFuzzData(oSTFC, oSLFT, oSVFT);
        }

        /// <summary>
        /// Constructor for the custom string fuzzer
        /// </summary>
        public StringFuzzerViewModel(SimpleTypeFuzzerConfig oSTFC, StringLengthFuzzerCustomFuzzer oSLFCF, StringValueFuzzerCustomFuzzer oSVFCF)
            : this()
        {
            DefaultFuzzer = false;
            // OnOffControl.On is always true for custom fuzzers
            OnOffControl.On = true;
            CustomFuzzer = true;

            PopulateFuzzData(oSTFC, oSLFCF as StringLengthFuzzersType, oSVFCF as StringValueFuzzersType);

            // Get the custom node name and namespace
            if (null != oSLFCF)
            {
                CustomNodeNamespace.Value = oSLFCF.NodeNamespace;
                CustomNodeName.Value = oSLFCF.NodeName;
            }
            else if(null != oSVFCF)
            {
                CustomNodeNamespace.Value = oSVFCF.NodeNamespace;
                CustomNodeName.Value = oSVFCF.NodeName;
            }
        }

        /// <summary>
        /// Populate the view model with data
        /// </summary>
        private void PopulateFuzzData(SimpleTypeFuzzerConfig oSTFC, StringLengthFuzzersType oSLFT, StringValueFuzzersType oSVFT)
        {
            // Always call populate so we add the final value to the collections that allows us to add new values
            PopulateLengthFuzzData((null != oSLFT) ? oSLFT.StringLength : null, oSTFC.StringLengthFuzzer, ReplaceWithLongStringsFuzzData.DataCollection, GetRefName(ReplaceWithLongStringsFuzzDataProperty));
            PopulateLengthFuzzData((null != oSLFT) ? oSLFT.InsertStringLength : null, oSTFC.StringLengthFuzzer, InsertLongStringsFuzzData.DataCollection, GetRefName(InsertLongStringsFuzzDataProperty));
            PopulateLengthFuzzData((null != oSLFT) ? oSLFT.InsertTotalStringLength : null, oSTFC.StringLengthFuzzer, InsertToLengthLongStringsFuzzData.DataCollection, GetRefName(InsertToLengthLongStringsFuzzDataProperty));

            PopulateValueFuzzData((null != oSVFT) ? oSVFT.ReplaceString : null, oSTFC.StringValueFuzzer, ReplaceStringsFuzzData.DataCollection, GetRefName(ReplaceStringsFuzzDataProperty));
            PopulateValueFuzzData((null != oSVFT) ? oSVFT.InsertString : null, oSTFC.StringValueFuzzer, InsertStringsFuzzData.DataCollection, GetRefName(InsertStringsFuzzDataProperty));
            PopulateValueFuzzData((null != oSVFT) ? oSVFT.EncodeString : null, oSTFC.StringValueFuzzer, EncodeStringsFuzzData.DataCollection, GetRefName(EncodeStringsFuzzDataProperty));

            PopulateRangeData((null != oSLFT) ? oSLFT.InsertStringLength : null, (null != oSTFC.StringLengthFuzzer) ? oSTFC.StringLengthFuzzer.LengthRange : null, InsertLongStringsRange, GetRefName(InsertLongStringsRangeProperty));
            PopulateRangeData((null != oSLFT) ? oSLFT.InsertTotalStringLength : null, (null != oSTFC.StringLengthFuzzer) ? oSTFC.StringLengthFuzzer.LengthRange : null, InsertToLengthLongStringsRange, GetRefName(InsertToLengthLongStringsRangeProperty));
            PopulateRangeData((null != oSVFT) ? oSVFT.InsertString : null, (null != oSTFC.StringLengthFuzzer) ? oSTFC.StringValueFuzzer.StringRange : null, InsertStringsRange, GetRefName(InsertStringsRangeProperty));
        }

        /// <summary>
        /// Populate the view model with string length fuzzing data
        /// </summary>
        private void PopulateLengthFuzzData(ValueFuzzerType oFuzzerType, StringLengthFuzzer oSLF, ObservableCollection<ObservableString> BindableData, String DefaultRefName)
        {
            String ValueGroupRef = null;
            if ((null != oFuzzerType) && (null != oSLF))
            {
                // If the ValueFuzzerType exists
                ValueGroupRef = oFuzzerType.ValueGroupRef;
            }
            else if (DefaultFuzzer && !OnOffControl.On && (null != oSLF))
            {
                // If OnOffControl.On = false, then this is the default fuzzer, and it is disabled
                ValueGroupRef = DefaultRefName;
            }

            if (!String.IsNullOrEmpty(ValueGroupRef))
            {
                StringLengthFuzzerLengthGroup oSLFLG = FindStringLengthGroup(ValueGroupRef, oSLF.LengthGroup);
                if (null != oSLFLG)
                    CopyFuzzData(oSLFLG.StringLength, BindableData);
            }
            // Always make sure the last item is the option to add a new value
            BindableData.Add(new ObservableString(ADD_A_VALUE));
        }

        /// <summary>
        /// Populate the view model with string length fuzzing data
        /// </summary>
        private void PopulateValueFuzzData(ValueFuzzerType oFuzzerType, StringValueFuzzer oSVF, ObservableCollection<ObservableString> BindableData, String DefaultRefName)
        {
            String ValueGroupRef = null;
            if ((null != oFuzzerType) && (null != oSVF))
            {
                ValueGroupRef = oFuzzerType.ValueGroupRef;
            }
            else if (DefaultFuzzer && !OnOffControl.On && (null != oSVF))
            {
                // If OnOffControl.On = false, then this is the default fuzzer, and it is disabled
                ValueGroupRef = DefaultRefName;
            }
            if (!String.IsNullOrEmpty(ValueGroupRef))
            {
                StringValueFuzzerStringGroup oSVFSG = FindStringValueGroup(ValueGroupRef, oSVF.StringGroup);
                if (null != oSVFSG)
                    CopyFuzzData(oSVFSG.StringValue, BindableData);
            }
            // Always make sure the last item is the option to add a new value
            BindableData.Add(new ObservableString(ADD_A_VALUE));
        }

        /// <summary>
        /// Find the string length fuzz data
        /// </summary>
        private StringLengthFuzzerLengthGroup FindStringLengthGroup(String Name, StringLengthFuzzerLengthGroup[] oSLFLG)
        {
            if (null != oSLFLG)
            {
                for (int i = 0; i < oSLFLG.Length; i++)
                {
                    if (oSLFLG[i].ID.Equals(Name))
                        return oSLFLG[i];
                }
            }
            return null;
        }

        /// <summary>
        /// Find the string value fuzz data
        /// </summary>
        private StringValueFuzzerStringGroup FindStringValueGroup(String Name, StringValueFuzzerStringGroup[] oSVFSG)
        {
            if (null != oSVFSG)
            {
                for (int i = 0; i < oSVFSG.Length; i++)
                {
                    if (oSVFSG[i].ID.Equals(Name))
                        return oSVFSG[i];
                }
            }
            return null;
        }

        /// <summary>
        /// Update the current String type fuzzing data
        /// </summary>
        public void UpdateSimpleTypeFuzzerConfig(SimpleTypeFuzzerConfig oSTFC)
        {
            UpdateStringLengthTypeConfig(oSTFC);
            UpdateStringValueTypeConfig(oSTFC);
        }

        /// <summary>
        /// Update the current String Length type fuzzing data
        /// </summary>
        protected void UpdateStringLengthTypeConfig(SimpleTypeFuzzerConfig oSTFC)
        {
            if (null == oSTFC.StringLengthFuzzer)
                oSTFC.StringLengthFuzzer = new StringLengthFuzzer();

            // Save the default string fuzzers
            StringLengthFuzzer oSLF = oSTFC.StringLengthFuzzer;
            // Create the string length fuzzers
            StringLengthFuzzersType oSLFT = CreateStringLengthFuzzersType();
            oSLFT.StringLength = CreateValueFuzzerType(ReplaceWithLongStringsFuzzData.DataCollection, GetRefName(ReplaceWithLongStringsFuzzDataProperty), null, null);
            oSLFT.InsertStringLength = CreateValueFuzzerType(InsertLongStringsFuzzData.DataCollection, GetRefName(InsertLongStringsFuzzDataProperty), InsertLongStringsRange, GetRefName(InsertLongStringsRangeProperty));
            oSLFT.InsertTotalStringLength = CreateValueFuzzerType(InsertToLengthLongStringsFuzzData.DataCollection, GetRefName(InsertToLengthLongStringsFuzzDataProperty), InsertToLengthLongStringsRange, GetRefName(InsertToLengthLongStringsRangeProperty));
            // Add the fuzzers as either the default or a custom
            if (DefaultFuzzer)
                oSLF.DefaultFuzzers = oSLFT;
            else
            {
                List<StringLengthFuzzerCustomFuzzer> oSLFCFList = new List<StringLengthFuzzerCustomFuzzer>(oSLF.CustomFuzzer);
                oSLFCFList.Add(oSLFT as StringLengthFuzzerCustomFuzzer);
                oSLF.CustomFuzzer = oSLFCFList.ToArray();
            }
            // Create the string length fuzzer value groups
            List<StringLengthFuzzerLengthGroup> oStringLengthGroups = new List<StringLengthFuzzerLengthGroup>(oSLF.LengthGroup);
            StringLengthFuzzerLengthGroup oSLFLG = new StringLengthFuzzerLengthGroup();
            // Add the ValueGroups, always add the default ones, even if no fuzzers were being used
            if ((null != oSLFT.StringLength) || DefaultFuzzer)
            {
                oSLFLG.ID = DefaultFuzzer ? GetRefName(ReplaceWithLongStringsFuzzDataProperty) : oSLFT.StringLength.ValueGroupRef;
                oSLFLG.StringLength = GetUIntArray(ReplaceWithLongStringsFuzzData.DataCollection);
                oStringLengthGroups.Add(oSLFLG);
            }
            if ((null != oSLFT.InsertStringLength) || DefaultFuzzer)
            {
                oSLFLG = new StringLengthFuzzerLengthGroup();
                oSLFLG.ID = DefaultFuzzer ? GetRefName(InsertLongStringsFuzzDataProperty) : oSLFT.InsertStringLength.ValueGroupRef;
                oSLFLG.StringLength = GetUIntArray(InsertLongStringsFuzzData.DataCollection);
                oStringLengthGroups.Add(oSLFLG);
            }
            if ((null != oSLFT.InsertTotalStringLength) || DefaultFuzzer)
            {
                oSLFLG = new StringLengthFuzzerLengthGroup();
                oSLFLG.ID = DefaultFuzzer ? GetRefName(InsertToLengthLongStringsFuzzDataProperty) : oSLFT.InsertTotalStringLength.ValueGroupRef;
                oSLFLG.StringLength = GetUIntArray(InsertToLengthLongStringsFuzzData.DataCollection);
                oStringLengthGroups.Add(oSLFLG);
            }
            oSLF.LengthGroup = oStringLengthGroups.ToArray();

            // Create the ValueRanges
            List<ValueRange> oValueRangeList = new List<ValueRange>(oSLF.LengthRange);
            AddValueRange(oValueRangeList, oSLFT.InsertStringLength, InsertLongStringsRange, GetRefName(InsertLongStringsRangeProperty));
            AddValueRange(oValueRangeList, oSLFT.InsertTotalStringLength, InsertToLengthLongStringsRange, GetRefName(InsertToLengthLongStringsRangeProperty));
            oSLF.LengthRange = oValueRangeList.ToArray();
        }

        /// <summary>
        /// If DefaultFuzzer return a StringLengthFuzzersType, if not DefaultFuzzer return StringLengthFuzzerCustomFuzzer and populate
        /// node name and namespace.  If not default and no name and namespace, return null.
        /// </summary>
        protected StringLengthFuzzersType CreateStringLengthFuzzersType()
        {
            if (DefaultFuzzer)
                return new StringLengthFuzzersType();
            else
            {
                if (String.IsNullOrEmpty(CustomNodeName.Value) && String.IsNullOrEmpty(CustomNodeNamespace.Value))
                    return null;

                StringLengthFuzzerCustomFuzzer oSLFCF = new StringLengthFuzzerCustomFuzzer();
                oSLFCF.NodeName = CustomNodeName.Value;
                oSLFCF.NodeNamespace = CustomNodeNamespace.Value;
                return oSLFCF as StringLengthFuzzersType;
            }
        }

        /// <summary>
        /// Update the current String Value type fuzzing data
        /// </summary>
        protected void UpdateStringValueTypeConfig(SimpleTypeFuzzerConfig oSTFC)
        {
            if (null == oSTFC.StringLengthFuzzer)
                oSTFC.StringLengthFuzzer = new StringLengthFuzzer();

            // Save the default string fuzzers
            StringValueFuzzer oSVF = oSTFC.StringValueFuzzer;
            // Create the string length fuzzers
            StringValueFuzzersType oSVFT = CreateStringValueFuzzersType();
            oSVFT.ReplaceString = CreateValueFuzzerType(ReplaceStringsFuzzData.DataCollection, GetRefName(ReplaceStringsFuzzDataProperty), null, null);
            oSVFT.InsertString = CreateValueFuzzerType(InsertStringsFuzzData.DataCollection, GetRefName(InsertStringsFuzzDataProperty), InsertStringsRange, GetRefName(InsertStringsRangeProperty));
            oSVFT.EncodeString = CreateValueFuzzerType(EncodeStringsFuzzData.DataCollection, GetRefName(EncodeStringsFuzzDataProperty), null, null);
            // Add the fuzzers as either the default or a custom
            if (DefaultFuzzer)
                oSVF.DefaultFuzzers = oSVFT;
            else
            {
                List<StringValueFuzzerCustomFuzzer> oSLFCFList = new List<StringValueFuzzerCustomFuzzer>(oSVF.CustomFuzzer);
                oSLFCFList.Add(oSVFT as StringValueFuzzerCustomFuzzer);
                oSVF.CustomFuzzer = oSLFCFList.ToArray();
            }
            // Create the string value fuzzer value groups
            List<StringValueFuzzerStringGroup> oStringGroups = new List<StringValueFuzzerStringGroup>(oSVF.StringGroup);
            StringValueFuzzerStringGroup oSVFSG = new StringValueFuzzerStringGroup();
            // Add the ValueGroups, always add the default ones, even if no fuzzers were being used
            if ((null != oSVFT.ReplaceString) || DefaultFuzzer)
            {
                oSVFSG.ID = DefaultFuzzer ? GetRefName(ReplaceStringsFuzzDataProperty) : oSVFT.ReplaceString.ValueGroupRef;
                oSVFSG.StringValue = GetStringArray(ReplaceStringsFuzzData.DataCollection);
                oStringGroups.Add(oSVFSG);
            }
            if ((null != oSVFT.InsertString) || DefaultFuzzer)
            {
                oSVFSG = new StringValueFuzzerStringGroup();
                oSVFSG.ID = DefaultFuzzer ? GetRefName(InsertStringsFuzzDataProperty) : oSVFT.InsertString.ValueGroupRef;
                oSVFSG.StringValue = GetStringArray(InsertStringsFuzzData.DataCollection);
                oStringGroups.Add(oSVFSG);
            }
            if ((null != oSVFT.EncodeString) || DefaultFuzzer)
            {
                oSVFSG = new StringValueFuzzerStringGroup();
                oSVFSG.ID = DefaultFuzzer ? GetRefName(EncodeStringsFuzzDataProperty) : oSVFT.EncodeString.ValueGroupRef;
                oSVFSG.StringValue = GetStringArray(EncodeStringsFuzzData.DataCollection);
                oStringGroups.Add(oSVFSG);
            }
            oSVF.StringGroup = oStringGroups.ToArray();

            // Create the ValueRanges
            List<ValueRange> oValueRangeList = new List<ValueRange>(oSVF.StringRange);
            AddValueRange(oValueRangeList, oSVFT.InsertString, InsertStringsRange, GetRefName(InsertStringsRangeProperty));
            oSVF.StringRange = oValueRangeList.ToArray();
        }

        /// <summary>
        /// If default return a StringValueFuzzersType, if not default return StringValueFuzzerCustomFuzzer and populate
        /// node name and namespace.  If not default and no name and namespace, return null.
        /// </summary>
        protected StringValueFuzzersType CreateStringValueFuzzersType()
        {
            if (DefaultFuzzer)
                return new StringValueFuzzersType();
            else
            {
                if (String.IsNullOrEmpty(CustomNodeName.Value) && String.IsNullOrEmpty(CustomNodeNamespace.Value))
                    return null;

                StringValueFuzzerCustomFuzzer oSLFCF = new StringValueFuzzerCustomFuzzer();
                oSLFCF.NodeName = CustomNodeName.Value;
                oSLFCF.NodeNamespace = CustomNodeNamespace.Value;
                return oSLFCF as StringValueFuzzersType;
            }
        }
    }
}
