using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Windows;
using System.ComponentModel;
using Fuzzware.Fuzzsaw.Common;
using Fuzzware.Schemer.AutoGenerated;

namespace Fuzzware.Fuzzsaw.FuzzingConfig.ViewModel
{
    public class DataStructuresConfigViewModel : BaseFuzzerViewModel, IDataErrorInfo
    {
        #region Dependency Properties

        static readonly DependencyProperty OccurrenceFuzzerProperty = DependencyProperty.Register("OccurrenceFuzzer", typeof(FuzzDataSelectorViewModel), typeof(DataStructuresConfigViewModel));
        /// <summary>
        /// The Occurrence Fuzzer
        /// </summary>
        public FuzzDataSelectorViewModel OccurrenceFuzzer
        {
            get { return (FuzzDataSelectorViewModel)GetValue(OccurrenceFuzzerProperty); }
            set { SetValue(OccurrenceFuzzerProperty, value); }
        }

        static readonly DependencyProperty OrderFuzzerProperty = DependencyProperty.Register("OrderFuzzer", typeof(String), typeof(DataStructuresConfigViewModel));
        /// <summary>
        /// The Order Fuzzer
        /// </summary>
        public String OrderFuzzer
        {
            get { return (String)GetValue(OrderFuzzerProperty); }
            set { SetValue(OrderFuzzerProperty, value); }
        }

        #endregion

        #region Validation
        protected string Validate(object oValue)
        {
            if (!(oValue is String))
                return "Invalid Object";

            String strValue = oValue as String;

            if (strValue.Equals(ADD_A_VALUE))
                return null;

            if (String.IsNullOrEmpty(strValue))
                return "Empty values are not allowed";

            UInt64 num = 0;
            if (!UInt64.TryParse(strValue, out num))
            {
                return "A number is required";
            }

            return null;
        }
        #endregion

        ComplexTypeFuzzerConfig m_oCTFConfig;

        public DataStructuresConfigViewModel()
        {
            m_oValidateValueCallback += Validate;

            OccurrenceFuzzer = new FuzzDataSelectorViewModel();
            OccurrenceFuzzer.ValidateValuesMethod = ValidateValues;
            OrderFuzzer = "";
        }

        public void ApplyConfiguration(ComplexTypeFuzzerConfig oCTFConfig)
        {
            m_oCTFConfig = oCTFConfig;

            OccurrenceFuzzer.DataCollection.Clear();
            OrderFuzzer = "";

            if (null == m_oCTFConfig)
                return;

            // Load the Occurrence fuzzer data
            if (null != m_oCTFConfig.OccurranceFuzzingCount)
                CopyFuzzData(m_oCTFConfig.OccurranceFuzzingCount, OccurrenceFuzzer.DataCollection);
            OccurrenceFuzzer.DataCollection.Add(new ObservableString(ADD_A_VALUE));

            // Load the Order fuzzer data
            if (m_oCTFConfig.OrderFuzzingCountSpecified)
                OrderFuzzer = m_oCTFConfig.OrderFuzzingCount.ToString();
        }

        /// <summary>
        /// Gets an updated ComplexTypeFuzzerConfig with data in this view model
        /// </summary>
        public ComplexTypeFuzzerConfig ComplexTypeConfig
        {
            get
            {
                if (null == m_oCTFConfig)
                    m_oCTFConfig = new ComplexTypeFuzzerConfig();

                // Save the Occurrence Fuzzer data
                m_oCTFConfig.OccurranceFuzzingCount = GetUIntArray(OccurrenceFuzzer.DataCollection);
                
                // Save the Order Fuzzer data
                m_oCTFConfig.OrderFuzzingCountSpecified = false;
                if (!String.IsNullOrEmpty(OrderFuzzer))
                {
                    uint val = 0;
                    if (UInt32.TryParse(OrderFuzzer, out val))
                    {
                        m_oCTFConfig.OrderFuzzingCountSpecified = true;
                        m_oCTFConfig.OrderFuzzingCount = val;
                    }
                }

                return m_oCTFConfig;
            }
        }

        #region IDataErrorInfo Members

        public string Error
        {
            get { throw new NotImplementedException(); }
        }

        public string this[string columnName]
        {
            get 
            {
                string error = null;
                if (columnName.Equals(OrderFuzzerProperty.Name))
                {
                    error = Validate(OrderFuzzer);
                    if (String.IsNullOrEmpty(error))
                    {
                        // Make sure this is not the ADD_A_VALUE case
                        if(OrderFuzzer.Equals(ADD_A_VALUE))
                            error = "A number is required";
                    }
                    // You don't have to specify any Order Fuzzing
                    if (String.IsNullOrEmpty(OrderFuzzer))
                        error = null;
                }
                return error;
            }
        }

        #endregion
    }
}
