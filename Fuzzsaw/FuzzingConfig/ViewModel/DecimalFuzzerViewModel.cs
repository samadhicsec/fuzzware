using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Text;
using System.Windows;
using Fuzzware.Fuzzsaw.Common;
using Fuzzware.Schemer.AutoGenerated;

namespace Fuzzware.Fuzzsaw.FuzzingConfig.ViewModel
{
    public class DecimalFuzzerViewModel : BaseFuzzerViewModel
    {
        #region Dependency Properties

        static readonly DependencyProperty ReplaceDecimalsFuzzDataProperty = DependencyProperty.Register("ReplaceDecimalsFuzzData", typeof(FuzzDataSelectorViewModel), typeof(DecimalFuzzerViewModel));
        /// <summary>
        /// ReplaceDecimalsFuzzData
        /// </summary>
        public FuzzDataSelectorViewModel ReplaceDecimalsFuzzData
        {
            get { return (FuzzDataSelectorViewModel)GetValue(ReplaceDecimalsFuzzDataProperty); }
            set { SetValue(ReplaceDecimalsFuzzDataProperty, value); }
        }

        static readonly DependencyProperty RandomDecimalsFuzzDataProperty = DependencyProperty.Register("RandomDecimalsFuzzData", typeof(ObservableString), typeof(DecimalFuzzerViewModel));
        /// <summary>
        /// RandomDecimalsFuzzData
        /// </summary>
        public ObservableString RandomDecimalsFuzzData
        {
            get { return (ObservableString)GetValue(RandomDecimalsFuzzDataProperty); }
            set { SetValue(RandomDecimalsFuzzDataProperty, value); }
        }

        #endregion

        #region Validation
        protected string Validate(object oValue)
        {
            if (!(oValue is String))
                return "Invalid Object";

            String strValue = oValue as String;

            if (strValue.Equals(ADD_A_VALUE))
                return null;

            if (String.IsNullOrEmpty(strValue))
                return "Empty values are not allowed";

            Decimal num = 0;
            if (!Decimal.TryParse(strValue, out num))
            {
                return "A number is required";
            }

            return null;
        }
        #endregion

        public DecimalFuzzerViewModel() : base()
        {
            m_oValidateValueCallback += Validate;

            ReplaceDecimalsFuzzData = new FuzzDataSelectorViewModel();
            ReplaceDecimalsFuzzData.ValidateValuesMethod = ValidateValues;
            RandomDecimalsFuzzData = new ObservableString("");
        }

        private void InitProperties()
        {
            ReplaceDecimalsFuzzData.DataCollection.Clear();
            RandomDecimalsFuzzData.Value = "";
        }

        protected void PopulateFuzzData(SimpleTypeFuzzerConfig oSTFC, DecimalValueFuzzersType oDVFT)
        {
            // Always call populate so we add the final value to the collections that allows us to add new values
            PopulateValueFuzzData((null != oDVFT) ? oDVFT.ReplaceDecimal : null, oSTFC.DecimalValueFuzzer, ReplaceDecimalsFuzzData.DataCollection, GetRefName(ReplaceDecimalsFuzzDataProperty));
            if ((null != oDVFT) && (null != oDVFT.RandomDecimal))
                RandomDecimalsFuzzData = new ObservableString(oDVFT.RandomDecimal.Iterations.ToString());
        }

        /// <summary>
        /// Initialisation for the default decimal fuzzer
        /// </summary>
        public void InitialiseData(SimpleTypeFuzzerConfig oSTFC, DecimalValueFuzzersType oDVFT)
        {
            InitProperties();

            DefaultFuzzer = true;
            OnOffControl.On = true;
            CustomFuzzer = false;

            // For the default fuzzer, if there are no fuzzers configured, then disable config
            if((null != oDVFT) &&
                (null == oDVFT.ReplaceDecimal) &&
                (null == oDVFT.RandomDecimal))
            {
                OnOffControl.On = false;
            }

            PopulateFuzzData(oSTFC, oDVFT);
        }

        /// <summary>
        /// The constructor for the custom string fuzzer
        /// </summary>
        public DecimalFuzzerViewModel(SimpleTypeFuzzerConfig oSTFC, DecimalValueFuzzerCustomFuzzer oDVFCF)
            : this()
        {
            DefaultFuzzer = false;
            // OnOffControl.On is always true for custom fuzzers
            OnOffControl.On = true;
            CustomFuzzer = true;

            PopulateFuzzData(oSTFC, oDVFCF as DecimalValueFuzzersType);

            if (null != oDVFCF)
            {
                CustomNodeNamespace = new ObservableString(oDVFCF.NodeNamespace);
                CustomNodeName = new ObservableString(oDVFCF.NodeName);
            }
        }

        private void PopulateValueFuzzData(ValueFuzzerType oFuzzerType, DecimalValueFuzzer oDVF, ObservableCollection<ObservableString> BindableData, String DefaultGroupRef)
        {
            String ValueGroupRef = null;
            if ((null != oFuzzerType) && (null != oDVF))
            {
                ValueGroupRef = oFuzzerType.ValueGroupRef;    
            }
            else if(DefaultFuzzer && !OnOffControl.On && (null != oDVF))
            {
                ValueGroupRef = DefaultGroupRef;
            }
            if(!String.IsNullOrEmpty(ValueGroupRef))
            {
                DecimalValueFuzzerDecimalGroup oDVFDG = FindStringValueGroup(ValueGroupRef, oDVF.DecimalGroup);
                if (null != oDVFDG)
                    CopyFuzzData(oDVFDG.DecimalValue, BindableData);
            }
            // Always make sure the last item is the option to add a new value
            BindableData.Add(new ObservableString(ADD_A_VALUE));
        }

        /// <summary>
        /// Find the string value fuzz data
        /// </summary>
        private DecimalValueFuzzerDecimalGroup FindStringValueGroup(String Name, DecimalValueFuzzerDecimalGroup[] oDVFDG)
        {
            if (null != oDVFDG)
            {
                for (int i = 0; i < oDVFDG.Length; i++)
                {
                    if (oDVFDG[i].ID.Equals(Name))
                        return oDVFDG[i];
                }
            }
            return null;
        }

        /// <summary>
        /// Update the current Decimal types view to its original data source
        /// </summary>
        public void UpdateDecimalTypeConfig(SimpleTypeFuzzerConfig oSTFC)
        {
            if (null == oSTFC.DecimalValueFuzzer)
                oSTFC.DecimalValueFuzzer = new DecimalValueFuzzer();

            // Save the default string fuzzers
            DecimalValueFuzzer oDVF = oSTFC.DecimalValueFuzzer;
            // Create the string length fuzzers
            DecimalValueFuzzersType oDVFT = CreateDecimalValueFuzzersType();
            oDVFT.ReplaceDecimal = CreateValueFuzzerType(ReplaceDecimalsFuzzData.DataCollection, GetRefName(ReplaceDecimalsFuzzDataProperty), null, null);
            oDVFT.RandomDecimal = CreateRandomFuzzerType(RandomDecimalsFuzzData);
            // Add the fuzzers as either the default or a custom
            if (DefaultFuzzer)
                oDVF.DefaultFuzzers = oDVFT;
            else
            {
                List<DecimalValueFuzzerCustomFuzzer> oIVFCFList = new List<DecimalValueFuzzerCustomFuzzer>(oDVF.CustomFuzzer);
                oIVFCFList.Add(oDVFT as DecimalValueFuzzerCustomFuzzer);
                oDVF.CustomFuzzer = oIVFCFList.ToArray();
            }
            // Create the string value fuzzer value groups
            List<DecimalValueFuzzerDecimalGroup> oDecimalGroups = new List<DecimalValueFuzzerDecimalGroup>(oDVF.DecimalGroup);
            DecimalValueFuzzerDecimalGroup oIVFIG = new DecimalValueFuzzerDecimalGroup();
            // Add the ValueGroups, always add the default ones, even if no fuzzers were being used
            if ((null != oDVFT.ReplaceDecimal) || DefaultFuzzer)
            {
                oIVFIG.ID = DefaultFuzzer ? GetRefName(ReplaceDecimalsFuzzDataProperty) : oDVFT.ReplaceDecimal.ValueGroupRef;
                oIVFIG.DecimalValue = GetStringArray(ReplaceDecimalsFuzzData.DataCollection);
                oDecimalGroups.Add(oIVFIG);
            }
            oDVF.DecimalGroup = oDecimalGroups.ToArray();
        }

        /// <summary>
        /// If default return a DecimalValueFuzzersType, if not default return DecimalValueFuzzerCustomFuzzer and populate
        /// node name and namespace.  If not default and no name and namespace, return null.
        /// </summary>
        protected DecimalValueFuzzersType CreateDecimalValueFuzzersType()
        {
            if (DefaultFuzzer)
                return new DecimalValueFuzzersType();
            else
            {
                if (String.IsNullOrEmpty(CustomNodeName.Value) && String.IsNullOrEmpty(CustomNodeNamespace.Value))
                    return null;

                DecimalValueFuzzerCustomFuzzer oDVFCF = new DecimalValueFuzzerCustomFuzzer();
                oDVFCF.NodeName = CustomNodeName.Value;
                oDVFCF.NodeNamespace = CustomNodeNamespace.Value;
                return oDVFCF as DecimalValueFuzzersType;
            }
        }
    }
}
