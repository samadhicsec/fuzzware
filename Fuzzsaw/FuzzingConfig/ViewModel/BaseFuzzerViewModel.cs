using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Text;
using System.Windows;
using Fuzzware.Fuzzsaw.Common;
using Fuzzware.Fuzzsaw.Common.ViewModel;
using Fuzzware.Common.Encoding;
using Fuzzware.Schemer.AutoGenerated;

namespace Fuzzware.Fuzzsaw.FuzzingConfig.ViewModel
{
    public class BaseFuzzerViewModel : ViewModelBase
    {
        #region Dependency Properties

        static readonly DependencyProperty DefaultFuzzerEnabledProperty = DependencyProperty.Register("DefaultFuzzerEnabled", typeof(bool), typeof(BaseFuzzerViewModel));
        /// <summary>
        /// Whether or not the default Fuzzer is enabled
        /// </summary>
        public bool DefaultFuzzerEnabled
        {
            get { return (bool)GetValue(DefaultFuzzerEnabledProperty); }
            set { SetValue(DefaultFuzzerEnabledProperty, value); }
        }

        static readonly DependencyProperty DefaultFuzzerProperty = DependencyProperty.Register("DefaultFuzzer", typeof(bool), typeof(BaseFuzzerViewModel));
        /// <summary>
        /// Whether or not this view model is for the default Fuzzer
        /// </summary>
        public bool DefaultFuzzer
        {
            get { return (bool)GetValue(DefaultFuzzerProperty); }
            set { SetValue(DefaultFuzzerProperty, value); }
        }

        static readonly DependencyProperty CustomFuzzerProperty = DependencyProperty.Register("CustomFuzzer", typeof(bool), typeof(BaseFuzzerViewModel));
        /// <summary>
        /// Whether or not this view model is for a custom Fuzzer (we need this even though it is the negative of DefaultFuzzer
        /// as it makes it easy to show or hide the delete button for custom fuzzers)
        /// </summary>
        public bool CustomFuzzer
        {
            get { return (bool)GetValue(CustomFuzzerProperty); }
            set { SetValue(CustomFuzzerProperty, value); }
        }

        static readonly DependencyProperty OnOffControlProperty = DependencyProperty.Register("OnOffControl", typeof(OnOffControlViewModel), typeof(BaseFuzzerViewModel));
        /// <summary>
        /// The view model for the OnOffControlView
        /// </summary>
        public OnOffControlViewModel OnOffControl
        {
            get { return (OnOffControlViewModel)GetValue(OnOffControlProperty); }
            set { SetValue(OnOffControlProperty, value); }
        }

        static readonly DependencyProperty CustomNodeNameProperty = DependencyProperty.Register("CustomNodeName", typeof(ObservableString), typeof(BaseFuzzerViewModel));
        /// <summary>
        /// If this is not the default fuzzer it is a custom one and will have a node name that is applies to
        /// </summary>
        public ObservableString CustomNodeName
        {
            get { return (ObservableString)GetValue(CustomNodeNameProperty); }
            set { SetValue(CustomNodeNameProperty, value); }
        }

        static readonly DependencyProperty CustomNodeNamespaceProperty = DependencyProperty.Register("CustomNodeNamespace", typeof(ObservableString), typeof(BaseFuzzerViewModel));
        /// <summary>
        /// If this is not the default fuzzer it is a custom one and will have a node namespace that is applies to
        /// </summary>
        public ObservableString CustomNodeNamespace
        {
            get { return (ObservableString)GetValue(CustomNodeNamespaceProperty); }
            set { SetValue(CustomNodeNamespaceProperty, value); }
        }

        #endregion

        protected const string ADD_A_VALUE = "Add a value";

        protected Func<object, string> m_oValidateValueCallback;
        /// <summary>
        /// Returns the Func to validate the data values.  The object is the value, the string is the error (or null for no error)
        /// </summary>
        public Func<object, string> ValidateValues
        {
            get { return m_oValidateValueCallback; }
        }

        protected BaseFuzzerViewModel() 
        {
            //DefaultFuzzerEnabled = true;
            DefaultFuzzer = true;
            CustomFuzzer = false;
            OnOffControl = new OnOffControlViewModel();
            OnOffControl.On = true;
            CustomNodeName = new ObservableString("");
            CustomNodeNamespace = new ObservableString("");
        }

        /// <summary>
        /// Find the range data
        /// </summary>
        protected ValueRange FindRange(String Name, ValueRange[] oValueRanges)
        {
            if (null != oValueRanges)
            {
                for (int i = 0; i < oValueRanges.Length; i++)
                {
                    if (oValueRanges[i].ID.Equals(Name))
                        return oValueRanges[i];
                }
            }
            return null;
        }

        /// <summary>
        /// Copy array data into an ObservableCollection we can bind to
        /// </summary>
        protected void CopyFuzzData(byte[][] Data, ObservableCollection<ObservableString> BindableData)
        {
            HexCoder oHexCoder = new HexCoder();
            if (null != Data)
                for (int i = 0; i < Data.Length; i++)
                {
                    // Covert byte array into string
                    BindableData.Add(new ObservableString(oHexCoder.Encode(Data[i])));
                }
        }

        /// <summary>
        /// Copy array data into an ObservableCollection we can bind to
        /// </summary>
        protected void CopyFuzzData(uint[] Data, ObservableCollection<ObservableString> BindableData)
        {
            if (null != Data)
                for (int i = 0; i < Data.Length; i++)
                    BindableData.Add(new ObservableString(Data[i].ToString()));
        }

        /// <summary>
        /// Copy array data into an ObservableCollection we can bind to
        /// </summary>
        protected void CopyFuzzData(string[] Data, ObservableCollection<ObservableString> BindableData)
        {
            if (null != Data)
                for (int i = 0; i < Data.Length; i++)
                    BindableData.Add(new ObservableString(Data[i]));
        }

        /// <summary>
        /// Add the fuzzing technique to the fuzzer
        /// </summary>
        protected ValueFuzzerType CreateValueFuzzerType(ObservableCollection<ObservableString> oValues,
            String oValueGroupRef,
            RangeDataViewModel oRangeDataView,
            String oValuesRangeRef)
        {
            if (OnOffControl.On && (oValues.Count > 1))
            {
                ValueFuzzerType oValueFuzzerType = new ValueFuzzerType();
                oValueFuzzerType.ValueGroupRef = oValueGroupRef;
                if ((null != oRangeDataView) && (!oRangeDataView.IsEmpty))
                {
                    oValueFuzzerType.ValueRangeRef = oValuesRangeRef;
                }
                return oValueFuzzerType;
            }
            return null;
        }

        /// <summary>
        /// Add the fuzzing technique to the fuzzer
        /// </summary>
        protected RandomFuzzerType CreateRandomFuzzerType(ObservableString oValue)
        {
            if (OnOffControl.On && !String.IsNullOrEmpty(oValue.Value))
            {
                uint val = 0;
                if (UInt32.TryParse(oValue.Value, out val))
                {
                    RandomFuzzerType oRandomFuzzerType = new RandomFuzzerType();
                    oRandomFuzzerType.Iterations = val;
                    return oRandomFuzzerType;
                }
            }
            return null;
        }

        /// <summary>
        /// Get a ref name for a default fuzzer
        /// </summary>
        protected String GetRefName(DependencyProperty oProperty)
        {
            if (DefaultFuzzer)
                return "default-" + oProperty.Name;
            else
                return "ref-" + Guid.NewGuid().ToString();
        }

        /// <summary>
        /// Convert a ObservableCollection&lt;ObservableString> to a uint[]
        /// </summary>
        protected uint[] GetUIntArray(ObservableCollection<ObservableString> oValues)
        {
            List<uint> oValueList = new List<uint>();
            for (int i = 0; i < oValues.Count - 1; i++)
            {
                uint val = 0;
                if (UInt32.TryParse(oValues[i].Value, out val))
                    oValueList.Add(val);
                else
                    System.Diagnostics.Debug.Write("GetUIntArray: Could not convert '" + oValues[i].Value + "' to uint");
            }
            return oValueList.ToArray();
        }

        /// <summary>
        /// Convert a ObservableCollection&lt;ObservableString> to a string[]
        /// </summary>
        protected string[] GetStringArray(ObservableCollection<ObservableString> oValues)
        {
            List<string> oValueList = new List<string>();
            for (int i = 0; i < oValues.Count - 1; i++)
            {
                oValueList.Add(oValues[i].Value);
            }
            return oValueList.ToArray();
        }

        /// <summary>
        /// Convert a ObservableCollection&lt;ObservableString> to a byte[][]
        /// </summary>
        protected byte[][] GetByteArray(ObservableCollection<ObservableString> oValues)
        {
            HexCoder oHexCoder = new HexCoder();
            List<byte[]> oValueList = new List<byte[]>();
            for (int i = 0; i < oValues.Count - 1; i++)
            {
                byte[] converted = oHexCoder.DecodeToBytes(oValues[i].Value);
                if((null != converted) && converted.Length > 0)
                    oValueList.Add(converted);
            }
            return oValueList.ToArray();
        }

        /// <summary>
        /// Adds a ValueRange to the list
        /// </summary>
        protected void AddValueRange(List<ValueRange> oValueRangeList, ValueFuzzerType oValueFuzzerType, RangeDataViewModel oRangeDataView, String DefaultValueRangeRef)
        {
            ValueRange oRefValueRange = new ValueRange();
            if (((null != oValueFuzzerType) && (String.IsNullOrEmpty(oValueFuzzerType.ValueRangeRef))) || DefaultFuzzer)
            {
                ValueRange oValueRange = new ValueRange();
                uint val = 0;
                oValueRange.ID = DefaultFuzzer ? DefaultValueRangeRef : oValueFuzzerType.ValueRangeRef;
                if (!String.IsNullOrEmpty(oRangeDataView.StartPosition))
                    if (UInt32.TryParse(oRangeDataView.StartPosition, out val))
                        oValueRange.StartIndex = val;
                if (!String.IsNullOrEmpty(oRangeDataView.StepSize))
                    if (UInt32.TryParse(oRangeDataView.StepSize, out val))
                        oValueRange.StepSize = val;
                if (!String.IsNullOrEmpty(oRangeDataView.Length))
                    if (UInt32.TryParse(oRangeDataView.Length, out val))
                        oValueRange.Length = val;
                // Don't bother adding it if it's the default value
                if ((oValueRange.StartIndex == oRefValueRange.StartIndex) &&
                    (oValueRange.StepSize == oRefValueRange.StepSize) &&
                    (oValueRange.Length == oRefValueRange.Length))
                    return;

                oValueRangeList.Add(oValueRange);
            }
        }

        /// <summary>
        /// Populate a RangeDataViewModel
        /// </summary>
        protected void PopulateRangeData(ValueFuzzerType oFuzzerType, ValueRange[] oValueRanges, RangeDataViewModel oRangeDataView, String DefaultRangeRef)
        {
            String ValueRangeRef = null;
            if (null != oFuzzerType)
            {
                ValueRangeRef = oFuzzerType.ValueRangeRef;
            }
            else if (DefaultFuzzer && !OnOffControl.On)
            {
                ValueRangeRef = DefaultRangeRef;
            }
            ValueRange oValueRange = FindRange(ValueRangeRef, oValueRanges);
            if (null != oValueRange)
            {
                oRangeDataView.StartPosition = oValueRange.StartIndex.ToString();
                oRangeDataView.StepSize = oValueRange.StepSize.ToString();
                oRangeDataView.Length = oValueRange.Length.ToString();
            }
        }
    }
}
