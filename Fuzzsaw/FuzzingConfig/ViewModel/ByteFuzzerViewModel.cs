using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Text;
using System.Windows;
using Fuzzware.Fuzzsaw.Common;
using Fuzzware.Common.Encoding;
using Fuzzware.Schemer.AutoGenerated;

namespace Fuzzware.Fuzzsaw.FuzzingConfig.ViewModel
{
    public class ByteFuzzerViewModel : BaseFuzzerViewModel
    {
        #region Dependency Properties

        static readonly DependencyProperty ReplaceBytesFuzzDataProperty = DependencyProperty.Register("ReplaceBytesFuzzData", typeof(FuzzDataSelectorViewModel), typeof(ByteFuzzerViewModel));
        /// <summary>
        /// ReplaceBytesFuzzData
        /// </summary>
        public FuzzDataSelectorViewModel ReplaceBytesFuzzData
        {
            get { return (FuzzDataSelectorViewModel)GetValue(ReplaceBytesFuzzDataProperty); }
            set { SetValue(ReplaceBytesFuzzDataProperty, value); }
        }

        static readonly DependencyProperty InsertBytesFuzzDataProperty = DependencyProperty.Register("InsertBytesFuzzData", typeof(FuzzDataSelectorViewModel), typeof(ByteFuzzerViewModel));
        /// <summary>
        /// InsertBytesFuzzData
        /// </summary>
        public FuzzDataSelectorViewModel InsertBytesFuzzData
        {
            get { return (FuzzDataSelectorViewModel)GetValue(InsertBytesFuzzDataProperty); }
            set { SetValue(InsertBytesFuzzDataProperty, value); }
        }

        static readonly DependencyProperty RandomBytesFuzzDataProperty = DependencyProperty.Register("RandomBytesFuzzData", typeof(ObservableString), typeof(ByteFuzzerViewModel));
        /// <summary>
        /// RandomBytesFuzzData
        /// </summary>
        public ObservableString RandomBytesFuzzData
        {
            get { return (ObservableString)GetValue(RandomBytesFuzzDataProperty); }
            set { SetValue(RandomBytesFuzzDataProperty, value); }
        }

        static readonly DependencyProperty RandomBitFlipsFuzzDataProperty = DependencyProperty.Register("RandomBitFlipsFuzzData", typeof(ObservableString), typeof(ByteFuzzerViewModel));
        /// <summary>
        /// RandomBitFlipsFuzzData
        /// </summary>
        public ObservableString RandomBitFlipsFuzzData
        {
            get { return (ObservableString)GetValue(RandomBitFlipsFuzzDataProperty); }
            set { SetValue(RandomBitFlipsFuzzDataProperty, value); }
        }

        static readonly DependencyProperty XORBytesFuzzDataProperty = DependencyProperty.Register("XORBytesFuzzData", typeof(FuzzDataSelectorViewModel), typeof(ByteFuzzerViewModel));
        /// <summary>
        /// XORBytesFuzzData
        /// </summary>
        public FuzzDataSelectorViewModel XORBytesFuzzData
        {
            get { return (FuzzDataSelectorViewModel)GetValue(XORBytesFuzzDataProperty); }
            set { SetValue(XORBytesFuzzDataProperty, value); }
        }

        static readonly DependencyProperty ANDBytesFuzzDataProperty = DependencyProperty.Register("ANDBytesFuzzData", typeof(FuzzDataSelectorViewModel), typeof(ByteFuzzerViewModel));
        /// <summary>
        /// ANDBytesFuzzData
        /// </summary>
        public FuzzDataSelectorViewModel ANDBytesFuzzData
        {
            get { return (FuzzDataSelectorViewModel)GetValue(ANDBytesFuzzDataProperty); }
            set { SetValue(ANDBytesFuzzDataProperty, value); }
        }

        static readonly DependencyProperty ORBytesFuzzDataProperty = DependencyProperty.Register("ORBytesFuzzData", typeof(FuzzDataSelectorViewModel), typeof(ByteFuzzerViewModel));
        /// <summary>
        /// ORBytesFuzzData
        /// </summary>
        public FuzzDataSelectorViewModel ORBytesFuzzData
        {
            get { return (FuzzDataSelectorViewModel)GetValue(ORBytesFuzzDataProperty); }
            set { SetValue(ORBytesFuzzDataProperty, value); }
        }

        static readonly DependencyProperty ReplaceBytesRangeProperty = DependencyProperty.Register("ReplaceBytesRange", typeof(RangeDataViewModel), typeof(ByteFuzzerViewModel));
        /// <summary>
        /// ReplaceBytesRange
        /// </summary>
        public RangeDataViewModel ReplaceBytesRange
        {
            get { return (RangeDataViewModel)GetValue(ReplaceBytesRangeProperty); }
            set { SetValue(ReplaceBytesRangeProperty, value); }
        }

        static readonly DependencyProperty InsertBytesRangeProperty = DependencyProperty.Register("InsertBytesRange", typeof(RangeDataViewModel), typeof(ByteFuzzerViewModel));
        /// <summary>
        /// InsertBytesRange
        /// </summary>
        public RangeDataViewModel InsertBytesRange
        {
            get { return (RangeDataViewModel)GetValue(InsertBytesRangeProperty); }
            set { SetValue(InsertBytesRangeProperty, value); }
        }

        static readonly DependencyProperty XORBytesRangeProperty = DependencyProperty.Register("XORBytesRange", typeof(RangeDataViewModel), typeof(ByteFuzzerViewModel));
        /// <summary>
        /// XORBytesRange
        /// </summary>
        public RangeDataViewModel XORBytesRange
        {
            get { return (RangeDataViewModel)GetValue(XORBytesRangeProperty); }
            set { SetValue(XORBytesRangeProperty, value); }
        }

        static readonly DependencyProperty ANDBytesRangeProperty = DependencyProperty.Register("ANDBytesRange", typeof(RangeDataViewModel), typeof(ByteFuzzerViewModel));
        /// <summary>
        /// ANDBytesRange
        /// </summary>
        public RangeDataViewModel ANDBytesRange
        {
            get { return (RangeDataViewModel)GetValue(ANDBytesRangeProperty); }
            set { SetValue(ANDBytesRangeProperty, value); }
        }

        static readonly DependencyProperty ORBytesRangeProperty = DependencyProperty.Register("ORBytesRange", typeof(RangeDataViewModel), typeof(ByteFuzzerViewModel));
        /// <summary>
        /// ORBytesRange
        /// </summary>
        public RangeDataViewModel ORBytesRange
        {
            get { return (RangeDataViewModel)GetValue(ORBytesRangeProperty); }
            set { SetValue(ORBytesRangeProperty, value); }
        }

        #endregion

        #region Validation
        protected string Validate(object oValue)
        {
            if (!(oValue is String))
                return "Invalid Object";

            String strValue = oValue as String;

            if (strValue.Equals(ADD_A_VALUE))
                return null;

            if (String.IsNullOrEmpty(strValue))
                return "Empty values are not allowed";

            HexCoder oHexCoder = new HexCoder();
            byte[] oBytes = null;
            CaptureLog();
            try
            {
                oBytes = oHexCoder.DecodeToBytes(strValue);
            }
            catch { }
            StopCapturingLog();
            if (!String.IsNullOrEmpty(m_oLogOutput.ToString()) || (null == oBytes) || ((null != oBytes) && (0 == oBytes.Length)))
                return "Please enter a hexidecimal value, without 0x";

            return null;
        }
        #endregion

        public ByteFuzzerViewModel() : base()
        {
            m_oValidateValueCallback += Validate;

            ReplaceBytesFuzzData = new FuzzDataSelectorViewModel();
            ReplaceBytesFuzzData.ValidateValuesMethod = ValidateValues;
            InsertBytesFuzzData = new FuzzDataSelectorViewModel();
            InsertBytesFuzzData.ValidateValuesMethod = ValidateValues;
            RandomBytesFuzzData = new ObservableString("");
            RandomBitFlipsFuzzData = new ObservableString("");
            XORBytesFuzzData = new FuzzDataSelectorViewModel();
            XORBytesFuzzData.ValidateValuesMethod = ValidateValues;
            ANDBytesFuzzData = new FuzzDataSelectorViewModel();
            ANDBytesFuzzData.ValidateValuesMethod = ValidateValues;
            ORBytesFuzzData = new FuzzDataSelectorViewModel();
            ORBytesFuzzData.ValidateValuesMethod = ValidateValues;

            ReplaceBytesRange = new RangeDataViewModel();
            InsertBytesRange = new RangeDataViewModel();
            XORBytesRange = new RangeDataViewModel();
            ANDBytesRange = new RangeDataViewModel();
            ORBytesRange = new RangeDataViewModel();
        }

        private void InitProperties()
        {
            ReplaceBytesFuzzData.DataCollection.Clear();
            InsertBytesFuzzData.DataCollection.Clear();
            RandomBytesFuzzData.Value = "";
            RandomBitFlipsFuzzData.Value = "";
            XORBytesFuzzData.DataCollection.Clear();
            ANDBytesFuzzData.DataCollection.Clear();
            ORBytesFuzzData.DataCollection.Clear();

            ReplaceBytesRange.Reset();
            InsertBytesRange.Reset();
            XORBytesRange.Reset();
            ANDBytesRange.Reset();
            ORBytesRange.Reset();
        }

        protected void PopulateFuzzData(SimpleTypeFuzzerConfig oSTFC, ByteValueFuzzersType oBVFT)
        {
            // Always call populate so we add the final value to the collections that allows us to add new values
            PopulateValueFuzzData((null != oBVFT) ? oBVFT.ReplaceBytes : null, oSTFC.BinaryValueFuzzer, ReplaceBytesFuzzData.DataCollection, GetRefName(ReplaceBytesFuzzDataProperty));
            PopulateValueFuzzData((null != oBVFT) ? oBVFT.InsertBytes : null, oSTFC.BinaryValueFuzzer, InsertBytesFuzzData.DataCollection, GetRefName(InsertBytesFuzzDataProperty));
            if ((null != oBVFT) && (null != oBVFT.RandomBinary))
                RandomBytesFuzzData = new ObservableString(oBVFT.RandomBinary.Iterations.ToString());
            if ((null != oBVFT) && (null != oBVFT.RandomBitFlip))
                RandomBitFlipsFuzzData = new ObservableString(oBVFT.RandomBitFlip.Iterations.ToString());
            PopulateValueFuzzData((null != oBVFT) ? oBVFT.XOrBytes : null, oSTFC.BinaryValueFuzzer, XORBytesFuzzData.DataCollection, GetRefName(XORBytesFuzzDataProperty));
            PopulateValueFuzzData((null != oBVFT) ? oBVFT.AndBytes : null, oSTFC.BinaryValueFuzzer, ANDBytesFuzzData.DataCollection, GetRefName(ANDBytesFuzzDataProperty));
            PopulateValueFuzzData((null != oBVFT) ? oBVFT.OrBytes : null, oSTFC.BinaryValueFuzzer, ORBytesFuzzData.DataCollection, GetRefName(ORBytesFuzzDataProperty));

            PopulateRangeData((null != oBVFT) ? oBVFT.ReplaceBytes : null, (null != oSTFC.BinaryValueFuzzer) ? oSTFC.BinaryValueFuzzer.ByteRange : null, ReplaceBytesRange, GetRefName(ReplaceBytesRangeProperty));
            PopulateRangeData((null != oBVFT) ? oBVFT.InsertBytes : null, (null != oSTFC.BinaryValueFuzzer) ? oSTFC.BinaryValueFuzzer.ByteRange : null, InsertBytesRange, GetRefName(InsertBytesRangeProperty));
            PopulateRangeData((null != oBVFT) ? oBVFT.XOrBytes : null, (null != oSTFC.BinaryValueFuzzer) ? oSTFC.BinaryValueFuzzer.ByteRange : null, XORBytesRange, GetRefName(XORBytesRangeProperty));
            PopulateRangeData((null != oBVFT) ? oBVFT.AndBytes : null, (null != oSTFC.BinaryValueFuzzer) ? oSTFC.BinaryValueFuzzer.ByteRange : null, ANDBytesRange, GetRefName(ANDBytesRangeProperty));
            PopulateRangeData((null != oBVFT) ? oBVFT.OrBytes : null, (null != oSTFC.BinaryValueFuzzer) ? oSTFC.BinaryValueFuzzer.ByteRange : null, ORBytesRange, GetRefName(ORBytesFuzzDataProperty));
        }

        /// <summary>
        /// Initialisation for the default byte fuzzer
        /// </summary>
        public void InitialiseData(SimpleTypeFuzzerConfig oSTFC, ByteValueFuzzersType oBVFT)
        {
            InitProperties();

            DefaultFuzzer = true;
            OnOffControl.On = true;
            CustomFuzzer = false;

            // For the default fuzzer, if there are no fuzzers configured, then disable config
            if ((null != oBVFT) &&
                (null == oBVFT.ReplaceBytes) &&
                (null == oBVFT.InsertBytes) &&
                (null == oBVFT.RandomBinary) &&
                (null == oBVFT.RandomBitFlip) &&
                (null == oBVFT.XOrBytes) &&
                (null == oBVFT.AndBytes) &&
                (null == oBVFT.OrBytes))
            {
                OnOffControl.On = false;
            }

            PopulateFuzzData(oSTFC, oBVFT);
            
        }

        /// <summary>
        /// The constructor for the custom byte fuzzer
        /// </summary>
        public ByteFuzzerViewModel(SimpleTypeFuzzerConfig oSTFC, BinaryValueFuzzerCustomFuzzer oBVFCF)
            : this()
        {
            DefaultFuzzer = false;
            // OnOffControl.On is always true for custom fuzzers
            OnOffControl.On = true;
            CustomFuzzer = true;

            PopulateFuzzData(oSTFC, oBVFCF as ByteValueFuzzersType);

            if (null != oBVFCF)
            {
                CustomNodeNamespace = new ObservableString(oBVFCF.NodeNamespace);
                CustomNodeName = new ObservableString(oBVFCF.NodeName);
            }
        }

        /// <summary>
        /// Populate the view model with data
        /// </summary>
        private void PopulateValueFuzzData(ValueFuzzerType oFuzzerType, BinaryValueFuzzer oBVF, ObservableCollection<ObservableString> BindableData, String DefGroupRef)
        {
            String ValueGroupRef = null;
            if ((null != oFuzzerType) && (null != oBVF))
            {
                ValueGroupRef = oFuzzerType.ValueGroupRef;
            }
            else if (DefaultFuzzer && !OnOffControl.On && (null != oBVF))
            {
                ValueGroupRef = DefGroupRef;
            }
            if (!String.IsNullOrEmpty(ValueGroupRef))
            {
                BinaryValueFuzzerByteGroup oBVFBG = FindStringValueGroup(ValueGroupRef, oBVF.ByteGroup);
                if (null != oBVFBG)
                    CopyFuzzData(oBVFBG.ByteValue, BindableData);
            }
            // Always make sure the last item is the option to add a new value
            BindableData.Add(new ObservableString(ADD_A_VALUE));
        }

        /// <summary>
        /// Find the string value fuzz data
        /// </summary>
        private BinaryValueFuzzerByteGroup FindStringValueGroup(String Name, BinaryValueFuzzerByteGroup[] oBVFBG)
        {
            if (null != oBVFBG)
            {
                for (int i = 0; i < oBVFBG.Length; i++)
                {
                    if (oBVFBG[i].ID.Equals(Name))
                        return oBVFBG[i];
                }
            }
            return null;
        }

        /// <summary>
        /// Update the current Byte types view to its original data source
        /// </summary>
        public void UpdateByteTypeConfig(SimpleTypeFuzzerConfig oSTFC)
        {
            if (null == oSTFC.BinaryValueFuzzer)
                oSTFC.BinaryValueFuzzer = new BinaryValueFuzzer();

            // Save the default string fuzzers
            BinaryValueFuzzer oBVF = oSTFC.BinaryValueFuzzer;
            // Create the string length fuzzers
            ByteValueFuzzersType oBVFT = CreateByteValueFuzzersType();
            oBVFT.ReplaceBytes = CreateValueFuzzerType(ReplaceBytesFuzzData.DataCollection, GetRefName(ReplaceBytesFuzzDataProperty), ReplaceBytesRange, GetRefName(ReplaceBytesRangeProperty));
            oBVFT.InsertBytes = CreateValueFuzzerType(InsertBytesFuzzData.DataCollection, GetRefName(InsertBytesFuzzDataProperty), InsertBytesRange, GetRefName(InsertBytesRangeProperty));
            oBVFT.RandomBinary = CreateRandomFuzzerType(RandomBytesFuzzData);
            oBVFT.RandomBitFlip = CreateRandomFuzzerType(RandomBitFlipsFuzzData);
            oBVFT.XOrBytes = CreateValueFuzzerType(XORBytesFuzzData.DataCollection, GetRefName(XORBytesFuzzDataProperty), XORBytesRange, GetRefName(XORBytesRangeProperty));
            oBVFT.AndBytes = CreateValueFuzzerType(ANDBytesFuzzData.DataCollection, GetRefName(ANDBytesFuzzDataProperty), ANDBytesRange, GetRefName(ANDBytesRangeProperty));
            oBVFT.OrBytes = CreateValueFuzzerType(ORBytesFuzzData.DataCollection, GetRefName(ORBytesFuzzDataProperty), ORBytesRange, GetRefName(ORBytesRangeProperty));
            // Add the fuzzers as either the default or a custom
            if (DefaultFuzzer)
                oBVF.DefaultFuzzers = oBVFT;
            else
            {
                List<BinaryValueFuzzerCustomFuzzer> oBVFCFList = new List<BinaryValueFuzzerCustomFuzzer>(oBVF.CustomFuzzer);
                oBVFCFList.Add(oBVFT as BinaryValueFuzzerCustomFuzzer);
                oBVF.CustomFuzzer = oBVFCFList.ToArray();
            }
            // Create the string value fuzzer value groups
            List<BinaryValueFuzzerByteGroup> oByteGroups = new List<BinaryValueFuzzerByteGroup>(oBVF.ByteGroup);
            BinaryValueFuzzerByteGroup oBVFBG = new BinaryValueFuzzerByteGroup();
            // Add the ValueGroups, always add the default ones, even if no fuzzers were being used
            if ((null != oBVFT.ReplaceBytes) || DefaultFuzzer)
            {
                oBVFBG.ID = DefaultFuzzer ? GetRefName(ReplaceBytesFuzzDataProperty) : oBVFT.ReplaceBytes.ValueGroupRef;
                oBVFBG.ByteValue = GetByteArray(ReplaceBytesFuzzData.DataCollection);
                oByteGroups.Add(oBVFBG);
            }
            if ((null != oBVFT.InsertBytes) || DefaultFuzzer)
            {
                oBVFBG = new BinaryValueFuzzerByteGroup();
                oBVFBG.ID = DefaultFuzzer ? GetRefName(InsertBytesFuzzDataProperty) : oBVFT.InsertBytes.ValueGroupRef;
                oBVFBG.ByteValue = GetByteArray(InsertBytesFuzzData.DataCollection);
                oByteGroups.Add(oBVFBG);
            }
            if ((null != oBVFT.XOrBytes) || DefaultFuzzer)
            {
                oBVFBG = new BinaryValueFuzzerByteGroup();
                oBVFBG.ID = DefaultFuzzer ? GetRefName(XORBytesFuzzDataProperty) : oBVFT.XOrBytes.ValueGroupRef;
                oBVFBG.ByteValue = GetByteArray(XORBytesFuzzData.DataCollection);
                oByteGroups.Add(oBVFBG);
            }
            if ((null != oBVFT.AndBytes) || DefaultFuzzer)
            {
                oBVFBG = new BinaryValueFuzzerByteGroup();
                oBVFBG.ID = DefaultFuzzer ? GetRefName(ANDBytesFuzzDataProperty) : oBVFT.AndBytes.ValueGroupRef;
                oBVFBG.ByteValue = GetByteArray(ANDBytesFuzzData.DataCollection);
                oByteGroups.Add(oBVFBG);
            }
            if ((null != oBVFT.OrBytes) || DefaultFuzzer)
            {
                oBVFBG = new BinaryValueFuzzerByteGroup();
                oBVFBG.ID = DefaultFuzzer ? GetRefName(ORBytesFuzzDataProperty) : oBVFT.OrBytes.ValueGroupRef;
                oBVFBG.ByteValue = GetByteArray(ORBytesFuzzData.DataCollection);
                oByteGroups.Add(oBVFBG);
            }
            oBVF.ByteGroup = oByteGroups.ToArray();

            // Create the ValueRanges
            List<ValueRange> oValueRangeList = new List<ValueRange>(oBVF.ByteRange);
            AddValueRange(oValueRangeList, oBVFT.ReplaceBytes, ReplaceBytesRange, GetRefName(ReplaceBytesRangeProperty));
            AddValueRange(oValueRangeList, oBVFT.InsertBytes, InsertBytesRange, GetRefName(InsertBytesRangeProperty));
            AddValueRange(oValueRangeList, oBVFT.XOrBytes, XORBytesRange, GetRefName(XORBytesRangeProperty));
            AddValueRange(oValueRangeList, oBVFT.AndBytes, ANDBytesRange, GetRefName(ANDBytesRangeProperty));
            AddValueRange(oValueRangeList, oBVFT.OrBytes, ORBytesRange, GetRefName(ORBytesRangeProperty));
            oBVF.ByteRange = oValueRangeList.ToArray();
        }

        /// <summary>
        /// If default return a ByteValueFuzzersType, if not default return BinaryValueFuzzerCustomFuzzer and populate
        /// node name and namespace.  If not default and no name and namespace, return null.
        /// </summary>
        protected ByteValueFuzzersType CreateByteValueFuzzersType()
        {
            if (DefaultFuzzer)
                return new ByteValueFuzzersType();
            else
            {
                if (String.IsNullOrEmpty(CustomNodeName.Value) && String.IsNullOrEmpty(CustomNodeNamespace.Value))
                    return null;

                BinaryValueFuzzerCustomFuzzer oSLFCF = new BinaryValueFuzzerCustomFuzzer();
                oSLFCF.NodeName = CustomNodeName.Value;
                oSLFCF.NodeNamespace = CustomNodeNamespace.Value;
                return oSLFCF as ByteValueFuzzersType;
            }
        }
    }
}
