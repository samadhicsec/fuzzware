using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Fuzzware.Common.Encoding;
using Fuzzware.Schemer.AutoGenerated;

namespace Fuzzware.Fuzzsaw.FuzzingConfig
{
    class BinaryValueFuzzingConfig : BaseFuzzingConfig
    {
        public BinaryValueFuzzingConfig(SimpleTypeFuzzerConfig Config)
        {
            oConfig = Config;
            oAvailableFuzzers = new List<string>();
            oAvailableFuzzers.Add("ReplaceBytes");
            oAvailableFuzzers.Add("InsertBytes");
            oAvailableFuzzers.Add("AndBytes");
            oAvailableFuzzers.Add("OrBytes");
            oAvailableFuzzers.Add("XOrBytes");
            oAvailableFuzzers.Add("RandomBinary");
            oAvailableFuzzers.Add("RandomBitFlip");

            ValueRangesList = new List<ValueRange>();

            if (null != oConfig.BinaryValueFuzzer)
            {
                if (null != oConfig.BinaryValueFuzzer.DefaultFuzzers)
                {
                    bDefaultFuzzerToAdd = true;
                    DefaultFuzzersType = oConfig.BinaryValueFuzzer.DefaultFuzzers.GetType();
                    DefaultFuzzersObj = oConfig.BinaryValueFuzzer.DefaultFuzzers;
                }
                if (null != oConfig.BinaryValueFuzzer.CustomFuzzer)
                {
                    bCustomFuzzersToAdd = true;
                    CustomFuzzersTypes = new Type[oConfig.BinaryValueFuzzer.CustomFuzzer.Length];
                    CustomFuzzersObjs = new object[oConfig.BinaryValueFuzzer.CustomFuzzer.Length];
                    for (int i = 0; i < oConfig.BinaryValueFuzzer.CustomFuzzer.Length; i++)
                    {
                        CustomFuzzersTypes[i] = oConfig.BinaryValueFuzzer.CustomFuzzer[i].GetType();
                        CustomFuzzersObjs[i] = oConfig.BinaryValueFuzzer.CustomFuzzer[i];
                    }
                }

                if (null != oConfig.BinaryValueFuzzer.ByteRange)
                    ValueRangesList.AddRange(oConfig.BinaryValueFuzzer.ByteRange);
            }

            CreateNodesAndFuzzersList();
            CreateValueGroups();
        }

        protected override Type GetFuzzerType()
        {
            return typeof(ByteValueFuzzersType);
        }

        protected override void CreateValueGroups()
        {
            ValueGroupsList = new List<ValueGroup>();
            if ((null != oConfig.BinaryValueFuzzer) && (null != oConfig.BinaryValueFuzzer.ByteGroup))
            {
                for (int i = 0; i < oConfig.BinaryValueFuzzer.ByteGroup.Length; i++)
                {
                    BinaryValueFuzzerByteGroup grp = oConfig.BinaryValueFuzzer.ByteGroup[i];
                    ValueGroup oValueGroups = new ValueGroup(grp.ID);
                    // Copy values to a string array
                    for (int j = 0; j < grp.ByteValue.Length; j++)
                    {
                        // Convet array of bytes to string
                        String hexdump = BitConverter.ToString(grp.ByteValue[j]);
                        hexdump = hexdump.Replace("-", "");
                        oValueGroups.ValuesObj.Add(hexdump);
                    }
                    ValueGroupsList.Add(oValueGroups);
                }
            }
        }

        /// <summary>
        /// The make sure its an integer
        /// </summary>
        public override void AddValueToValueGroup(ValueGroup oValueGroup, string Value)
        {
            Byte[] output = ConvertStringToByteArray(Value);

            if(null != output)
                oValueGroup.ValuesObj.Add(Value);
        }

        private byte[] ConvertStringToByteArray(String Value)
        {
            Byte[] output = null;
            try
            {
                output = new Byte[(Value.Length + 1) / 2];

                int i = 0;
                int outindex = 0;
                // If the hex number is an odd number of digits, the first digit is a single hex character
                if (Value.Length % 2 == 1)
                {
                    output[outindex++] = Byte.Parse(Value.Substring(0, 1), System.Globalization.NumberStyles.HexNumber);
                    i++;
                }
                for (; i < Value.Length; i += 2)
                {
                    output[outindex++] = Byte.Parse(Value.Substring(i, 2), System.Globalization.NumberStyles.HexNumber);
                }
            }
            catch
            {
                System.Windows.MessageBox.Show("The string '" + Value + "' is not a valid hexadecimal number.", "Bad Type", System.Windows.MessageBoxButton.OK);
                return null;
            }
            return output;
        }

        public BinaryValueFuzzer Serialise()
        {
            BinaryValueFuzzer oBinaryValueFuzzer = new BinaryValueFuzzer();
            oBinaryValueFuzzer.CustomFuzzer = new BinaryValueFuzzerCustomFuzzer[NodeFuzzersList.Count];
            int iCustomIndex = 0;
            for (int i = 0; i < NodeFuzzersList.Count; i++)
            {
                if (NodeFuzzersList[i].ToString().Equals("Default", StringComparison.CurrentCultureIgnoreCase))
                {
                    oBinaryValueFuzzer.DefaultFuzzers = new ByteValueFuzzersType();
                    NodeFuzzersList[i].Serialise(oBinaryValueFuzzer.DefaultFuzzers.GetType(), oBinaryValueFuzzer.DefaultFuzzers);
                    // Remove the last custom fuzzer as we assigned one too many
                    BinaryValueFuzzerCustomFuzzer[] array = oBinaryValueFuzzer.CustomFuzzer;
                    Array.Resize<BinaryValueFuzzerCustomFuzzer>(ref array, array.Length - 1);
                    oBinaryValueFuzzer.CustomFuzzer = array;
                }
                else
                {
                    BinaryValueFuzzerCustomFuzzer oCustom = new BinaryValueFuzzerCustomFuzzer();
                    NodeFuzzersList[i].Serialise(oCustom.GetType(), oCustom);
                    oBinaryValueFuzzer.CustomFuzzer[iCustomIndex++] = oCustom;
                }
            }

            oBinaryValueFuzzer.ByteGroup = new BinaryValueFuzzerByteGroup[ValueGroupsList.Count];
            for (int i = 0; i < ValueGroupsList.Count; i++)
            {
                oBinaryValueFuzzer.ByteGroup[i] = new BinaryValueFuzzerByteGroup();
                oBinaryValueFuzzer.ByteGroup[i].ID = ValueGroupsList[i].ToString();
                oBinaryValueFuzzer.ByteGroup[i].ByteValue = new byte[ValueGroupsList[i].Values.Length][];
                for (int j = 0; j < ValueGroupsList[i].Values.Length; j++)
                {
                    oBinaryValueFuzzer.ByteGroup[i].ByteValue[j] = ConvertStringToByteArray(ValueGroupsList[i].Values[j]);
                }
            }

            oBinaryValueFuzzer.ByteRange = ValueRangesList.ToArray();

            return oBinaryValueFuzzer;
        }
    }
}
