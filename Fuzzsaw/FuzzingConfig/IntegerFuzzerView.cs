using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Text;
using System.Windows;
using Fuzzware.Fuzzsaw.Common;
using Fuzzware.Schemer.AutoGenerated;

namespace Fuzzware.Fuzzsaw.FuzzingConfig
{
    public class IntegerFuzzerView : BaseFuzzerView
    {
        #region Bindable Objects Setup
        
        // Integer value fuzzers data
        public static DependencyProperty ReplaceIntegersFuzzDataProperty;
        public static DependencyProperty RandomIntegersFuzzDataProperty;
        public static DependencyProperty AddIntegersFuzzDataProperty;
        public static DependencyProperty SubtractIntegersFuzzDataProperty;
        public static DependencyProperty MultiplyIntegersFuzzDataProperty;
        public static DependencyProperty DivideIntegersFuzzDataProperty;

        static IntegerFuzzerView()
        {
            ReplaceIntegersFuzzDataProperty = DependencyProperty.Register("ReplaceIntegersFuzzData", typeof(ObservableCollection<ObservableString>), typeof(IntegerFuzzerView),
                new FrameworkPropertyMetadata(new ObservableCollection<ObservableString>()));
            RandomIntegersFuzzDataProperty = DependencyProperty.Register("RandomIntegersFuzzData", typeof(ObservableString), typeof(IntegerFuzzerView));
            AddIntegersFuzzDataProperty = DependencyProperty.Register("AddIntegersFuzzData", typeof(ObservableCollection<ObservableString>), typeof(IntegerFuzzerView),
                new FrameworkPropertyMetadata(new ObservableCollection<ObservableString>()));
            SubtractIntegersFuzzDataProperty = DependencyProperty.Register("SubtractIntegersFuzzData", typeof(ObservableCollection<ObservableString>), typeof(IntegerFuzzerView),
                new FrameworkPropertyMetadata(new ObservableCollection<ObservableString>()));
            MultiplyIntegersFuzzDataProperty = DependencyProperty.Register("MultiplyIntegersFuzzData", typeof(ObservableCollection<ObservableString>), typeof(IntegerFuzzerView),
                new FrameworkPropertyMetadata(new ObservableCollection<ObservableString>()));
            DivideIntegersFuzzDataProperty = DependencyProperty.Register("DivideIntegersFuzzData", typeof(ObservableCollection<ObservableString>), typeof(IntegerFuzzerView),
                new FrameworkPropertyMetadata(new ObservableCollection<ObservableString>()));

        }

        public ObservableCollection<ObservableString> ReplaceIntegersFuzzData
        {
            get { return (ObservableCollection<ObservableString>)GetValue(ReplaceIntegersFuzzDataProperty); }
            set { SetValue(ReplaceIntegersFuzzDataProperty, value); }
        }

        public ObservableString RandomIntegersFuzzData
        {
            get { return (ObservableString)GetValue(RandomIntegersFuzzDataProperty); }
            set { SetValue(RandomIntegersFuzzDataProperty, value); }
        }

        public ObservableCollection<ObservableString> AddIntegersFuzzData
        {
            get { return (ObservableCollection<ObservableString>)GetValue(AddIntegersFuzzDataProperty); }
            set { SetValue(AddIntegersFuzzDataProperty, value); }
        }

        public ObservableCollection<ObservableString> SubtractIntegersFuzzData
        {
            get { return (ObservableCollection<ObservableString>)GetValue(SubtractIntegersFuzzDataProperty); }
            set { SetValue(SubtractIntegersFuzzDataProperty, value); }
        }

        public ObservableCollection<ObservableString> MultiplyIntegersFuzzData
        {
            get { return (ObservableCollection<ObservableString>)GetValue(MultiplyIntegersFuzzDataProperty); }
            set { SetValue(MultiplyIntegersFuzzDataProperty, value); }
        }

        public ObservableCollection<ObservableString> DivideIntegersFuzzData
        {
            get { return (ObservableCollection<ObservableString>)GetValue(DivideIntegersFuzzDataProperty); }
            set { SetValue(DivideIntegersFuzzDataProperty, value); }
        }


        #endregion

        protected void PopulateFuzzData(SimpleTypeFuzzerConfig oSTFC, IntegerValueFuzzersType oIVFT)
        {
            // Always call populate so we add the final value to the collections that allows us to add new values
            PopulateValueFuzzData((null != oIVFT) ? oIVFT.ReplaceInteger : null, oSTFC.IntegerValueFuzzer, ReplaceIntegersFuzzData, GetRefName(ReplaceIntegersFuzzDataProperty));
            if ((null != oIVFT) && (null != oIVFT.RandomInteger))
                RandomIntegersFuzzData = new ObservableString(oIVFT.RandomInteger.Iterations.ToString());
            PopulateValueFuzzData((null != oIVFT) ? oIVFT.AddInteger : null, oSTFC.IntegerValueFuzzer, AddIntegersFuzzData, GetRefName(AddIntegersFuzzDataProperty));
            PopulateValueFuzzData((null != oIVFT) ? oIVFT.SubtractInteger : null, oSTFC.IntegerValueFuzzer, SubtractIntegersFuzzData, GetRefName(SubtractIntegersFuzzDataProperty));
            PopulateValueFuzzData((null != oIVFT) ? oIVFT.MultiplyInteger : null, oSTFC.IntegerValueFuzzer, MultiplyIntegersFuzzData, GetRefName(MultiplyIntegersFuzzDataProperty));
            PopulateValueFuzzData((null != oIVFT) ? oIVFT.DivideInteger : null, oSTFC.IntegerValueFuzzer, DivideIntegersFuzzData, GetRefName(DivideIntegersFuzzDataProperty));
        }

        /// <summary>
        /// The constructor for the default string fuzzer
        /// </summary>
        public IntegerFuzzerView(SimpleTypeFuzzerConfig oSTFC, IntegerValueFuzzersType oIVFT)
        {
            InitProperties();

            m_bIsDefault = true;
            IsConfigEnabled = true;

            // For the default fuzzer, if there are no fuzzers configured, then disable config
            if ((null != oIVFT) &&
                (null == oIVFT.ReplaceInteger) &&
                (null == oIVFT.RandomInteger) &&
                (null == oIVFT.AddInteger) &&
                (null == oIVFT.SubtractInteger) &&
                (null == oIVFT.MultiplyInteger) &&
                (null == oIVFT.DivideInteger))
                IsConfigEnabled = false;

            PopulateFuzzData(oSTFC, oIVFT);
        }

        /// <summary>
        /// The constructor for the custom string fuzzer
        /// </summary>
        public IntegerFuzzerView(SimpleTypeFuzzerConfig oSTFC, IntegerValueFuzzerCustomFuzzer oIVFCF)
        {
            InitProperties();
            IsConfigEnabled = true;

            PopulateFuzzData(oSTFC, oIVFCF as IntegerValueFuzzersType);

            if (null != oIVFCF)
            {
                CustomNodeNamespace = new ObservableString(oIVFCF.NodeNamespace);
                CustomNodeName = new ObservableString(oIVFCF.NodeName);
            }
        }

        /// <summary>
        /// I shouldn't need to do this, but when I don't I get weird behaviour, the properties contain the values
        /// of the last object of this type I populated.
        /// </summary>
        private void InitProperties()
        {
            ReplaceIntegersFuzzData = new ObservableCollection<ObservableString>();
            RandomIntegersFuzzData = new ObservableString("");
            AddIntegersFuzzData = new ObservableCollection<ObservableString>();
            SubtractIntegersFuzzData = new ObservableCollection<ObservableString>();
            MultiplyIntegersFuzzData = new ObservableCollection<ObservableString>();
            DivideIntegersFuzzData = new ObservableCollection<ObservableString>();
        }

        private void PopulateValueFuzzData(ValueFuzzerType oFuzzerType, IntegerValueFuzzer oIVF, ObservableCollection<ObservableString> BindableData, String DefaultGroupRef)
        {
            String ValueGroupRef = null;
            if ((null != oFuzzerType) && (null != oIVF))
            {
                ValueGroupRef = oFuzzerType.ValueGroupRef;
            }
            else if(m_bIsDefault && !IsConfigEnabled && (null != oIVF))
            {
                ValueGroupRef = DefaultGroupRef;
            }
            if (!String.IsNullOrEmpty(ValueGroupRef))
            {
                IntegerValueFuzzerIntegerGroup oIVFIG = FindStringValueGroup(ValueGroupRef, oIVF.IntegerGroup);
                if (null != oIVFIG)
                    CopyFuzzData(oIVFIG.IntegerValue, BindableData);
            }
            // Always make sure the last item is the option to add a new value
            BindableData.Add(new ObservableString(ADD_A_VALUE));
        }

        /// <summary>
        /// Find the string value fuzz data
        /// </summary>
        private IntegerValueFuzzerIntegerGroup FindStringValueGroup(String Name, IntegerValueFuzzerIntegerGroup[] oIVFIG)
        {
            if (null != oIVFIG)
            {
                for (int i = 0; i < oIVFIG.Length; i++)
                {
                    if (oIVFIG[i].ID.Equals(Name))
                        return oIVFIG[i];
                }
            }
            return null;
        }

        /// <summary>
        /// The save the current Integer types view to its original data source
        /// </summary>
        public void SaveIntegerTypeConfig(SimpleTypeFuzzerConfig oSTFC)
        {
            if (null == oSTFC.IntegerValueFuzzer)
                oSTFC.IntegerValueFuzzer = new IntegerValueFuzzer();

            // Save the default string fuzzers
            IntegerValueFuzzer oIVF = oSTFC.IntegerValueFuzzer;
            // Create the string length fuzzers
            IntegerValueFuzzersType oIVFT = CreateIntegerValueFuzzersType();
            oIVFT.ReplaceInteger = CreateValueFuzzerType(ReplaceIntegersFuzzData, GetRefName(ReplaceIntegersFuzzDataProperty), null, null);
            oIVFT.RandomInteger = CreateRandomFuzzerType(RandomIntegersFuzzData);
            oIVFT.AddInteger = CreateValueFuzzerType(AddIntegersFuzzData, GetRefName(AddIntegersFuzzDataProperty), null, null);
            oIVFT.SubtractInteger = CreateValueFuzzerType(SubtractIntegersFuzzData, GetRefName(SubtractIntegersFuzzDataProperty), null, null);
            oIVFT.MultiplyInteger = CreateValueFuzzerType(MultiplyIntegersFuzzData, GetRefName(MultiplyIntegersFuzzDataProperty), null, null);
            oIVFT.DivideInteger = CreateValueFuzzerType(DivideIntegersFuzzData, GetRefName(DivideIntegersFuzzDataProperty), null, null);
            // Add the fuzzers as either the default or a custom
            if (m_bIsDefault)
                oIVF.DefaultFuzzers = oIVFT;
            else
            {
                List<IntegerValueFuzzerCustomFuzzer> oIVFCFList = new List<IntegerValueFuzzerCustomFuzzer>(oIVF.CustomFuzzer);
                oIVFCFList.Add(oIVFT as IntegerValueFuzzerCustomFuzzer);
                oIVF.CustomFuzzer = oIVFCFList.ToArray();
            }
            // Create the string value fuzzer value groups
            List<IntegerValueFuzzerIntegerGroup> oIntegerGroups = new List<IntegerValueFuzzerIntegerGroup>(oIVF.IntegerGroup);
            IntegerValueFuzzerIntegerGroup oIVFIG = new IntegerValueFuzzerIntegerGroup();
            // Add the ValueGroups, always add the default ones, even if no fuzzers were being used
            if ((null != oIVFT.ReplaceInteger) || m_bIsDefault)
            {
                oIVFIG.ID = m_bIsDefault ? GetRefName(ReplaceIntegersFuzzDataProperty) : oIVFT.ReplaceInteger.ValueGroupRef;
                oIVFIG.IntegerValue = GetStringArray(ReplaceIntegersFuzzData);
                oIntegerGroups.Add(oIVFIG);
            }
            if ((null != oIVFT.AddInteger) || m_bIsDefault)
            {
                oIVFIG = new IntegerValueFuzzerIntegerGroup();
                oIVFIG.ID = m_bIsDefault ? GetRefName(AddIntegersFuzzDataProperty) : oIVFT.AddInteger.ValueGroupRef;
                oIVFIG.IntegerValue = GetStringArray(AddIntegersFuzzData);
                oIntegerGroups.Add(oIVFIG);
            }
            if ((null != oIVFT.SubtractInteger) || m_bIsDefault)
            {
                oIVFIG = new IntegerValueFuzzerIntegerGroup();
                oIVFIG.ID = m_bIsDefault ? GetRefName(SubtractIntegersFuzzDataProperty) : oIVFT.SubtractInteger.ValueGroupRef;
                oIVFIG.IntegerValue = GetStringArray(SubtractIntegersFuzzData);
                oIntegerGroups.Add(oIVFIG);
            }
            if ((null != oIVFT.MultiplyInteger) || m_bIsDefault)
            {
                oIVFIG = new IntegerValueFuzzerIntegerGroup();
                oIVFIG.ID = m_bIsDefault ? GetRefName(MultiplyIntegersFuzzDataProperty) : oIVFT.MultiplyInteger.ValueGroupRef;
                oIVFIG.IntegerValue = GetStringArray(MultiplyIntegersFuzzData);
                oIntegerGroups.Add(oIVFIG);
            }
            if ((null != oIVFT.DivideInteger) || m_bIsDefault)
            {
                oIVFIG = new IntegerValueFuzzerIntegerGroup();
                oIVFIG.ID = m_bIsDefault ? GetRefName(DivideIntegersFuzzDataProperty) : oIVFT.DivideInteger.ValueGroupRef;
                oIVFIG.IntegerValue = GetStringArray(DivideIntegersFuzzData);
                oIntegerGroups.Add(oIVFIG);
            }
            oIVF.IntegerGroup = oIntegerGroups.ToArray();
        }

        /// <summary>
        /// If default return a IntegerValueFuzzersType, if not default return IntegerValueFuzzerCustomFuzzer and populate
        /// node name and namespace.  If not default and no name and namespace, return null.
        /// </summary>
        protected IntegerValueFuzzersType CreateIntegerValueFuzzersType()
        {
            if (m_bIsDefault)
                return new IntegerValueFuzzersType();
            else
            {
                if (String.IsNullOrEmpty(CustomNodeName.Value) && String.IsNullOrEmpty(CustomNodeNamespace.Value))
                    return null;

                IntegerValueFuzzerCustomFuzzer oSLFCF = new IntegerValueFuzzerCustomFuzzer();
                oSLFCF.NodeName = CustomNodeName.Value;
                oSLFCF.NodeNamespace = CustomNodeNamespace.Value;
                return oSLFCF as IntegerValueFuzzersType;
            }
        }
    }
}
