using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Fuzzware.Schemer.AutoGenerated;

namespace Fuzzware.Fuzzsaw.FuzzingConfig
{
    class IntegerValueFuzzingConfig : BaseFuzzingConfig
    {
        public IntegerValueFuzzingConfig(SimpleTypeFuzzerConfig Config)
        {
            oConfig = Config;
            oAvailableFuzzers = new List<string>();
            oAvailableFuzzers.Add("ReplaceInteger");
            oAvailableFuzzers.Add("RandomInteger");
            oAvailableFuzzers.Add("AddInteger");
            oAvailableFuzzers.Add("SubtractInteger");
            oAvailableFuzzers.Add("MultiplyInteger");
            oAvailableFuzzers.Add("DivideInteger");

            if (null != oConfig.IntegerValueFuzzer)
            {
                if (null != oConfig.IntegerValueFuzzer.DefaultFuzzers)
                {
                    bDefaultFuzzerToAdd = true;
                    DefaultFuzzersType = oConfig.IntegerValueFuzzer.DefaultFuzzers.GetType();
                    DefaultFuzzersObj = oConfig.IntegerValueFuzzer.DefaultFuzzers;
                }
                if (null != oConfig.IntegerValueFuzzer.CustomFuzzer)
                {
                    bCustomFuzzersToAdd = true;
                    CustomFuzzersTypes = new Type[oConfig.IntegerValueFuzzer.CustomFuzzer.Length];
                    CustomFuzzersObjs = new object[oConfig.IntegerValueFuzzer.CustomFuzzer.Length];
                    for (int i = 0; i < oConfig.IntegerValueFuzzer.CustomFuzzer.Length; i++)
                    {
                        CustomFuzzersTypes[i] = oConfig.IntegerValueFuzzer.CustomFuzzer[i].GetType();
                        CustomFuzzersObjs[i] = oConfig.IntegerValueFuzzer.CustomFuzzer[i];
                    }
                }
            }

            CreateNodesAndFuzzersList();
            CreateValueGroups();

            ValueRangesList = new List<ValueRange>();
        }

        protected override Type GetFuzzerType()
        {
            return typeof(IntegerValueFuzzersType);
        }

        protected override void CreateValueGroups()
        {
            ValueGroupsList = new List<ValueGroup>();
            if ((null != oConfig.IntegerValueFuzzer) && (null != oConfig.IntegerValueFuzzer.IntegerGroup))
            {
                for (int i = 0; i < oConfig.IntegerValueFuzzer.IntegerGroup.Length; i++)
                {
                    IntegerValueFuzzerIntegerGroup grp = oConfig.IntegerValueFuzzer.IntegerGroup[i];
                    ValueGroup oValueGroups = new ValueGroup(grp.ID);
                    // Copy values to a string array
                    oValueGroups.ValuesObj.AddRange(grp.IntegerValue);
                    ValueGroupsList.Add(oValueGroups);
                }
            }
        }

        /// <summary>
        /// The make sure its an integer
        /// </summary>
        public override void AddValueToValueGroup(ValueGroup oValueGroup, string Value)
        {
            Int64 Val;
            // If it starts with 0x ...
            if (Value.StartsWith("0x", StringComparison.CurrentCultureIgnoreCase))
            {
                if (Int64.TryParse(Value.Substring(2, Value.Length - 2), System.Globalization.NumberStyles.HexNumber, null, out Val))
                {
                    oValueGroup.ValuesObj.Add(Value);
                }
                else
                {
                    System.Windows.MessageBox.Show("Could not add hex value '" + Value + "'.  Could not convert to an integer.", "Bad Type", System.Windows.MessageBoxButton.OK);
                }
            }
            else
            {
                if(Int64.TryParse(Value, out Val))
                    oValueGroup.ValuesObj.Add(Value);
                else
                    System.Windows.MessageBox.Show("Could not add value '" + Value + "'.  Could not convert to an integer.", "Bad Type", System.Windows.MessageBoxButton.OK);
            }
        }

        public override bool EnableValueRange
        {
            get
            {
                return false;
            }
        }

        public IntegerValueFuzzer Serialise()
        {
            IntegerValueFuzzer oIntegerValueFuzzer = new IntegerValueFuzzer();
            oIntegerValueFuzzer.CustomFuzzer = new IntegerValueFuzzerCustomFuzzer[NodeFuzzersList.Count];
            int iCustomIndex = 0;
            for (int i = 0; i < NodeFuzzersList.Count; i++)
            {
                if (NodeFuzzersList[i].ToString().Equals("Default", StringComparison.CurrentCultureIgnoreCase))
                {
                    oIntegerValueFuzzer.DefaultFuzzers = new IntegerValueFuzzersType();
                    NodeFuzzersList[i].Serialise(oIntegerValueFuzzer.DefaultFuzzers.GetType(), oIntegerValueFuzzer.DefaultFuzzers);
                    // Remove the last custom fuzzer as we assigned one too many
                    IntegerValueFuzzerCustomFuzzer[] array = oIntegerValueFuzzer.CustomFuzzer;
                    Array.Resize<IntegerValueFuzzerCustomFuzzer>(ref array, array.Length - 1);
                    oIntegerValueFuzzer.CustomFuzzer = array;
                }
                else
                {
                    IntegerValueFuzzerCustomFuzzer oCustom = new IntegerValueFuzzerCustomFuzzer();
                    NodeFuzzersList[i].Serialise(oCustom.GetType(), oCustom);
                    oIntegerValueFuzzer.CustomFuzzer[iCustomIndex++] = oCustom;
                }
            }

            oIntegerValueFuzzer.IntegerGroup = new IntegerValueFuzzerIntegerGroup[ValueGroupsList.Count];
            for (int i = 0; i < ValueGroupsList.Count; i++)
            {
                oIntegerValueFuzzer.IntegerGroup[i] = new IntegerValueFuzzerIntegerGroup();
                oIntegerValueFuzzer.IntegerGroup[i].ID = ValueGroupsList[i].ToString();
                oIntegerValueFuzzer.IntegerGroup[i].IntegerValue = ValueGroupsList[i].Values;
            }

            return oIntegerValueFuzzer;
        }
    }
}
