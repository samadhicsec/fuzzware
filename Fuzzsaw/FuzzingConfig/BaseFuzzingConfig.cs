using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Reflection;
using System.ComponentModel;
using System.Windows.Data;
using System.Windows.Controls;
using Fuzzware.Schemer.AutoGenerated;

namespace Fuzzware.Schemer.AutoGenerated
{
    public partial class ValueRange
    {
        public override string ToString()
        {
            return ID;
        }
    }

    public partial class ValueFuzzerType
    {
        String sName;

        [System.Xml.Serialization.XmlIgnore]
        public String Name
        {
            get { return sName; }
            set
            {
                sName = value;
            }
        }

        public override string ToString()
        {
            return sName;
        }
    }

    public partial class RandomFuzzerType
    {
        String sName;

        [System.Xml.Serialization.XmlIgnore]
        public String Name
        {
            get { return sName; }
            set
            {
                sName = value;
            }
        }

        public override string ToString()
        {
            return sName;
        }
    }
}

namespace Fuzzware.Fuzzsaw.FuzzingConfig
{
    public class NodeTextBoxInfo_NodeFuzzer : IMultiValueConverter
    {
        #region IMultiValueConverter Members

        public object Convert(object[] values, Type targetType, object parameter, System.Globalization.CultureInfo culture)
        {
            if (values.Length == 2)
            {
                String Namespace = values[0] as string;
                String Name = values[1] as string;
                return new NodeFuzzers(Namespace, Name);
            }
            return null;
        }

        public object[] ConvertBack(object value, Type[] targetTypes, object parameter, System.Globalization.CultureInfo culture)
        {
            return null;
        }

        #endregion
        //public NodeFuzzers CreateNodeFuzzers(TextBox tbNamespace, TextBox tbName)
        //{
        //    return null;
        //}
    }

    public class NodeFuzzers : INotifyPropertyChanged
    {
        String sNamespace;
        String sName;
        List<object> oFuzzerList;
        List<object> oAvailableFuzzerList;

        public NodeFuzzers(String Namespace, String Name)
        {
            this.sNamespace = Namespace;
            this.sName = Name;
            oFuzzerList = new List<object>();
            oAvailableFuzzerList = new List<object>();
        }

        public List<object> FuzzerListObj
        {
            get
            {
                return oFuzzerList;
            }
        }

        public List<object> AvailableFuzzerListObj
        {
            get { return oAvailableFuzzerList; }
        }

        /// <summary>
        /// Assigns this node a fuzzer, depending on the type of fuzzer, it will use ValueGroup&ValueRange or Iterations,
        /// if an error occurs an error string describing the problem is returned.
        /// </summary>
        public string AssignFuzzer(object oFuzzer, ValueGroup oValueGroup, ValueRange oRangeGroup, string Iterations)
        {
            string Error = null;

            if (oFuzzer is ValueFuzzerType)
            {
                if (null == oValueGroup)
                    Error = "A Value Group must be specified";
                else
                {
                    (oFuzzer as ValueFuzzerType).ValueGroupRef = oValueGroup.ToString();
                    if(null != oRangeGroup)
                        (oFuzzer as ValueFuzzerType).ValueRangeRef = oRangeGroup.ID;
                }
            }
            else if (oFuzzer is RandomFuzzerType)
            {
                uint uiIterations = 0;
                if (UInt32.TryParse(Iterations, out uiIterations))
                {
                    (oFuzzer as RandomFuzzerType).Iterations = uiIterations;
                }
                else
                    Error = "Could not convert Iterations value to an unsigned int";
            }
            if(String.IsNullOrEmpty(Error))
            {
                // Move the available to fuzzer to the list of current fuzzers
                oFuzzerList.Add(oFuzzer);
                oAvailableFuzzerList.Remove(oFuzzer);
            }
    
            Update();
            return Error;
        }

        public void Unassign(object oFuzzer)
        {
            oFuzzerList.Remove(oFuzzer);
            oAvailableFuzzerList.Add(oFuzzer);
            Update();
        }

        public Object[] FuzzerList
        {
            get
            {
                return oFuzzerList.ToArray();
            }
        }

        public object[] AvailableFuzzers
        {
            get
            {
                return oAvailableFuzzerList.ToArray();
            }
        }

        public override string  ToString()
        {
            if (String.IsNullOrEmpty(sNamespace))
                return sName;
            else
                return sNamespace + ":" + sName;
        }

        public void Update()
        {
            OnPropertyChanged("FuzzerList");
            OnPropertyChanged("AvailableFuzzers");
        }

        #region INotifyPropertyChanged Members

        public event PropertyChangedEventHandler PropertyChanged;
        // Create the OnPropertyChanged method to raise the event
        protected void OnPropertyChanged(string name)
        {
            PropertyChangedEventHandler handler = PropertyChanged;
            if (handler != null)
            {
                handler(this, new PropertyChangedEventArgs(name));
            }
        }
        #endregion

        public void Serialise(Type FuzzerType, object FuzzerObj)
        {
            PropertyInfo oPropertyInfo = FuzzerType.GetProperty("NodeNamespace");
            if(null != oPropertyInfo)
                oPropertyInfo.SetValue(FuzzerObj, sNamespace, null);
            oPropertyInfo = FuzzerType.GetProperty("NodeName");
            if (null != oPropertyInfo)
                oPropertyInfo.SetValue(FuzzerObj, sName, null);
            
            for (int i = 0; i < oFuzzerList.Count; i++)
            {
                // Get the Name of the fuzzer, this will be the Name of the property
                String FuzzerPropertyName = oFuzzerList[i].GetType().GetProperty("Name").GetValue(oFuzzerList[i], null) as string;
                // Set the property through reflection
                oPropertyInfo = FuzzerType.GetProperty(FuzzerPropertyName);
                oPropertyInfo.SetValue(FuzzerObj, oFuzzerList[i], null);
            }
        }
    }

    public class ValueGroup : INotifyPropertyChanged
    {
        String IdRef;
        List<string> oValues;

        public ValueGroup(String ID)
        {
            IdRef = ID;
            oValues = new List<string>();
        }

        public string[] Values
        {
            get
            {
                return oValues.ToArray();
            }
        }

        public List<string> ValuesObj
        {
            get { return oValues; }
        }

        public override string ToString()
        {
            return IdRef;
        }

        public void Update()
        {
            OnPropertyChanged("Values");
        }

        #region INotifyPropertyChanged Members

        public event PropertyChangedEventHandler PropertyChanged;
        // Create the OnPropertyChanged method to raise the event
        protected void OnPropertyChanged(string name)
        {
            PropertyChangedEventHandler handler = PropertyChanged;
            if (handler != null)
            {
                handler(this, new PropertyChangedEventArgs(name));
            }
        }
        #endregion
    }

    abstract public class BaseFuzzingConfig : INotifyPropertyChanged
    {
        protected SimpleTypeFuzzerConfig oConfig;
        protected List<NodeFuzzers> NodeFuzzersList;
        protected List<ValueGroup> ValueGroupsList;
        protected List<ValueRange> ValueRangesList;
        protected List<string> oAvailableFuzzers;

        // All these variables need to be set in the constructor of the implementing class
        protected bool bDefaultFuzzerToAdd;
        protected bool bCustomFuzzersToAdd;
        protected Type DefaultFuzzersType;
        protected object DefaultFuzzersObj;
        protected Type[] CustomFuzzersTypes;
        protected object[] CustomFuzzersObjs;
        
        protected abstract void CreateValueGroups();
        protected abstract Type GetFuzzerType();

        public virtual object[] AllAvailableFuzzers()
        {
            return oAvailableFuzzers.ToArray();
        }

        /// <summary>
        /// The default case is a string, which we can always add.
        /// </summary>
        public virtual void AddValueToValueGroup(ValueGroup oValueGroup, string Value)
        {
            oValueGroup.ValuesObj.Add(Value);
        }

        /// <summary>
        /// Add a node (custom or default) to be fuzzed.
        /// </summary>
        public virtual string AddNode(String Namespace, String Name)
        {
            NodeFuzzers oNodeFuzzers = null;
            
            if ((String.IsNullOrEmpty(Namespace) && Name.Equals("Default", StringComparison.CurrentCultureIgnoreCase)))
                oNodeFuzzers = new NodeFuzzers("", "Default");
            else
                oNodeFuzzers = new NodeFuzzers(Namespace, Name);

            // Check for duplicate
            for (int i = 0; i < NodeFuzzersList.Count; i++)
                if (NodeFuzzersList[i].ToString().Equals(oNodeFuzzers.ToString(), StringComparison.CurrentCultureIgnoreCase))
                    return "Cannot add this node as a node with this namespace and name already exists";

            // Add all available fuzzers
            for (int i = 0; i < oAvailableFuzzers.Count; i++)
            {
                AddAvailableFuzzerToNodeFuzzer(oAvailableFuzzers[i], GetFuzzerType(), oNodeFuzzers);
            }
            NodeFuzzersList.Add(oNodeFuzzers);
            OnPropertyChanged("NodesWithFuzzers");
            return "";
        }

        private void AddAvailableFuzzerToNodeFuzzer(String FuzzerName, Type oNodeFuzzerConfigType, NodeFuzzers oNodeFuzzers)
        {
            PropertyInfo pi = oNodeFuzzerConfigType.GetProperty(FuzzerName);
            Type FuzzerType = pi.PropertyType;
            ConstructorInfo ci = FuzzerType.GetConstructor(System.Type.EmptyTypes);
            object obj = ci.Invoke(null);
            FuzzerType.GetProperty("Name").SetValue(obj, FuzzerName, null);
            oNodeFuzzers.AvailableFuzzerListObj.Add(obj);
        }

        //public void AddNode(NodeFuzzers oNodeFuzzers)
        //{
        //    NodeFuzzersList.Add(oNodeFuzzers);
        //    OnPropertyChanged("NodesWithFuzzers");
        //}

        public void DeleteNode(NodeFuzzers oNodeFuzzers)
        {
            NodeFuzzersList.Remove(oNodeFuzzers);
            OnPropertyChanged("NodesWithFuzzers");
        }

        public void AddValueGroup(ValueGroup oValueGroups)
        {
            ValueGroupsList.Add(oValueGroups);
            OnPropertyChanged("ValueGroups");
        }

        public void DeleteValueGroup(ValueGroup oValueGroups)
        {
            ValueGroupsList.Remove(oValueGroups);
            OnPropertyChanged("ValueGroups");
        }

        public void AddValueRange(ValueRange oValueRange)
        {
            ValueRangesList.Add(oValueRange);
            OnPropertyChanged("ValueRanges");
        }

        public void DeleteValueRange(ValueRange oValueRange)
        {
            ValueRangesList.Remove(oValueRange);
            OnPropertyChanged("ValueRanges");
        }

        public NodeFuzzers[] NodesWithFuzzers
        {
            get
            {
                return NodeFuzzersList.ToArray();
            }
        }

        public ValueGroup[] ValueGroups
        {
            get
            {
                return ValueGroupsList.ToArray();
            }
        }

        public ValueRange[] ValueRanges
        {
            get
            {
                return ValueRangesList.ToArray();
            }
        }

        public virtual bool EnableValueRange
        {
            get
            {
                return true;
            }
        }

        protected virtual void CreateNodesAndFuzzersList()
        {
            NodeFuzzersList = new List<NodeFuzzers>();
            if (bDefaultFuzzerToAdd)
            {
                NodeFuzzers oNodeFuzzers = new NodeFuzzers("", "Default");
                for (int i = 0; i < oAvailableFuzzers.Count; i++)
                {
                    Object oFuzzerType = DefaultFuzzersType.GetProperty(oAvailableFuzzers[i]).GetValue(DefaultFuzzersObj, null);
                    if (null != oFuzzerType)
                    {
                        if (oFuzzerType is ValueFuzzerType)
                        {
                            (oFuzzerType as ValueFuzzerType).Name = oAvailableFuzzers[i];
                        }
                        else if (oFuzzerType is RandomFuzzerType)
                        {
                            (oFuzzerType as RandomFuzzerType).Name = oAvailableFuzzers[i];
                        }
                        oNodeFuzzers.FuzzerListObj.Add(oFuzzerType);
                    }
                    else
                    {
                        PropertyInfo pi = DefaultFuzzersType.GetProperty(oAvailableFuzzers[i]);
                        Type FuzzerType = pi.PropertyType;
                        ConstructorInfo ci = FuzzerType.GetConstructor(System.Type.EmptyTypes);
                        object obj = ci.Invoke(null);
                        FuzzerType.GetProperty("Name").SetValue(obj, oAvailableFuzzers[i], null);
                        oNodeFuzzers.AvailableFuzzerListObj.Add(obj);
                    }
                }
                NodeFuzzersList.Add(oNodeFuzzers);
            }
            if (bCustomFuzzersToAdd)
            {
                for (int j = 0; j < CustomFuzzersTypes.Length; j++)
                {
                    String Namespace = CustomFuzzersTypes[j].GetProperty("NodeNamespace").GetValue(CustomFuzzersObjs[j], null) as string;
                    String Name = CustomFuzzersTypes[j].GetProperty("NodeName").GetValue(CustomFuzzersObjs[j], null) as string;
                    NodeFuzzers oNodeFuzzers = new NodeFuzzers(Namespace, Name);
                    for (int i = 0; i < oAvailableFuzzers.Count; i++)
                    {
                        Object oFuzzerType = CustomFuzzersTypes[j].GetProperty(oAvailableFuzzers[i]).GetValue(CustomFuzzersObjs[j], null);
                        if (null != oFuzzerType)
                        {
                            if (oFuzzerType is ValueFuzzerType)
                            {
                                (oFuzzerType as ValueFuzzerType).Name = oAvailableFuzzers[i];
                            }
                            else if (oFuzzerType is RandomFuzzerType)
                            {
                                (oFuzzerType as RandomFuzzerType).Name = oAvailableFuzzers[i];
                            }
                            oNodeFuzzers.FuzzerListObj.Add(oFuzzerType);
                        }
                        else
                        {
                            PropertyInfo pi = CustomFuzzersTypes[j].GetProperty(oAvailableFuzzers[i]);
                            Type FuzzerType = pi.PropertyType;
                            ConstructorInfo ci = FuzzerType.GetConstructor(System.Type.EmptyTypes);
                            object obj = ci.Invoke(null);
                            FuzzerType.GetProperty("Name").SetValue(obj, oAvailableFuzzers[i], null);
                            oNodeFuzzers.AvailableFuzzerListObj.Add(obj);
                        }
                    }
                    NodeFuzzersList.Add(oNodeFuzzers);
                }
            }
        }

        #region INotifyPropertyChanged Members

        public event PropertyChangedEventHandler PropertyChanged;

        #endregion

        // Create the OnPropertyChanged method to raise the event
        protected void OnPropertyChanged(string name)
        {
            PropertyChangedEventHandler handler = PropertyChanged;
            if (handler != null)
            {
                handler(this, new PropertyChangedEventArgs(name));
            }
        }

    }
}
