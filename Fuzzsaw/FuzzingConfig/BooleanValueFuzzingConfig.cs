using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Fuzzware.Schemer.AutoGenerated;

namespace Fuzzware.Fuzzsaw.FuzzingConfig
{
    class BooleanValueFuzzingConfig : BaseFuzzingConfig
    {
        public BooleanValueFuzzingConfig(SimpleTypeFuzzerConfig Config)
        {
            oConfig = Config;
            oAvailableFuzzers = new List<string>();
            oAvailableFuzzers.Add("ReplaceBoolean");

            NodeFuzzersList = new List<NodeFuzzers>();
            NodeFuzzers oNodeFuzzers = new NodeFuzzers("", "Default");
            ValueFuzzerType oFuzzerType = new ValueFuzzerType();
            oFuzzerType.Name = "Default";
            oFuzzerType.ValueGroupRef = "Default";
            oNodeFuzzers.FuzzerListObj.Add(oFuzzerType);
            NodeFuzzersList.Add(oNodeFuzzers);

            CreateValueGroups();

            ValueRangesList = new List<ValueRange>();
        }

        protected override Type GetFuzzerType()
        {
            throw new NotImplementedException();
        }

        protected override void CreateValueGroups()
        {
            ValueGroupsList = new List<ValueGroup>();
            ValueGroup oValueGroups = new ValueGroup("Default");
            // Copy values to a string array
            if(null != oConfig.BooleanValueFuzzer)
                oValueGroups.ValuesObj.AddRange(oConfig.BooleanValueFuzzer);
            ValueGroupsList.Add(oValueGroups);
        }

        public override bool EnableValueRange
        {
            get
            {
                return false;
            }
        }

        public string[] Serialise()
        {
            if (ValueGroupsList.Count == 1)
            {
                return ValueGroupsList[0].Values;
            }    
                
            return null;
        }
    }
}
