using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Text;
using System.Windows;
using Fuzzware.Fuzzsaw.Common;
using Fuzzware.Schemer.AutoGenerated;

namespace Fuzzware.Fuzzsaw.FuzzingConfig
{
    public class STFCView : DependencyObject
    {
        SimpleTypeFuzzerConfig oSTFC;
        const String DEFAULT_LENGTHSTRING = "a";

        #region Dependency Properties definition
        public static DependencyProperty DefaultStringFuzzerProperty;
        public static DependencyProperty CustomStringFuzzersProperty;

        public static DependencyProperty DefaultIntegerFuzzerProperty;
        public static DependencyProperty CustomIntegerFuzzersProperty;

        public static DependencyProperty DefaultDecimalFuzzerProperty;
        public static DependencyProperty CustomDecimalFuzzersProperty;

        public static DependencyProperty DefaultByteFuzzerProperty;
        public static DependencyProperty CustomByteFuzzersProperty;

        static STFCView()
        {
            DefaultStringFuzzerProperty = DependencyProperty.Register("DefaultStringFuzzer", typeof(StringFuzzerView), typeof(STFCView));

            CustomStringFuzzersProperty = DependencyProperty.Register("CustomStringFuzzers", typeof(ObservableCollection<StringFuzzerView>), typeof(STFCView),
                new FrameworkPropertyMetadata(new ObservableCollection<StringFuzzerView>()));

            DefaultIntegerFuzzerProperty = DependencyProperty.Register("DefaultIntegerFuzzer", typeof(IntegerFuzzerView), typeof(STFCView));

            CustomIntegerFuzzersProperty = DependencyProperty.Register("CustomIntegerFuzzers", typeof(ObservableCollection<IntegerFuzzerView>), typeof(STFCView),
                new FrameworkPropertyMetadata(new ObservableCollection<IntegerFuzzerView>()));

            DefaultDecimalFuzzerProperty = DependencyProperty.Register("DefaultDecimalFuzzer", typeof(DecimalFuzzerView), typeof(STFCView));

            CustomDecimalFuzzersProperty = DependencyProperty.Register("CustomDecimalFuzzers", typeof(ObservableCollection<DecimalFuzzerView>), typeof(STFCView),
                new FrameworkPropertyMetadata(new ObservableCollection<DecimalFuzzerView>()));

            DefaultByteFuzzerProperty = DependencyProperty.Register("DefaultByteFuzzer", typeof(ByteFuzzerView), typeof(STFCView));

            CustomByteFuzzersProperty = DependencyProperty.Register("CustomByteFuzzers", typeof(ObservableCollection<ByteFuzzerView>), typeof(STFCView),
                new FrameworkPropertyMetadata(new ObservableCollection<ByteFuzzerView>()));
        }

        public StringFuzzerView DefaultStringFuzzer
        {
            get { return (StringFuzzerView)GetValue(DefaultStringFuzzerProperty); }
            set { SetValue(DefaultStringFuzzerProperty, value); }
        }

        public ObservableCollection<StringFuzzerView> CustomStringFuzzers
        {
            get { return (ObservableCollection<StringFuzzerView>)GetValue(CustomStringFuzzersProperty); }
            set { SetValue(CustomStringFuzzersProperty, value); }
        }

        public IntegerFuzzerView DefaultIntegerFuzzer
        {
            get { return (IntegerFuzzerView)GetValue(DefaultIntegerFuzzerProperty); }
            set { SetValue(DefaultIntegerFuzzerProperty, value); }
        }

        public ObservableCollection<IntegerFuzzerView> CustomIntegerFuzzers
        {
            get { return (ObservableCollection<IntegerFuzzerView>)GetValue(CustomIntegerFuzzersProperty); }
            set { SetValue(CustomIntegerFuzzersProperty, value); }
        }

        public DecimalFuzzerView DefaultDecimalFuzzer
        {
            get { return (DecimalFuzzerView)GetValue(DefaultDecimalFuzzerProperty); }
            set { SetValue(DefaultDecimalFuzzerProperty, value); }
        }

        public ObservableCollection<DecimalFuzzerView> CustomDecimalFuzzers
        {
            get { return (ObservableCollection<DecimalFuzzerView>)GetValue(CustomDecimalFuzzersProperty); }
            set { SetValue(CustomDecimalFuzzersProperty, value); }
        }

        public ByteFuzzerView DefaultByteFuzzer
        {
            get { return (ByteFuzzerView)GetValue(DefaultByteFuzzerProperty); }
            set { SetValue(DefaultByteFuzzerProperty, value); }
        }

        public ObservableCollection<ByteFuzzerView> CustomByteFuzzers
        {
            get { return (ObservableCollection<ByteFuzzerView>)GetValue(CustomByteFuzzersProperty); }
            set { SetValue(CustomByteFuzzersProperty, value); }
        }
        #endregion

        public void AddCustomStringFuzzer()
        {
            StringFuzzerView oSFC = new StringFuzzerView(oSTFC, new StringLengthFuzzerCustomFuzzer(), new StringValueFuzzerCustomFuzzer());

            CustomStringFuzzers.Insert(0, oSFC);
        }

        public void AddCustomIntegerFuzzer()
        {
            IntegerFuzzerView oIFV = new IntegerFuzzerView(oSTFC, new IntegerValueFuzzerCustomFuzzer());

            CustomIntegerFuzzers.Insert(0, oIFV);
        }

        public void AddCustomDecimalFuzzer()
        {
            DecimalFuzzerView oDFV = new DecimalFuzzerView(oSTFC, new DecimalValueFuzzerCustomFuzzer());

            CustomDecimalFuzzers.Insert(0, oDFV);
        }

        public void AddCustomByteFuzzer()
        {
            ByteFuzzerView oBFV = new ByteFuzzerView(oSTFC, new BinaryValueFuzzerCustomFuzzer());

            CustomByteFuzzers.Insert(0, oBFV);
        }

        public STFCView(SimpleTypeFuzzerConfig SimpleTypeConfig)
        {
            oSTFC = SimpleTypeConfig;

            CreateStringFuzzersData();
            CreateIntegerFuzzersView();
            CreateDecimalFuzzersView();
            CreateByteFuzzersView();
        }

        private void CreateStringFuzzersData()
        {
            // Create Default String fuzzer data
            StringLengthFuzzersType oSLFT = null;
            StringValueFuzzersType oSVFT = null;
            if (null != oSTFC.StringLengthFuzzer)
                oSLFT = oSTFC.StringLengthFuzzer.DefaultFuzzers;
            if (null != oSTFC.StringValueFuzzer)
                oSVFT = oSTFC.StringValueFuzzer.DefaultFuzzers;
            DefaultStringFuzzer = new StringFuzzerView(oSTFC, oSLFT, oSVFT);
            
            // Create Custom String fuzzer data
            
            // Pre-compute Dictionary of nodename/StringValueFuzzerCustomFuzzer
            Dictionary<string, StringValueFuzzerCustomFuzzer> oValueCustomFuzzers = new Dictionary<string, StringValueFuzzerCustomFuzzer>();
            if ((null != oSTFC.StringValueFuzzer) && (null != oSTFC.StringValueFuzzer.CustomFuzzer))
            {
                for (int i = 0; i < oSTFC.StringValueFuzzer.CustomFuzzer.Length; i++)
                    oValueCustomFuzzers.Add(GetNodeName(oSTFC.StringValueFuzzer.CustomFuzzer[i].NodeNamespace, oSTFC.StringValueFuzzer.CustomFuzzer[i].NodeName),
                        oSTFC.StringValueFuzzer.CustomFuzzer[i]);
            }

            // Need to combine custom fuzzers for the length and value types
            if ((null != oSTFC.StringLengthFuzzer) && (null != oSTFC.StringLengthFuzzer.CustomFuzzer))
            {
                for (int i = 0; i < oSTFC.StringLengthFuzzer.CustomFuzzer.Length; i++)
                {
                    StringLengthFuzzerCustomFuzzer oSLFCF = oSTFC.StringLengthFuzzer.CustomFuzzer[i];
                    String NodeName = GetNodeName(oSLFCF.NodeNamespace, oSLFCF.NodeName);
                    StringValueFuzzerCustomFuzzer oSVFCF = null;
                    // See if the same node exists for value types
                    if (oValueCustomFuzzers.ContainsKey(NodeName))
                    {
                        oSVFCF = oValueCustomFuzzers[NodeName];
                        oValueCustomFuzzers.Remove(NodeName);
                    }
                    CustomStringFuzzers.Add(new StringFuzzerView(oSTFC, oSLFCF, oSVFCF));
                }
            }
            // Add any string value fuzzers that did not match up with string length fuzzers
            foreach(KeyValuePair<string, StringValueFuzzerCustomFuzzer> oKVP in oValueCustomFuzzers)
            {
                CustomStringFuzzers.Add(new StringFuzzerView(oSTFC, null, oKVP.Value));
            }
        }

        private void CreateIntegerFuzzersView()
        {
            // Create Default String fuzzer data
            IntegerValueFuzzersType oIVFT = null;
            if (null != oSTFC.IntegerValueFuzzer)
                oIVFT = oSTFC.IntegerValueFuzzer.DefaultFuzzers;
            DefaultIntegerFuzzer = new IntegerFuzzerView(oSTFC, oIVFT);

            // Create Custom Integer fuzzer data
            if ((null != oSTFC.IntegerValueFuzzer) && (null != oSTFC.IntegerValueFuzzer.CustomFuzzer))
            {
                for (int i = 0; i < oSTFC.IntegerValueFuzzer.CustomFuzzer.Length; i++)
                {
                    IntegerValueFuzzerCustomFuzzer oIVFCF = oSTFC.IntegerValueFuzzer.CustomFuzzer[i];
                    CustomIntegerFuzzers.Add(new IntegerFuzzerView(oSTFC, oIVFCF));
                }
            }
        }

        private void CreateDecimalFuzzersView()
        {
            // Create Default String fuzzer data
            DecimalValueFuzzersType oDVFT = null;
            if (null != oSTFC.DecimalValueFuzzer)
                oDVFT = oSTFC.DecimalValueFuzzer.DefaultFuzzers;
            DefaultDecimalFuzzer = new DecimalFuzzerView(oSTFC, oDVFT);

            // Create Custom Integer fuzzer data
            if ((null != oSTFC.DecimalValueFuzzer) && (null != oSTFC.DecimalValueFuzzer.CustomFuzzer))
            {
                for (int i = 0; i < oSTFC.DecimalValueFuzzer.CustomFuzzer.Length; i++)
                {
                    DecimalValueFuzzerCustomFuzzer oDVFCF = oSTFC.DecimalValueFuzzer.CustomFuzzer[i];
                    CustomDecimalFuzzers.Add(new DecimalFuzzerView(oSTFC, oDVFCF));
                }
            }
        }

        private void CreateByteFuzzersView()
        {
            // Create Default String fuzzer data
            ByteValueFuzzersType oBVFT = null;
            if (null != oSTFC.BinaryValueFuzzer)
                oBVFT = oSTFC.BinaryValueFuzzer.DefaultFuzzers;
            DefaultByteFuzzer = new ByteFuzzerView(oSTFC, oBVFT);

            // Create Custom Integer fuzzer data
            if ((null != oSTFC.BinaryValueFuzzer) && (null != oSTFC.BinaryValueFuzzer.CustomFuzzer))
            {
                for (int i = 0; i < oSTFC.BinaryValueFuzzer.CustomFuzzer.Length; i++)
                {
                    BinaryValueFuzzerCustomFuzzer oBVFCF = oSTFC.BinaryValueFuzzer.CustomFuzzer[i];
                    CustomByteFuzzers.Add(new ByteFuzzerView(oSTFC, oBVFCF));
                }
            }
        }

        private string GetNodeName(string Namespace, string Name)
        {
            return Namespace + "/" + Name;
        }

        public SimpleTypeFuzzerConfig SimpleTypeConfig
        {
            get 
            { 
                // Initialise the String Type fuzzers for saving
                if (null == oSTFC.StringLengthFuzzer)
                {
                    oSTFC.StringLengthFuzzer = new StringLengthFuzzer();
                    oSTFC.StringLengthFuzzer.LengthRepetitionString = DEFAULT_LENGTHSTRING;
                }
                if (null == oSTFC.StringValueFuzzer)
                    oSTFC.StringValueFuzzer = new StringValueFuzzer();
                oSTFC.StringLengthFuzzer.CustomFuzzer = new StringLengthFuzzerCustomFuzzer[0];
                oSTFC.StringLengthFuzzer.LengthGroup = new StringLengthFuzzerLengthGroup[0];
                oSTFC.StringLengthFuzzer.LengthRange = new ValueRange[0]; 
                oSTFC.StringValueFuzzer.CustomFuzzer = new StringValueFuzzerCustomFuzzer[0];
                oSTFC.StringValueFuzzer.StringGroup = new StringValueFuzzerStringGroup[0];
                oSTFC.StringValueFuzzer.StringRange = new ValueRange[0];
                // Save the current values of the SimpleTypeConfig
                DefaultStringFuzzer.SaveStringTypeConfig(oSTFC);
                for (int i = 0; i < CustomStringFuzzers.Count; i++)
                    CustomStringFuzzers[i].SaveStringTypeConfig(oSTFC);

                // Initialise the Integer Type fuzzers for saving
                if (null == oSTFC.IntegerValueFuzzer)
                    oSTFC.IntegerValueFuzzer = new IntegerValueFuzzer();
                oSTFC.IntegerValueFuzzer.CustomFuzzer = new IntegerValueFuzzerCustomFuzzer[0];
                oSTFC.IntegerValueFuzzer.IntegerGroup = new IntegerValueFuzzerIntegerGroup[0];
                // Save the current values of the SimpleTypeConfig
                DefaultIntegerFuzzer.SaveIntegerTypeConfig(oSTFC);
                for (int i = 0; i < CustomIntegerFuzzers.Count; i++)
                    CustomIntegerFuzzers[i].SaveIntegerTypeConfig(oSTFC);

                // Initialise the Decimal Type fuzzers for saving
                if (null == oSTFC.DecimalValueFuzzer)
                    oSTFC.DecimalValueFuzzer = new DecimalValueFuzzer();
                oSTFC.DecimalValueFuzzer.CustomFuzzer = new DecimalValueFuzzerCustomFuzzer[0];
                oSTFC.DecimalValueFuzzer.DecimalGroup = new DecimalValueFuzzerDecimalGroup[0];
                // Save the current values of the SimpleTypeConfig
                DefaultDecimalFuzzer.SaveDecimalTypeConfig(oSTFC);
                for (int i = 0; i < CustomDecimalFuzzers.Count; i++)
                    CustomDecimalFuzzers[i].SaveDecimalTypeConfig(oSTFC);

                // Initialise the  Byte Type fuzzers for saving
                if (null == oSTFC.BinaryValueFuzzer)
                    oSTFC.BinaryValueFuzzer = new BinaryValueFuzzer();
                oSTFC.BinaryValueFuzzer.CustomFuzzer = new BinaryValueFuzzerCustomFuzzer[0];
                oSTFC.BinaryValueFuzzer.ByteGroup = new BinaryValueFuzzerByteGroup[0];
                oSTFC.BinaryValueFuzzer.ByteRange = new ValueRange[0];
                // Save the current values of the SimpleTypeConfig
                DefaultByteFuzzer.SaveByteTypeConfig(oSTFC);
                for (int i = 0; i < CustomByteFuzzers.Count; i++)
                    CustomByteFuzzers[i].SaveByteTypeConfig(oSTFC);

                return oSTFC; 
            }
        }
    }
}
