using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;
using System.Xml.Serialization;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Shapes;
using Fuzzware.Schemas.AutoGenerated;
using Fuzzware.Fuzzsaw.Common;
using Fuzzware.Fuzzsaw.Input;
using Fuzzware.Fuzzsaw.FuzzingConfig;
using Fuzzware.Fuzzsaw.Output;
using Fuzzware.Fuzzsaw.Execution.ViewModel;
using Fuzzware.Fuzzsaw.PropertiesWindows.View;
using Fuzzware.Fuzzsaw.PropertiesWindows.ViewModel;

namespace Fuzzware.Fuzzsaw
{
    /// <summary>
    /// Interaction logic for MainWindow2.xaml
    /// </summary>
    public partial class MainWindow2 : Window
    {
        static bool m_bHandlingError = false;
        private double m_TitleBarHeight;

        protected Project m_CurrentProject;

        public MainWindow2()
        {
            // Set up global values
            Fuzzsaw.Initialise();

            // Bind the MainWindowViewModel to the main window
            Binding oBinding = new Binding();
            oBinding.Source = new MainWindowViewModel();
            this.SetBinding(FrameworkElement.DataContextProperty, oBinding);

            InitializeComponent();
        }


        private void wMainWindow_Loaded(object sender, RoutedEventArgs e)
        {
            // Calculate the TitleBar height
            m_TitleBarHeight = ActualHeight - spRootStackPanel.ActualHeight - BorderThickness.Top - BorderThickness.Bottom;
            // We use this hack as our height solution only works after an adjustment to the height, so we do an adjustment
            // and then everything looks pretty.
            Height = Height + 1;
            Height = Height - 1;
        }

        /// <summary>
        /// Invoke the command that promtps the user before closing
        /// </summary>
        private void wMainWindow_Closing(object sender, System.ComponentModel.CancelEventArgs e)
        {
            ICommand ExitApplicationCommand = Common.Common.GetPropertyFromDataContext<ICommand>(DataContext, "ExitApplicationCommand");
            if (null != ExitApplicationCommand)
                ExitApplicationCommand.Execute(e);
        }

        public double TitleBarHeight
        {
            get { return m_TitleBarHeight; }
        }

        #region Commands

        #region Helper Commands

        /// <summary>
        /// Handles error messages and massive failures
        /// </summary>
        /// <param name="sender">Should be of type ErrorHelper</param>
        /// <param name="e"></param>
        private void ShowError(object sender, ExecutedRoutedEventArgs e)
        {
            if (m_bHandlingError)
                return;
            m_bHandlingError = true;
            if ((null != e) && (e.Parameter is ErrorHelper))
            {
                ErrorHelper oErrorHelper = e.Parameter as ErrorHelper;
                if (oErrorHelper.Recoverable)
                {
                    MessageBox.Show(oErrorHelper.ErrorMessage, "An error occurred", MessageBoxButton.OK);
                }
                else
                {
                    string Message = oErrorHelper.ErrorMessage;
                    Message += Environment.NewLine;
                    Message += Environment.NewLine;
                    Message += "It is best the application exits";
                    Message += Environment.NewLine;
                    Message += Environment.NewLine;
                    MessageBox.Show(Message, "An unrecoverable error occurred", MessageBoxButton.OK);

                    ExitApplication(sender, e);

                    //if (null != m_CurrentProject)
                    //{
                    //    Message += "Would you like to try and Save your current project?";
                    //    if (MessageBoxResult.Yes == MessageBox.Show(Message, "An unrecoverable error occurred", MessageBoxButton.YesNo))
                    //    {
                    //        SaveProject(sender, e);
                    //    }
                    //}
                    //else
                    //    MessageBox.Show(Message, "An unrecoverable error occurred", MessageBoxButton.OK);
                    
                    //Application.Current.MainWindow.Close();
                }
            }
            m_bHandlingError = false;
        }

        /// <summary>
        /// Adds a MenuItem to the main menu
        /// </summary>
        private void AddToMainMenu(object sender, ExecutedRoutedEventArgs e)
        {
            // Get the menu item to add
            MenuItem oMenuItem = e.Parameter as MenuItem;
            if (null == oMenuItem)
                return;

            // See if this menu item already exists on the main menu
            if (menuMain.Items.Contains(oMenuItem))
                return;

            // Add the new menu item
            menuMain.Items.Add(oMenuItem);
        }

        /// <summary>
        /// Removes a MenuItem from the main menu
        /// </summary>
        private void RemoveFromMainMenu(object sender, ExecutedRoutedEventArgs e)
        {
            // Get the menu item to remove
            MenuItem oMenuItem = e.Parameter as MenuItem;
            if (null == oMenuItem)
                return;

            // See if this menu item already exists on the main menu
            if (!menuMain.Items.Contains(oMenuItem))
                return;

            // Remove the menu item
            menuMain.Items.Remove(oMenuItem);
        }

        /// <summary>
        /// Show the project properties
        /// </summary>
        private void ShowProjectProperties(object sender, ExecutedRoutedEventArgs e)
        {
            ICommand ShowProjectPropertiesCommand = Common.Common.GetPropertyFromDataContext<ICommand>(DataContext, "ShowProjectPropertiesCommand");
            if (null != ShowProjectPropertiesCommand)
            {
                ProjectPropertiesWindow oPropsWindow = new ProjectPropertiesWindow();
                oPropsWindow.Owner = this;
                ShowProjectPropertiesCommand.Execute(oPropsWindow);
            }
        }

        /// <summary>
        /// Show the general properties
        /// </summary>
        private void ShowProperties(object sender, ExecutedRoutedEventArgs e)
        {
            ICommand ShowGeneralPropertiesCommand = Common.Common.GetPropertyFromDataContext<ICommand>(DataContext, "ShowGeneralPropertiesCommand");
            if (null != ShowGeneralPropertiesCommand)
            {
                GeneralPropertiesWindow oGenWindow = new GeneralPropertiesWindow();
                oGenWindow.Owner = this;
                ShowGeneralPropertiesCommand.Execute(oGenWindow);
            }
        }

        #endregion

        #region Application Commands

        /// <summary>
        /// New Command.  Create a new project
        /// </summary>
        private void NewProject(object sender, ExecutedRoutedEventArgs e)
        {
            ICommand NewProjectCommand = Common.Common.GetPropertyFromDataContext<ICommand>(DataContext, "NewProjectCommand");
            if (null != NewProjectCommand)
            {
                NewProjectWindow oNewProjectWindow = new NewProjectWindow();
                NewProjectCommand.Execute(oNewProjectWindow);
            }
        }

        /// <summary>
        /// Open Command.  Open an existing project
        /// </summary>
        private void OpenProject(object sender, ExecutedRoutedEventArgs e)
        {
            ICommand OpenProjectCommand = Common.Common.GetPropertyFromDataContext<ICommand>(DataContext, "OpenProjectCommand");
            if (null != OpenProjectCommand)
                OpenProjectCommand.Execute(null);
        }

        /// <summary>
        /// Save Command.  Save the current project.
        /// </summary>
        private void SaveProject(object sender, ExecutedRoutedEventArgs e)
        {
            ICommand SaveProjectCommand = Common.Common.GetPropertyFromDataContext<ICommand>(DataContext, "SaveProjectCommand");
            if (null != SaveProjectCommand)
                SaveProjectCommand.Execute(null);
        }

        /// <summary>
        /// Close Command.  Close the application.
        /// </summary>
        private void CloseProject(object sender, ExecutedRoutedEventArgs e)
        {
            ICommand CloseProjectCommand = Common.Common.GetPropertyFromDataContext<ICommand>(DataContext, "CloseProjectCommand");
            if (null != CloseProjectCommand)
                CloseProjectCommand.Execute(null);
        }

        /// <summary>
        /// Calls Window.Close.  Prompting is handled in the Closing event handler
        /// </summary>
        private void ExitApplication(object sender, ExecutedRoutedEventArgs e)
        {
            Close();
        }

        #endregion

        #endregion
    }

    /// <summary>
    /// Convert main window height to Working Area height
    /// </summary>
    [ValueConversion(typeof(double), typeof(double))]
    public class WindowToWorkingAreaHeight : IValueConverter
    {
        #region IValueConverter Members

        public object Convert(object value, Type targetType, object parameter, System.Globalization.CultureInfo culture)
        {
            MainWindow2 oWindow = App.Current.MainWindow as MainWindow2;

            if ((0.0 == oWindow.ActualHeight) || (null == oWindow.menuMain) || (null == oWindow.BorderThickness))
                return 0.0;

            return oWindow.ActualHeight - oWindow.menuMain.ActualHeight - oWindow.BorderThickness.Top - oWindow.BorderThickness.Bottom;
        }

        public object ConvertBack(object value, Type targetType, object parameter, System.Globalization.CultureInfo culture)
        {
            return null;
        }

        #endregion
    }
}
