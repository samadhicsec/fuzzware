<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    x:Class="Fuzzware.Fuzzsaw.Common.Common"
    xmlns:src="clr-namespace:Fuzzware.Fuzzsaw.Common">

    <src:DummyValueConverter x:Key="DummyValueConverter" />
    <src:GetError x:Key="GetError" />
    <src:BooleanToVisability x:Key="BooleanToVisability" />
    
    <!-- Common Brushes -->
    <LinearGradientBrush x:Key="CommonBackground" StartPoint="0.5, 0" EndPoint="0.5, 1" Opacity="0.3">
        <GradientStop Color="Silver" Offset="0" />
        <GradientStop Color="Black"  Offset="1" />
    </LinearGradientBrush>
    
    <LinearGradientBrush x:Key="CommonSelectedBackground" StartPoint="0.5, 0" EndPoint="0.5, 1" Opacity="0.3">
        <GradientStop Color="Black" Offset="0" />
        <GradientStop Color="Silver"  Offset="1" />
    </LinearGradientBrush>

    <LinearGradientBrush x:Key="ItemAreaBrush" StartPoint="0.5, 0" EndPoint="0.5, 1" Opacity="0.3">
        <GradientStop Color="Black" Offset="0" />
        <GradientStop Color="White" Offset="1" />
    </LinearGradientBrush>

    <LinearGradientBrush x:Key="SelectedItemAreaBrush" StartPoint="0.5, 0" EndPoint="0.5, 1" Opacity="0.4">
        <GradientStop Color="#22000000" Offset="0" />
        <GradientStop Color="#EEFFFFFF" Offset="1" />
    </LinearGradientBrush>

    <LinearGradientBrush x:Key="ItemBorderBrush" StartPoint="0.5, 0" EndPoint="0.5, 1">
        <GradientStop Color="LightGray" Offset="0" />
        <GradientStop Color="Gray" Offset="1" />
    </LinearGradientBrush>

    <!-- Common Font Styles -->
    <SolidColorBrush x:Key="CommonFontColour" Color="DarkBlue" />
    <FontFamily x:Key="CommonFont">Book Antiqua</FontFamily>
    
    <Style x:Key="CommonHeaderText">
        <Setter Property="TextBlock.FontFamily" Value="{StaticResource CommonFont}" />
        <Setter Property="TextBlock.Foreground" Value="{StaticResource CommonFontColour}" />
        <Setter Property="TextBlock.FontSize" Value="20" />
        
        <Setter Property="Control.FontFamily" Value="{StaticResource CommonFont}" />
        <Setter Property="Control.Foreground" Value="{StaticResource CommonFontColour}" />
        <Setter Property="Control.FontSize" Value="20" />
    </Style>
    
    <Style x:Key="CommonSubHeaderText">
        <Setter Property="TextBlock.FontFamily" Value="{StaticResource CommonFont}" />
        <Setter Property="TextBlock.Foreground" Value="{StaticResource CommonFontColour}" />
        <Setter Property="TextBlock.FontSize" Value="16" />
        
        <Setter Property="Control.FontFamily" Value="{StaticResource CommonFont}" />
        <Setter Property="Control.Foreground" Value="{StaticResource CommonFontColour}" />
        <Setter Property="Control.FontSize" Value="16" />
    </Style>
    
    <Style x:Key="CommonText">
        <Setter Property="TextBlock.FontFamily" Value="{StaticResource CommonFont}" />
        <Setter Property="TextBlock.Foreground" Value="{StaticResource CommonFontColour}" />
        <Setter Property="TextBlock.FontSize" Value="14" />
        
        <Setter Property="Control.FontFamily" Value="{StaticResource CommonFont}" />
        <Setter Property="Control.Foreground" Value="{StaticResource CommonFontColour}" />
        <Setter Property="Control.FontSize" Value="14" />
    </Style>

    <Style x:Key="DataText">
        <Setter Property="TextBlock.FontFamily" Value="{StaticResource CommonFont}" />
        <Setter Property="TextBlock.Foreground" Value="Black" />
        <Setter Property="TextBlock.FontSize" Value="14" />

        <Setter Property="Control.FontFamily" Value="{StaticResource CommonFont}" />
        <Setter Property="Control.Foreground" Value="Black" />
        <Setter Property="Control.FontSize" Value="14" />
    </Style>

    <Style x:Key="HelpText">
        <Setter Property="TextBlock.FontFamily" Value="{StaticResource CommonFont}" />
        <Setter Property="TextBlock.Foreground" Value="{StaticResource CommonFontColour}" />
        <Setter Property="TextBlock.FontSize" Value="12" />
        <Setter Property="TextBlock.FontStyle" Value="Italic" />
        
        <Setter Property="Control.FontFamily" Value="{StaticResource CommonFont}" />
        <Setter Property="Control.Foreground" Value="{StaticResource CommonFontColour}" />
        <Setter Property="Control.FontSize" Value="12" />
        <Setter Property="Control.FontStyle" Value="Italic" />
    </Style>
    
    <Style x:Key="ControlHeaderText" TargetType="Control">
        <Setter Property="FontFamily" Value="{StaticResource CommonFont}" />
        <Setter Property="Foreground" Value="{StaticResource CommonFontColour}" />
        <Setter Property="FontSize" Value="20" />
    </Style>
    
    <Style x:Key="ControlCommonSubHeaderText" TargetType="Control">
        <Setter Property="FontFamily" Value="{StaticResource CommonFont}" />
        <Setter Property="Foreground" Value="{StaticResource CommonFontColour}" />
        <Setter Property="FontSize" Value="16" />
    </Style>
    
    <Style x:Key="ControlCommonText" TargetType="Control">
        <Setter Property="FontFamily" Value="{StaticResource CommonFont}" />
        <Setter Property="Foreground" Value="{StaticResource CommonFontColour}" />
        <Setter Property="FontSize" Value="14" />
    </Style>
    
    <Style x:Key="CommonTextFD" TargetType="FlowDocument">
        <Setter Property="FontFamily" Value="{StaticResource CommonFont}" />
        <Setter Property="Foreground" Value="{StaticResource CommonFontColour}" />
        <Setter Property="FontSize" Value="12" />
        <Setter Property="IsOptimalParagraphEnabled" Value="True" />
    </Style>
    
    <!-- Common Border Style -->
    <LinearGradientBrush x:Key="BackgroundBrush" StartPoint="0.5, 0" EndPoint="0.5, 1" Opacity="0.3">
        <GradientStop Color="Gray" Offset="0" />
        <GradientStop Color="Silver" Offset="1" />
    </LinearGradientBrush>

    <LinearGradientBrush x:Key="MouseOverBorderBrush" StartPoint="0.5, 0" EndPoint="0.5, 1" Opacity="0.3">
        <GradientStop Color="Silver" Offset="0" />
        <GradientStop Color="Gray" Offset="1" />
    </LinearGradientBrush>

    <Style x:Key="BorderStyle" TargetType="Border">
        <Setter Property="Background" Value="{StaticResource BackgroundBrush}" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="BorderBrush" Value="{StaticResource CommonFontColour}" />
        <Setter Property="CornerRadius" Value="8" />
        <Setter Property="Padding" Value="6" />
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="Margin" Value="2,5,2,5" />
        <Setter Property="Width" Value="Auto" />
    </Style>

    <Style x:Key="SelectableBorderStyle" BasedOn="{StaticResource BorderStyle}" TargetType="Border">
        <Style.Triggers>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsMouseOver" Value="True" />
                    <Condition Property="IsEnabled" Value="True" />
                </MultiTrigger.Conditions>
                <MultiTrigger.Setters>
                    <Setter Property="Background" Value="{StaticResource MouseOverBorderBrush}" />
                    <Setter Property="TextElement.Foreground" Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}" />
                    <Setter Property="BorderThickness" Value="3" />
                    <Setter Property="Margin" Value="0,3,0,3" />
                </MultiTrigger.Setters>
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="src:Common.IsSelected" Value="True" />
                    <Condition Property="IsEnabled" Value="True" />    
                </MultiTrigger.Conditions>
                <MultiTrigger.Setters>
                    <Setter Property="Background" Value="{StaticResource MouseOverBorderBrush}" />
                    <Setter Property="TextElement.Foreground" Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}" />
                    <Setter Property="BorderThickness" Value="3" />
                    <Setter Property="Margin" Value="0,3,0,3" />
                    <Setter Property="BitmapEffect">
                        <Setter.Value>
                            <OuterGlowBitmapEffect GlowColor="LightBlue" GlowSize="2" />
                        </Setter.Value>
                    </Setter>
                </MultiTrigger.Setters>
            </MultiTrigger>
        </Style.Triggers>
    </Style>

    <!-- Common Headered Content Control -->
    <Style x:Key="HeaderedContentControlStyle" TargetType="HeaderedContentControl">

        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="HeaderedContentControl">
                    <StackPanel>
                        <TextBlock Style="{StaticResource CommonHeaderText}" Text="{TemplateBinding Header}" />
                        <Separator Background="{StaticResource CommonFontColour}" />
                        <ContentPresenter />
                    </StackPanel>
                </ControlTemplate>
            </Setter.Value>
        </Setter>

    </Style>
    
    <!-- Common Sub-Headered Content Control -->
    <Style x:Key="SubHeaderedContentControlStyle" TargetType="HeaderedContentControl">

        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="HeaderedContentControl">
                    <StackPanel>
                        <TextBlock Style="{StaticResource CommonSubHeaderText}" Text="{TemplateBinding Header}" />
                        <Separator Background="{StaticResource CommonFontColour}" />
                        <ContentPresenter />
                    </StackPanel>
                </ControlTemplate>
            </Setter.Value>
        </Setter>

    </Style>

    <!-- Use this common style to group any options that need to be collaspable -->
    <Style x:Key="HeaderedCollaspableGroupStyle" TargetType="HeaderedContentControl">

        <Setter Property="src:Common.IsExpanded" Value="false" />

        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="HeaderedContentControl">
                    <Grid Margin="4,4">
                        <Grid.ColumnDefinitions>
                            <!-- Width="*" ensures the TreeViewItem takes up the entire width of the parent -->
                            <ColumnDefinition Width="*" />
                        </Grid.ColumnDefinitions>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto"/>
                        </Grid.RowDefinitions>

                        <Border Name="Bd"
                          Background="{StaticResource ItemAreaBrush}"
                          BorderBrush="{StaticResource ItemBorderBrush}" 
                          BorderThickness="0.6" CornerRadius="8" Padding="0" SnapsToDevicePixels="True">
                            <Grid ScrollViewer.CanContentScroll="False" ScrollViewer.HorizontalScrollBarVisibility="Disabled">
                                <Expander Name="Exp" IsExpanded="{TemplateBinding src:Common.IsExpanded}">
                                    <Expander.Header>
                                        <!-- Displays the header in the Expander. -->
                                        <ContentPresenter ContentSource="Header" />
                                    </Expander.Header>
                                    <!-- Displays the content. -->
                                    <ContentPresenter ContentSource="Content" />
                                </Expander>
                            </Grid>
                        </Border>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>

    </Style>
    
    <!-- Use for Advanced Options -->
    <Style x:Key="AdvancedOptionsStyle" BasedOn="{StaticResource HeaderedCollaspableGroupStyle}" TargetType="HeaderedContentControl">

        <Setter Property="Header" Value="Advanced Options" />

        <Setter Property="HeaderTemplate">
            <Setter.Value>
                <DataTemplate DataType="HeaderedContentControl">
                    <StackPanel Style="{StaticResource CommonText}">
                        <!--<TextBlock Style="{StaticResource CommonText}" Text="{Binding}"></TextBlock>-->
                        <TextBlock Style="{StaticResource CommonText}" Text="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Content, UpdateSourceTrigger=PropertyChanged}"></TextBlock>
                    </StackPanel>
                </DataTemplate>
            </Setter.Value>
        </Setter>

    </Style>

    <!-- A template for a delete button -->
    <ControlTemplate x:Key="DeleteButtonTemplate" TargetType="Button">
        <Border Name="Border" Height="20" Width="21" CornerRadius="4" BorderBrush="White" BorderThickness="1"
                        Background="Gray">
            <Canvas Margin="0,0,0,0" Height="20" Width="20" HorizontalAlignment="Center" VerticalAlignment="Center">
                <Line Stroke="White" X1="4" Y1="4" X2="16" Y2="16" StrokeThickness="3">
                    <Line.BitmapEffect>
                        <BlurBitmapEffect Radius="3" />
                    </Line.BitmapEffect>
                </Line>
                <Line Stroke="White" X1="4" Y1="16" X2="16" Y2="4" StrokeThickness="3">
                    <Line.BitmapEffect>
                        <BlurBitmapEffect Radius="3" />
                    </Line.BitmapEffect>
                </Line>
            </Canvas>
        </Border>
        <ControlTemplate.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter TargetName="Border" Property="Background" Value="Silver" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <!-- AddButtonTemplate -->
    <ControlTemplate x:Key="AddButtonTemplate" >
        <Border Name="Border" Height="30" Width="30" CornerRadius="4" BorderBrush="White" BorderThickness="1"
                        Background="Gray">
            <Canvas Margin="0,0,0,0" Height="30" Width="30" HorizontalAlignment="Center" VerticalAlignment="Center">
                <Line Stroke="White" X1="15" Y1="4" X2="15" Y2="26" StrokeThickness="3">
                    <Line.BitmapEffect>
                        <BlurBitmapEffect Radius="3" />
                    </Line.BitmapEffect>
                </Line>
                <Line Stroke="White" X1="4" Y1="15" X2="26" Y2="15" StrokeThickness="3">
                    <Line.BitmapEffect>
                        <BlurBitmapEffect Radius="3" />
                    </Line.BitmapEffect>
                </Line>
            </Canvas>
        </Border>
        <ControlTemplate.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter TargetName="Border" Property="Background" Value="Silver" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <!-- SubtractButtonTemplate -->
    <ControlTemplate x:Key="SubtractButtonTemplate" >
        <Border Name="Border" Height="20" Width="20" CornerRadius="4" BorderBrush="White" BorderThickness="1"
                        Background="Gray">
            <Canvas Margin="0,0,0,0" Height="20" Width="20" HorizontalAlignment="Center" VerticalAlignment="Center">
                <Line Stroke="White" X1="3" Y1="10" X2="17" Y2="10" StrokeThickness="3">
                    <Line.BitmapEffect>
                        <BlurBitmapEffect Radius="3" />
                    </Line.BitmapEffect>
                </Line>
            </Canvas>
        </Border>
        <ControlTemplate.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter TargetName="Border" Property="Background" Value="Silver" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <!-- Error handling -->
    <!--<Style TargetType="{x:Type FrameworkElement}">
        <Style.Triggers>
            <Trigger Property="Validation.HasError" Value="true">
                <Setter Property="ToolTip"
                Value="{Binding RelativeSource={RelativeSource Self}, 
                       Path=(Validation.Errors)[0].ErrorContent}"/>
            </Trigger>
        </Style.Triggers>
    </Style>-->

</ResourceDictionary>