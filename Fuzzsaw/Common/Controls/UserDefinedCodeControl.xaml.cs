using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Navigation;
using System.Windows.Shapes;
using Fuzzware.Fuzzsaw.Common;
using Fuzzware.Schemas.AutoGenerated;

namespace Fuzzware.Fuzzsaw.Common.Controls
{
    /// <summary>
    /// Interaction logic for UserDefinedCodeControl.xaml
    /// </summary>
    public partial class UserDefinedCodeControl : UserControl
    {
        #region Dependency Properties declaration and setup

        static readonly DependencyProperty CustomCodeProperty = DependencyProperty.Register("CustomCode", typeof(UserDefinedCode), typeof(UserDefinedCodeControl));
        public UserDefinedCode CustomCode
        {
            get { return (UserDefinedCode)GetValue(CustomCodeProperty); }
            set { SetValue(CustomCodeProperty, value); }
        }

        #endregion

        protected String m_InterfaceName;
        protected bool m_bAllowCustomXMLData;
        protected Brush m_DefaultBrush;
        protected XmlNodeArray_String oConverter;

        public UserDefinedCodeControl()
        {
            InitializeComponent();

            CustomCode = new UserDefinedCode();

            oConverter = new XmlNodeArray_String();
            m_DefaultBrush = tbCustomParameters.BorderBrush;
            tbCustomParameters.TextChanged += new TextChangedEventHandler(tbCustomParameters_TextChanged);
        }

        void tbCustomParameters_TextChanged(object sender, TextChangedEventArgs e)
        {
            if (String.IsNullOrEmpty(tbCustomParameters.Text))
            {
                tbCustomParameters.BorderBrush = m_DefaultBrush;
                return;
            }

            // Whether or not the conversion from String to XMLNode[] works should happen in real time due to the binding
            if(null != CustomCode.UserDefinedData)
                tbCustomParameters.BorderBrush = new SolidColorBrush(Colors.Green);
            else
                tbCustomParameters.BorderBrush = new SolidColorBrush(Colors.Red);
        }

        /// <summary>
        /// The specific interface name this UserDefinedCodeControl should inform the user to instantiate
        /// </summary>
        public String InterfaceName
        {
            get { return m_InterfaceName; }
            set { m_InterfaceName = value; }
        }

        /// <summary>
        /// If the interface allows custom XML Data to be passed to it, set this to true
        /// </summary>
        public bool AllowCustomXMLData
        {
            get { return m_bAllowCustomXMLData; }
            set { m_bAllowCustomXMLData = value; }
        }
    }
}
