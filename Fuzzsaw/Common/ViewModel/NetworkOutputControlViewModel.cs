using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Windows;
using System.ComponentModel;
using System.Net;
using Fuzzware.Schemas.AutoGenerated;

namespace Fuzzware.Fuzzsaw.Common.ViewModel
{
    public class NetworkOutputControlViewModel : ViewModelBase, IDataErrorInfo
    {
        #region Dependency Properties
        public static readonly DependencyProperty AddressProperty = DependencyProperty.Register("Address", typeof(string), typeof(NetworkOutputControlViewModel));
        /// <summary>
        /// The network address target destination
        /// </summary>
        public string Address
        {
            get { return (String)GetValue(AddressProperty); }
            set { SetValue(AddressProperty, value); }
        }

        public static readonly DependencyProperty PortProperty = DependencyProperty.Register("Port", typeof(string), typeof(NetworkOutputControlViewModel));
        /// <summary>
        /// The port of the target destination
        /// </summary>
        public string Port
        {
            get { return (String)GetValue(PortProperty); }
            set { SetValue(PortProperty, value); }
        }

        public static readonly DependencyProperty UseSSLProperty = DependencyProperty.Register("UseSSL", typeof(bool), typeof(NetworkOutputControlViewModel));
        /// <summary>
        /// Whether the target destination requires SSL
        /// </summary>
        public bool UseSSL
        {
            get { return (bool)GetValue(UseSSLProperty); }
            set { SetValue(UseSSLProperty, value); }
        }

        public static readonly DependencyProperty FileStoreProperty = DependencyProperty.Register("FileStore", typeof(FileStoreControlViewModel), typeof(NetworkOutputControlViewModel));
        /// <summary>
        /// The advanced file store of the responses
        /// </summary>
        public FileStoreControlViewModel FileStore
        {
            get { return (FileStoreControlViewModel)GetValue(FileStoreProperty); }
            set { SetValue(FileStoreProperty, value); }
        }
        #endregion

        public NetworkOutputControlViewModel()
        {
            FileStore = new FileStoreControlViewModel();

            FileStore.DirectoryName = Fuzzsaw.DefaultOutputDir;
            FileStore.FileExtension = Fuzzsaw.DefaultOutputExt;
            FileStore.Tolerance = "0";
        }

        public NetworkOutputControlViewModel(OutputToNetwork oOutputToNetwork)
            : this()
        {
            if (oOutputToNetwork.Item is OutputToNetworkURI)
            {
                Address = (oOutputToNetwork.Item as OutputToNetworkURI).Value;
                UseSSL = (oOutputToNetwork.Item as OutputToNetworkURI).UseSSL;
            }
            else
                Address = oOutputToNetwork.Item as string;
            Port = oOutputToNetwork.Port.ToString();
            
            if (null != oOutputToNetwork.UniqueResponses)
            {
                FileStore.DirectoryName = oOutputToNetwork.UniqueResponses.Directory;
                FileStore.FileExtension = oOutputToNetwork.UniqueResponses.FileExtension;
                FileStore.Tolerance = oOutputToNetwork.UniqueResponses.Tolerance;
            }
        }

        /// <summary>
        /// Convert the NetworkOutputControlViewModel to OutputTONetwork
        /// </summary>
        /// <returns></returns>
        public OutputToNetwork GetOutputToNetwork()
        {
            OutputToNetwork oOutputToNetwork = new OutputToNetwork();
            ushort port = 0;
            if (UInt16.TryParse(Port, out port))
                oOutputToNetwork.Port = port;
            IPAddress oIPAddress = null;
            if (IPAddress.TryParse(Address, out oIPAddress))
                oOutputToNetwork.Item = Address;
            else
            {
                OutputToNetworkURI oOutputToNetworkURI = new OutputToNetworkURI();
                oOutputToNetworkURI.Value = Address;
                oOutputToNetworkURI.UseSSL = UseSSL;
                oOutputToNetwork.Item = oOutputToNetworkURI;
            }
            oOutputToNetwork.UniqueResponses = new FileStoreWithTolerance();
            oOutputToNetwork.UniqueResponses.Directory = FileStore.DirectoryName;
            oOutputToNetwork.UniqueResponses.FileExtension = FileStore.FileExtension;
            oOutputToNetwork.UniqueResponses.Tolerance = FileStore.Tolerance;

            return oOutputToNetwork;
        }

        #region IDataErrorInfo Members

        public string Error
        {
            get { throw new NotImplementedException(); }
        }

        public string this[string columnName]
        {
            get
            {
                string error = null;

                if (columnName.Equals("Address") && (null != Address))
                {
                    IPAddress oIPAddress = null;
                    if (IPAddress.TryParse(Address, out oIPAddress) && UseSSL)
                        error = "SSL can only be used with host names, not IP addresses";
                    if ((Uri.CheckHostName(Address) == UriHostNameType.Unknown) &&
                        !IPAddress.TryParse(Address, out oIPAddress))
                        error = "Not a valid host name or IP address";

                }
                else if (columnName.Equals("Port"))
                {
                    ushort num = 0;
                    if (!UInt16.TryParse(Port, out num))
                        error = "Port must be between 0 and 65535";
                }
                return error;
            }
        }

        #endregion
    }
}
