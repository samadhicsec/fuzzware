using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Text;
using System.Windows;
using System.ComponentModel;
using Fuzzware.Fuzzsaw.Common;
using Fuzzware.Schemas.AutoGenerated;

namespace Fuzzware.Fuzzsaw.Common.ViewModel
{
    public class UserDefinedCodeControlViewModel : ViewModelBase, IDataErrorInfo
    {
        #region Dependency Properties
        static readonly DependencyProperty AssembliesProperty = DependencyProperty.Register("Assemblies", typeof(FilesControlViewModel), typeof(UserDefinedCodeControlViewModel));
        /// <summary>
        /// The assemblies to load that contain the user defined code
        /// </summary>
        public FilesControlViewModel Assemblies
        {
            get { return (FilesControlViewModel)GetValue(AssembliesProperty); }
            set { SetValue(AssembliesProperty, value); }
        }

        static readonly DependencyProperty NamespaceDotClassProperty = DependencyProperty.Register("NamespaceDotClass", typeof(string), typeof(UserDefinedCodeControlViewModel));
        /// <summary>
        /// The Namespace.Class in the assemblies to instantiate
        /// </summary>
        public String NamespaceDotClass
        {
            get { return (String)GetValue(NamespaceDotClassProperty); }
            set { SetValue(NamespaceDotClassProperty, value); }
        }

        static readonly DependencyProperty UserDefinedDataProperty = DependencyProperty.Register("UserDefinedData", typeof(string), typeof(UserDefinedCodeControlViewModel));
        /// <summary>
        /// The user defined data to pass to the user defined code
        /// </summary>
        public String UserDefinedData
        {
            get { return (String)GetValue(UserDefinedDataProperty); }
            set { SetValue(UserDefinedDataProperty, value); }
        }

        #endregion

        public UserDefinedCodeControlViewModel()
        {
            Assemblies = new FilesControlViewModel();
            Assemblies.Title = "Choose Custom Assemblies";
            Assemblies.DefaultExtension = ".dll";
            Assemblies.Filter = "DLL files (.dll)|*.dll";
            Assemblies.UseRelativePaths = true;
        }

        public UserDefinedCodeControlViewModel(UserDefinedCode oUserDefinedCode)
            : this()
        {
            Assemblies.Filenames.Clear();
            for(int i = 0; (null != oUserDefinedCode.LoadAssembly) && (i < oUserDefinedCode.LoadAssembly.Length); i++)
                Assemblies.Filenames.Add(oUserDefinedCode.LoadAssembly[i]);

            NamespaceDotClass = oUserDefinedCode.NamespaceDotClass;
            XmlNodeArray_String oXmlNodeArray_String = new XmlNodeArray_String();
            UserDefinedData = (string)oXmlNodeArray_String.Convert(oUserDefinedCode.UserDefinedData, null, null, null);
        }

        public UserDefinedCode GetUserDefinedCode()
        {
            UserDefinedCode oUserDefinedCode = new UserDefinedCode();
            oUserDefinedCode.LoadAssembly = Assemblies.Filenames.ToArray<string>();
            oUserDefinedCode.NamespaceDotClass = NamespaceDotClass;
            XmlNodeArray_String oXmlNodeArray_String = new XmlNodeArray_String();
            oUserDefinedCode.UserDefinedData = oXmlNodeArray_String.ConvertBack(UserDefinedData, null, null, null);

            return oUserDefinedCode;
        }

        #region IDataErrorInfo Members

        public string Error
        {
            get { throw new NotImplementedException(); }
        }

        public string this[string columnName]
        {
            get 
            {
                if (columnName.Equals(UserDefinedDataProperty.Name))
                {
                    XmlNodeArray_String oXmlNodeArray_String = new XmlNodeArray_String();
                    if (null == oXmlNodeArray_String.ConvertBack(UserDefinedData, null, null, null))
                        return "User defined data is not valid XML";
                }
                return null;
            }
        }

        #endregion
    }
}
