using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Text;
using System.IO;
using System.Windows;
using System.Windows.Input;
using Fuzzware.Fuzzsaw.Common;
using Fuzzware.Fuzzsaw.Common.ViewModel;
using Fuzzware.Schemas.AutoGenerated;
    
namespace Fuzzware.Fuzzsaw.Output.ViewModel
{
    public class WSDLOutputViewModel : OutputBaseViewModel, IOutputHandler
    {
        #region Dependency Properties

        static readonly DependencyProperty SOAPTemplateProperty = DependencyProperty.Register("SOAPTemplate", typeof(FileControlViewModel), typeof(WSDLOutputViewModel));
        public FileControlViewModel SOAPTemplate
        {
            get { return (FileControlViewModel)GetValue(SOAPTemplateProperty); }
            set { SetValue(SOAPTemplateProperty, value); }
        }

        static readonly DependencyProperty ReuseParametersProperty = DependencyProperty.Register("ReuseParameters", typeof(ObservableCollection<ObservableString>), typeof(WSDLOutputViewModel));
        public ObservableCollection<ObservableString> ReuseParameters
        {
            get { return (ObservableCollection<ObservableString>)GetValue(ReuseParametersProperty); }
            set { SetValue(ReuseParametersProperty, value); }
        }

        static readonly DependencyProperty FileStoreProperty = DependencyProperty.Register("FileStore", typeof(FileStoreControlViewModel), typeof(WSDLOutputViewModel));
        public FileStoreControlViewModel FileStore
        {
            get { return (FileStoreControlViewModel)GetValue(FileStoreProperty); }
            set { SetValue(FileStoreProperty, value); }
        }

        #endregion

        #region Commands

        #region PreEditDataCommand
        RelayCommand<ObservableString> m_oPreEditDataCommand;

        /// <summary>
        /// Empty out the last entry in the list box on edit
        /// </summary>
        public ICommand PreEditDataCommand
        {
            get
            {
                if (null == m_oPreEditDataCommand)
                    m_oPreEditDataCommand = new RelayCommand<ObservableString>(PreEditDataExecute);
                return m_oPreEditDataCommand;
            }
        }

        public void PreEditDataExecute(ObservableString oData)
        {
            // If we are editting the last data value, clear out its value (it will be the 'Add a Value' text)
            if ((null != ReuseParameters) && (ReuseParameters.Count > 0) && (ReuseParameters[ReuseParameters.Count - 1] == oData))
                oData.Value = "";
        }
        #endregion

        #region AddReuseParameterCommand
        RelayCommand m_oAddReuseParameterCommand;

        public ICommand AddReuseParameterCommand
        {
            get
            {
                if (null == m_oAddReuseParameterCommand)
                    m_oAddReuseParameterCommand = new RelayCommand(AddReuseParameterExecute);
                return m_oAddReuseParameterCommand;
            }
        }

        public void AddReuseParameterExecute()
        {
            // If the last ReuseParameters value is not what we expect add a new one
            if ((null != ReuseParameters) && (ReuseParameters.Count > 0) && !(ReuseParameters[ReuseParameters.Count - 1].Value.Equals(FINAL_LB_VALUE)))
                ReuseParameters.Add(new ObservableString(FINAL_LB_VALUE));
        }
        #endregion

        #region DeleteReuseParameterCommand
        RelayCommand<ObservableString> m_oDeleteReuseParameterCommand;

        public ICommand DeleteReuseParameterCommand
        {
            get
            {
                if (null == m_oDeleteReuseParameterCommand)
                    m_oDeleteReuseParameterCommand = new RelayCommand<ObservableString>(DeleteReuseParameterExecute);
                return m_oDeleteReuseParameterCommand;
            }
        }

        public void DeleteReuseParameterExecute(ObservableString oString)
        {
            if ((null != oString) && !oString.Value.Equals(FINAL_LB_VALUE))
                ReuseParameters.Remove(oString);
        }
        #endregion

        #endregion

        protected const String FINAL_LB_VALUE = "Add a Value";

        public WSDLOutputViewModel()
        {
            SOAPTemplate = new FileControlViewModel();
            SOAPTemplate.Title = "Choose the template SOAP request";
            SOAPTemplate.DefaultExtension = ".xml";
            SOAPTemplate.Filter = "XML files (.xml)|*.xml";
            SOAPTemplate.UseRelativePaths = true;
            SOAPTemplate.Filename = Path.Combine(Fuzzsaw.ResourcesDirectory, Fuzzsaw.DefaultSoapTemplateFilename);

            ReuseParameters = new ObservableCollection<ObservableString>();
            ReuseParameters.Add(new ObservableString(FINAL_LB_VALUE));

            FileStore = new FileStoreControlViewModel();
            FileStore.DirectoryName = Fuzzsaw.DefaultOutputDir;
            FileStore.FileExtension = Fuzzsaw.DefaultOutputExt;
            FileStore.Tolerance = "0";
        }

        #region IOutputHandler Members

        public Type GetDataOutputHandlerItemType()
        {
            return typeof(Fuzzware.Schemas.AutoGenerated.OutputToWebService);
        }

        public EvaluationMethod EvaluationMethod
        {
            get
            {
                OutputToWebService oOutputToWebService = new OutputToWebService();
                oOutputToWebService.SOAPRequestTemplate = SOAPTemplate.Filename;
                oOutputToWebService.ReuseResponseParameters = null;
                // There is always the last 'Add a Value'
                if(ReuseParameters.Count > 1)
                {
                    oOutputToWebService.ReuseResponseParameters = new string[ReuseParameters.Count];
                    for(int i = 0; i < ReuseParameters.Count - 1; i++)
                        oOutputToWebService.ReuseResponseParameters[i] = ReuseParameters[i].Value;
                }
                oOutputToWebService.UniqueResponses = FileStore.GetFileStoreWithTolerance();
                m_oEvaluationMethod.Item = oOutputToWebService;

                return m_oEvaluationMethod;
            }
            set
            {
                if (!(value.Item is Fuzzware.Schemas.AutoGenerated.OutputToWebService))
                    return;

                m_oEvaluationMethod = value;
                OutputToWebService oOutputToWebService = (Fuzzware.Schemas.AutoGenerated.OutputToWebService)m_oEvaluationMethod.Item;

                SOAPTemplate.Filename = oOutputToWebService.SOAPRequestTemplate;
                
                ReuseParameters.Clear();
                for(int i = 0; (null != oOutputToWebService.ReuseResponseParameters) && (i < oOutputToWebService.ReuseResponseParameters.Length); i++)
                {
                    if(!String.IsNullOrEmpty(oOutputToWebService.ReuseResponseParameters[i]))
                        ReuseParameters.Add(new ObservableString(oOutputToWebService.ReuseResponseParameters[i]));
                }
                ReuseParameters.Add(new ObservableString(FINAL_LB_VALUE));

                FileStore.SetFileStoreWithTolerance(oOutputToWebService.UniqueResponses);
            }
        }

        #endregion
    }
}
