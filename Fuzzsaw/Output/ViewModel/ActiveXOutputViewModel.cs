using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.IO;
using System.Windows;
using Fuzzware.Fuzzsaw.Common.ViewModel;
using Fuzzware.Schemas.AutoGenerated;

namespace Fuzzware.Fuzzsaw.Output.ViewModel
{
    public class ActiveXOutputViewModel : OutputBaseViewModel, IOutputHandler
    {
        #region Dependency Properties

        static readonly DependencyProperty ScriptTemplateProperty = DependencyProperty.Register("ScriptTemplate", typeof(FileControlViewModel), typeof(ActiveXOutputViewModel));
        public FileControlViewModel ScriptTemplate
        {
            get { return (FileControlViewModel)GetValue(ScriptTemplateProperty); }
            set { SetValue(ScriptTemplateProperty, value); }
        }

        static readonly DependencyProperty ExeOutputProperty = DependencyProperty.Register("ExeOutput", typeof(ExeOutputControlViewModel), typeof(ActiveXOutputViewModel));
        public ExeOutputControlViewModel ExeOutput
        {
            get { return (ExeOutputControlViewModel)GetValue(ExeOutputProperty); }
            set { SetValue(ExeOutputProperty, value); }
        }

        #endregion

        public ActiveXOutputViewModel()
        {
            // Set up the template
            ScriptTemplate = new FileControlViewModel();
            ScriptTemplate.Title = "Select a template";
            ScriptTemplate.DefaultExtension = ".htm";
            ScriptTemplate.Filter = "";
            ScriptTemplate.UseRelativePaths = true;
            // Set up the default Exe values
            ExeOutput = new ExeOutputControlViewModel();
            ExeOutput.Executable.Filename = Environment.ExpandEnvironmentVariables(@"%HOMEDRIVE%\Program Files\Internet Explorer\iexplore.exe");
            ExeOutput.FileStore.FileExtension = "htm";
            // Set the delays
            ExeOutput.ProcessDelay = "7000";
            ExeOutput.CloseDelay = "400";
            // Add the close action
            WindowActionsViewModel oCloseAction = new WindowActionsViewModel();
            oCloseAction.WindowTitle = "Internet Explorer";
            oCloseAction.Keystrokes.Clear();
            WindowActionKeystrokeViewModel oKeyStroke = null;
            for(int i = 0; i < 3; i++)
            {
                oKeyStroke = new WindowActionKeystrokeViewModel();
                oKeyStroke.Keys = "{TAB}";
                oCloseAction.Keystrokes.Add(oKeyStroke);
            }
            oKeyStroke = new WindowActionKeystrokeViewModel();
            oKeyStroke.Keys = "{ENTER}";
            oCloseAction.Keystrokes.Add(oKeyStroke);
            ExeOutput.CloseActions.Clear();
            ExeOutput.CloseActions.Add(oCloseAction);

        }

        #region IOutputHandler Members

        public Type GetDataOutputHandlerItemType()
        {
            return typeof(Fuzzware.Schemas.AutoGenerated.OutputToCOM);
        }

        public EvaluationMethod EvaluationMethod
        {
            get
            {
                OutputToCOM oOutputToCOM = new OutputToCOM();
                OutputToCOMEvaluateInScript oActiveXOutput = new OutputToCOMEvaluateInScript();
                oActiveXOutput.ActiveXScriptTemplate = ScriptTemplate.Filename;
                oActiveXOutput.OutputToExe = ExeOutput.GetOutputToExe();
                oOutputToCOM.Item = oActiveXOutput;
                m_oEvaluationMethod.Item = oOutputToCOM;

                return m_oEvaluationMethod;
            }
            set
            {
                if (!(value.Item is Fuzzware.Schemas.AutoGenerated.OutputToCOM))
                    return;

                m_oEvaluationMethod = value;
                OutputToCOM oOutputToCOM = (Fuzzware.Schemas.AutoGenerated.OutputToCOM)m_oEvaluationMethod.Item;
                if (!(oOutputToCOM.Item is OutputToCOMEvaluateInScript))
                    return;
                OutputToCOMEvaluateInScript oActiveXOutput = oOutputToCOM.Item as OutputToCOMEvaluateInScript;
                if(!String.IsNullOrEmpty(oActiveXOutput.ActiveXScriptTemplate))
                    ScriptTemplate.Filename = oActiveXOutput.ActiveXScriptTemplate;
                ExeOutput = new ExeOutputControlViewModel(oActiveXOutput.OutputToExe);
            }
        }

        #endregion
    }
}
