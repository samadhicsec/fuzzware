using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Windows;
using System.Windows.Input;
using Fuzzware.Fuzzsaw.Common;
using Fuzzware.Fuzzsaw.Common.ViewModel;
using Fuzzware.Schemas.AutoGenerated;

namespace Fuzzware.Fuzzsaw.PropertiesWindows.ViewModel
{
    public class ProjectPropertiesViewModel : ViewModelBase
    {
        #region Dependency Properties

        static readonly DependencyProperty OutputEncodingProperty = DependencyProperty.Register("OutputEncoding", typeof(string), typeof(ProjectPropertiesViewModel));
        /// <summary>
        /// The Output Encoding
        /// </summary>
        public string OutputEncoding
        {
            get { return (String)GetValue(OutputEncodingProperty); }
            set { SetValue(OutputEncodingProperty, value); }
        }

        static readonly DependencyProperty OmitXmlDeclarationProperty = DependencyProperty.Register("OmitXmlDeclaration", typeof(bool), typeof(ProjectPropertiesViewModel));
        /// <summary>
        /// Whether or not to omit the XML declaration when outputting
        /// </summary>
        public bool OmitXmlDeclaration
        {
            get { return (bool)GetValue(OmitXmlDeclarationProperty); }
            set { SetValue(OmitXmlDeclarationProperty, value); }
        }

        static readonly DependencyProperty OmitXmlCommentsProperty = DependencyProperty.Register("OmitXmlComments", typeof(bool), typeof(ProjectPropertiesViewModel));
        /// <summary>
        /// Whether or not to omit the XML Comments when outputting
        /// </summary>
        public bool OmitXmlComments
        {
            get { return (bool)GetValue(OmitXmlCommentsProperty); }
            set { SetValue(OmitXmlCommentsProperty, value); }
        }

        static readonly DependencyProperty FormatXMLProperty = DependencyProperty.Register("FormatXML", typeof(bool), typeof(ProjectPropertiesViewModel));
        /// <summary>
        /// Whether or not to format the XML with line breaks and indentations
        /// </summary>
        public bool FormatXML
        {
            get { return (bool)GetValue(FormatXMLProperty); }
            set { SetValue(FormatXMLProperty, value); }
        }

        static readonly DependencyProperty PreOutputUserCodeProperty = DependencyProperty.Register("PreOutputUserCode", typeof(UserDefinedCodeControlViewModel), typeof(ProjectPropertiesViewModel));
        /// <summary>
        /// Any user-defined pre-output code
        /// </summary>
        public UserDefinedCodeControlViewModel PreOutputUserCode
        {
            get { return (UserDefinedCodeControlViewModel)GetValue(PreOutputUserCodeProperty); }
            set { SetValue(PreOutputUserCodeProperty, value); }
        }

        //static readonly DependencyProperty LogDirectoryProperty = DependencyProperty.Register("LogDirectory", typeof(string), typeof(GeneralPropertiesViewModel));
        ///// <summary>
        ///// The Log Directory
        ///// </summary>
        //public string LogDirectory
        //{
        //    get { return (string)GetValue(LogDirectoryProperty); }
        //    set { SetValue(LogDirectoryProperty, value); }
        //}

        #endregion

        public ProjectPropertiesViewModel()
        {
            OutputEncoding = "us-ascii";
            OmitXmlDeclaration = true;
            OmitXmlComments = true;
            FormatXML = false;

            PreOutputUserCode = new UserDefinedCodeControlViewModel();

            //LogDirectory = Fuzzsaw.LogDirectory;
        }

        public ProjectPropertiesViewModel(Configuration oConfig) : this()
        {
            OutputEncoding = oConfig.Output.ConvertFromXML.OutputEncoding;
            OmitXmlDeclaration = oConfig.Output.ConvertFromXML.OmitXMLDeclaration;
            OmitXmlComments = oConfig.Output.ConvertFromXML.OmitComments;
            FormatXML = oConfig.Output.ConvertFromXML.FormatXML;

            if((null != oConfig.Output.PreOutput) && (null != oConfig.Output.PreOutput.UserDefinedPreOutput))
                PreOutputUserCode = new UserDefinedCodeControlViewModel(oConfig.Output.PreOutput.UserDefinedPreOutput);

            //LogDirectory = oConfig.logDirectory;
        }

        public void UpdateConfig(Configuration oConfig)
        {
            oConfig.Output.ConvertFromXML.OutputEncoding = OutputEncoding;
            oConfig.Output.ConvertFromXML.OmitXMLDeclaration = OmitXmlDeclaration;
            oConfig.Output.ConvertFromXML.OmitComments = OmitXmlComments;
            oConfig.Output.ConvertFromXML.FormatXML = FormatXML;

            if (PreOutputUserCode.Assemblies.Filenames.Count == 0)
                oConfig.Output.PreOutput = null;
            else
            {
                if(null == oConfig.Output.PreOutput)
                    oConfig.Output.PreOutput = new PreOutput();
                oConfig.Output.PreOutput.UserDefinedPreOutput = PreOutputUserCode.GetUserDefinedCode();
            }

            //oConfig.logDirectory = LogDirectory;
        }
    }
}
