using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.ComponentModel;
using System.Windows;
using System.Windows.Input;
using Fuzzware.Fuzzsaw.Common;
using Fuzzware.Fuzzsaw.Common.ViewModel;
using Fuzzware.Schemas.AutoGenerated;

namespace Fuzzware.Fuzzsaw.Execution.ViewModel
{
    public class ExecuteControlViewModel : ViewModelBase, IDataErrorInfo
    {
        #region Dependency Properties

        static readonly DependencyProperty StartStateProperty = DependencyProperty.Register("StartState", typeof(string), typeof(ExecuteControlViewModel));
        /// <summary>
        /// The Start state
        /// </summary>
        public string StartState
        {
            get { return (string)GetValue(StartStateProperty); }
            set { SetValue(StartStateProperty, value); }
        }

        static readonly DependencyProperty EndStateProperty = DependencyProperty.Register("EndState", typeof(string), typeof(ExecuteControlViewModel));
        /// <summary>
        /// The End state
        /// </summary>
        public string EndState
        {
            get { return (string)GetValue(EndStateProperty); }
            set { SetValue(EndStateProperty, value); }
        }

        static readonly DependencyProperty TestModeProperty = DependencyProperty.Register("TestMode", typeof(OnOffControlViewModel), typeof(ExecuteControlViewModel));
        /// <summary>
        /// Whether or not TestMode is being used
        /// </summary>
        public OnOffControlViewModel TestMode
        {
            get { return (OnOffControlViewModel)GetValue(TestModeProperty); }
            set { SetValue(TestModeProperty, value); }
        }

        static readonly DependencyProperty OriginalFileProperty = DependencyProperty.Register("OriginalFile", typeof(FileControlViewModel), typeof(ExecuteControlViewModel));
        /// <summary>
        /// The Original File to compare the test case to
        /// </summary>
        public FileControlViewModel OriginalFile
        {
            get { return (FileControlViewModel)GetValue(OriginalFileProperty); }
            set { SetValue(OriginalFileProperty, value); }
        }

        #endregion

        #region Commands

        //#region Execute
        //RelayCommand m_oExecuteCommand;

        ///// <summary>
        ///// Execute the fuzzer
        ///// </summary>
        //public ICommand ExecuteCommand
        //{
        //    get
        //    {
        //        if (null == m_oExecuteCommand)
        //            m_oExecuteCommand = new RelayCommand(ExecuteExecute);
        //        return m_oExecuteCommand;
        //    }
        //}

        //public void ExecuteExecute()
        //{
        //    ((MainWindow2)Application.Current.MainWindow).ExecuteFuzzer();
        //}
        //#endregion

        #endregion

        public ExecuteControlViewModel()
        {
            OriginalFile = new FileControlViewModel();
            OriginalFile.Title = "Comparison File";
            OriginalFile.UseRelativePaths = true;

            TestMode = new OnOffControlViewModel();
        }

        public void ApplyConfiguration(Configuration oConfig)
        {
            if (null == oConfig)
                return;

            StartState = "";
            EndState = "";
            if (null != oConfig.Input)
            {
                StartState = StateTypeToString(oConfig.Input.StartState);
                EndState = StateTypeToString(oConfig.Input.EndState);
            }
            TestMode.On = oConfig.testConfig;
            OriginalFile.Filename = oConfig.originalFile;
        }

        /// <summary>
        /// Update the configuration with the values in this View Model
        /// </summary>
        public void UpdateConfiguration(Configuration oConfig)
        {
            if (null == oConfig)
                return;
            // Save the Configuration options

            // Save state
            StateType outState = null;
            GetStateFromString(StartState, out outState);
            oConfig.Input.StartState = outState;
            GetStateFromString(EndState, out outState);
            oConfig.Input.EndState = outState;

            // Save Test Mode
            oConfig.testConfig = TestMode.On;
            oConfig.originalFile = OriginalFile.Filename;
        }

        /// <summary>
        /// Convert StateType to string
        /// </summary>
        private String StateTypeToString(StateType State)
        {
            if (null == State)
                return null;
            else
                return (String.IsNullOrEmpty(State.NamespacePrefix)?"":(State.NamespacePrefix + "-")) +
                        State.Name + "-" +
                        State.Index + "-" +
                        State.FuzzerType + "-" +
                        State.FuzzerIndex.ToString(); 
        }

        /// <summary>
        /// Convert string to StateType
        /// </summary>
        private static bool GetStateFromString(String StateString, out StateType oState)
        {
            // State has form pfx-NodeName-NodeIndex-Fuzzer-FuzzIndex
            oState = null;
            if (String.IsNullOrEmpty(StateString))
                return true;

            StateType oRetState = new StateType();
            uint val = 0;

            // Try to parse out a valid state
            string[] StateParts = StateString.Split('-');
            if (4 == StateParts.Length)
            {
                // Assume there is no prefix, and copy string array to an array of length 5.
                String[] NewArray = new string[5];
                Array.Copy(StateParts, 0, NewArray, 1, 4);
                NewArray[0] = "";
                StateParts = NewArray;
            }
            if (StateParts.Length != 5)
                return false;

            // Parse out the namespace prefix.  It is allowed to be empty.
            if (!String.IsNullOrEmpty(StateParts[0]))
                oRetState.NamespacePrefix = StateParts[0];

            // Parse out the name
            if (String.IsNullOrEmpty(StateParts[1]))
                return false;
            oRetState.Name = StateParts[1];

            // Parse out the node index
            if (String.IsNullOrEmpty(StateParts[2]))
                return false;
            if (!StateParts[2].Equals("All") && !UInt32.TryParse(StateParts[2], out val))
                return false;
            oRetState.Index = StateParts[2];

            // Parse out the fuzzer type
            if (String.IsNullOrEmpty(StateParts[3]))
                return false;
            oRetState.FuzzerType = StateParts[3];

            // Parse out the fuzzer index
            if (String.IsNullOrEmpty(StateParts[4]))
                return false;
            if (!UInt32.TryParse(StateParts[4], out val))
                return false;
            oRetState.FuzzerIndex = val;

            oState = oRetState;
            return true;
        }

        #region IDataErrorInfo Members

        public string Error
        {
            get { throw new NotImplementedException(); }
        }

        public string this[string columnName]
        {
            get 
            {
                String error = null;
                StateType oState = null;
                if (columnName.Equals(StartStateProperty.Name))
                {
                    if (!GetStateFromString(StartState, out oState))
                        error = "Invalid state";
                }
                else if (columnName.Equals(EndStateProperty.Name))
                {
                    if (!GetStateFromString(EndState, out oState))
                        error = "Invalid state";
                }
                return error;
            }
        }

        #endregion
    }
}
