using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Text;
using System.Windows;
using System.Windows.Input;
using Fuzzware.Fuzzsaw.Common;
using Fuzzware.Fuzzsaw.Common.ViewModel;
using Fuzzware.Schemas.AutoGenerated;

namespace Fuzzware.Fuzzsaw.Execution.ViewModel
{
    public class MonitoringControlViewModel : ViewModelBase
    {
        #region Dependency Properties

        static readonly DependencyProperty RemoteHostnameProperty = DependencyProperty.Register("RemoteHostname", typeof(string), typeof(MonitoringControlViewModel));
        /// <summary>
        /// The RemoteHostname
        /// </summary>
        public string RemoteHostname
        {
            get { return (string)GetValue(RemoteHostnameProperty); }
            set { SetValue(RemoteHostnameProperty, value); }
        }

        static readonly DependencyProperty RemoteUsernameProperty = DependencyProperty.Register("RemoteUsername", typeof(string), typeof(MonitoringControlViewModel));
        /// <summary>
        /// The RemoteUsername
        /// </summary>
        public string RemoteUsername
        {
            get { return (string)GetValue(RemoteUsernameProperty); }
            set { SetValue(RemoteUsernameProperty, value); }
        }

        static readonly DependencyProperty RemotePasswordProperty = DependencyProperty.Register("RemotePassword", typeof(string), typeof(MonitoringControlViewModel));
        /// <summary>
        /// The RemotePassword
        /// </summary>
        public string RemotePassword
        {
            get { return (string)GetValue(RemotePasswordProperty); }
            set { SetValue(RemotePasswordProperty, value); }
        }

        static readonly DependencyProperty UsePostMortemDebuggingProperty = DependencyProperty.Register("UsePostMortemDebugging", typeof(OnOffControlViewModel), typeof(MonitoringControlViewModel));
        /// <summary>
        /// Whether to use post mortem debugging
        /// </summary>
        public OnOffControlViewModel UsePostMortemDebugging
        {
            get { return (OnOffControlViewModel)GetValue(UsePostMortemDebuggingProperty); }
            set { SetValue(UsePostMortemDebuggingProperty, value); }
        }

        static readonly DependencyProperty PMDOutputDirProperty = DependencyProperty.Register("PMDOutputDir", typeof(DirectoryControlViewModel), typeof(MonitoringControlViewModel));
        /// <summary>
        /// The directory to use post mortem debugging crash dumps
        /// </summary>
        public DirectoryControlViewModel PMDOutputDir
        {
            get { return (DirectoryControlViewModel)GetValue(PMDOutputDirProperty); }
            set { SetValue(PMDOutputDirProperty, value); }
        }

        static readonly DependencyProperty UseDebuggerProperty = DependencyProperty.Register("UseDebugger", typeof(OnOffControlViewModel), typeof(MonitoringControlViewModel));
        /// <summary>
        /// Whether to run the exe in a debugger
        /// </summary>
        public OnOffControlViewModel UseDebugger
        {
            get { return (OnOffControlViewModel)GetValue(UseDebuggerProperty); }
            set { SetValue(UseDebuggerProperty, value); }
        }

        static readonly DependencyProperty KeywordListsProperty = DependencyProperty.Register("KeywordLists", typeof(ObservableCollection<KeywordListViewModel>), typeof(MonitoringControlViewModel));
        /// <summary>
        /// The KeywordLists collection
        /// </summary>
        public ObservableCollection<KeywordListViewModel> KeywordLists
        {
            get { return (ObservableCollection<KeywordListViewModel>)GetValue(KeywordListsProperty); }
            set { SetValue(KeywordListsProperty, value); }
        }

        static readonly DependencyProperty OnTerminateActionsProperty = DependencyProperty.Register("OnTerminateActions", typeof(ObservableCollection<OnTerminateActionsViewModel>), typeof(MonitoringControlViewModel));
        /// <summary>
        /// The OnTerminateActions collection
        /// </summary>
        public ObservableCollection<OnTerminateActionsViewModel> OnTerminateActions
        {
            get { return (ObservableCollection<OnTerminateActionsViewModel>)GetValue(OnTerminateActionsProperty); }
            set { SetValue(OnTerminateActionsProperty, value); }
        }

        #endregion

        #region Commands

        #region AddKeywordList
        RelayCommand m_oAddKeywordListCommand;

        /// <summary>
        /// Add a keyword list
        /// </summary>
        public ICommand AddKeywordListCommand
        {
            get
            {
                if (null == m_oAddKeywordListCommand)
                    m_oAddKeywordListCommand = new RelayCommand(AddKeywordListExecute);
                return m_oAddKeywordListCommand;
            }
        }

        public void AddKeywordListExecute()
        {
            KeywordLists.Add(new KeywordListViewModel());
        }
        #endregion

        #region RemoveKeywordList
        RelayCommand<KeywordListViewModel> m_oRemoveKeywordListCommand;

        /// <summary>
        /// Remove a keyword list from the collection
        /// </summary>
        public ICommand RemoveKeywordListCommand
        {
            get
            {
                if (null == m_oRemoveKeywordListCommand)
                    m_oRemoveKeywordListCommand = new RelayCommand<KeywordListViewModel>(RemoveKeywordListExecute);
                return m_oRemoveKeywordListCommand;
            }
        }

        public void RemoveKeywordListExecute(KeywordListViewModel KeywordList)
        {
            KeywordLists.Remove(KeywordList);
        }
        #endregion

        #region AddProcess
        RelayCommand m_oAddProcessCommand;

        /// <summary>
        /// Add a process to monitor
        /// </summary>
        public ICommand AddProcessCommand
        {
            get
            {
                if (null == m_oAddProcessCommand)
                    m_oAddProcessCommand = new RelayCommand(AddProcessExecute);
                return m_oAddProcessCommand;
            }
        }

        public void AddProcessExecute()
        {
            OnTerminateActions.Add(new OnTerminateActionsViewModel());
        }
        #endregion

        #region RemoveProcess
        RelayCommand<OnTerminateActionsViewModel> m_oRemoveProcessCommand;

        /// <summary>
        /// Remove a keyword list from the collection
        /// </summary>
        public ICommand RemoveProcessCommand
        {
            get
            {
                if (null == m_oRemoveProcessCommand)
                    m_oRemoveProcessCommand = new RelayCommand<OnTerminateActionsViewModel>(RemoveProcessExecute);
                return m_oRemoveProcessCommand;
            }
        }

        public void RemoveProcessExecute(OnTerminateActionsViewModel Process)
        {
            OnTerminateActions.Remove(Process);
        }
        #endregion

        #endregion

        public MonitoringControlViewModel()
        {
            UsePostMortemDebugging = new OnOffControlViewModel();
            PMDOutputDir = new DirectoryControlViewModel();
            UseDebugger = new OnOffControlViewModel();

            KeywordLists = new ObservableCollection<KeywordListViewModel>();
            OnTerminateActions = new ObservableCollection<OnTerminateActionsViewModel>();

            InitValues();
        }

        /// <summary>
        /// Initialisation valus in case we aren't given any
        /// </summary>
        private void InitValues()
        {
            RemoteHostname = "";
            RemoteUsername = "";
            RemotePassword = "";

            UsePostMortemDebugging.On = false;
            PMDOutputDir.DirectoryName = "crashes";
            UseDebugger.On = false;
            KeywordLists.Clear();
            OnTerminateActions.Clear();
        }

        /// <summary>
        /// Apply the configuration values for monitoring
        /// </summary>
        public void ApplyConfiguration(Configuration oConfig)
        {
            InitValues();

            if (null == oConfig)
                return;

            // Set the output to debugger option (note this is in a different section to the Monitoring options)
            if ((null != oConfig.Output) && (null != oConfig.Output.EvaluationMethod) && 
                (oConfig.Output.EvaluationMethod.Item is OutputToExe))
            {
                if ((oConfig.Output.EvaluationMethod.Item as OutputToExe).ExePathAndName.UseDebugger)
                    UseDebugger.On = true;
            }

            // The rest of the options are specified in the Monitoring section, so make sure it exists
            if (null == oConfig.Output.Monitoring)
                return;

            // Set the remote creds
            if (null != oConfig.Output.Monitoring.RemoteCredentials)
            {
                RemoteHostname = oConfig.Output.Monitoring.RemoteCredentials.RemoteHostname;
                RemoteUsername = oConfig.Output.Monitoring.RemoteCredentials.RemoteUsername;
                RemotePassword = oConfig.Output.Monitoring.RemoteCredentials.RemotePassword;
            }

            // Set the post-mortem debugger
            if (null != oConfig.Output.Monitoring.PostMortemDebugger)
            {
                UsePostMortemDebugging.On = true;
                PMDOutputDir.DirectoryName = oConfig.Output.Monitoring.PostMortemDebugger.CrashOutputDir;
            }

            // Set monitoring the event log
            if (null != oConfig.Output.Monitoring.EventLog)
            {
                KeywordLists.Clear();
                for (int i = 0; i < oConfig.Output.Monitoring.EventLog.Length; i++)
                {
                    KeywordListViewModel oKeywordListViewModel = new KeywordListViewModel();
                    oKeywordListViewModel.Keywords = new ObservableCollection<ObservableString>();
                    for (int j = 0; j < oConfig.Output.Monitoring.EventLog[i].Length; j++)
                        oKeywordListViewModel.Keywords.Add(new ObservableString(oConfig.Output.Monitoring.EventLog[i][j]));
                    KeywordLists.Add(oKeywordListViewModel);
                }
            }

            // Set the actions on terminate
            if (null != oConfig.Output.Monitoring.ProcessTerminationMonitor)
            {
                OnTerminateActions.Clear();
                for (int i = 0; i < oConfig.Output.Monitoring.ProcessTerminationMonitor.Length; i++)
                {
                    OnTerminateActionsViewModel oAction = new OnTerminateActionsViewModel();
                    if((null != oConfig.Output.Monitoring.ProcessTerminationMonitor[i].TargetProcess) && (null != oConfig.Output.Monitoring.ProcessTerminationMonitor[i].TargetProcess.Item))
                        oAction.Process = oConfig.Output.Monitoring.ProcessTerminationMonitor[i].TargetProcess.Item.ToString();
                    ActionsToTake oActionsToTake = oConfig.Output.Monitoring.ProcessTerminationMonitor[i].ActionsToTake;
                    if (null != oActionsToTake)
                    {
                        oAction.PauseFuzzing = oActionsToTake.PauseFuzzing;
                        oAction.ResumeFuzzing = oActionsToTake.ResumeFuzzing;
                        for (int j = 0; (null != oActionsToTake.RunCommand) && (j < oActionsToTake.RunCommand.Length); j++)
                            oAction.Actions.Add(new ObservableString(oActionsToTake.RunCommand[j]));
                    }
                    OnTerminateActions.Add(oAction);
                }
            }
        }

        /// <summary>
        /// Update the configuration with the values in this View Model
        /// </summary>
        public void UpdateConfiguration(Configuration oConfig)
        {
            if (null == oConfig)
                return;

            if (null == oConfig.Output.Monitoring)
                oConfig.Output.Monitoring = new Monitoring();

            // Store remote creds
            if (null == oConfig.Output.Monitoring.RemoteCredentials)
                oConfig.Output.Monitoring.RemoteCredentials = new MonitoringRemoteCredentials();
            oConfig.Output.Monitoring.RemoteCredentials.RemoteHostname = RemoteHostname;
            oConfig.Output.Monitoring.RemoteCredentials.RemoteUsername = RemoteUsername;
            oConfig.Output.Monitoring.RemoteCredentials.RemotePassword = RemotePassword;
            // If the hostname and username are empty then drop the remote creds all together
            if (String.IsNullOrEmpty(RemoteHostname) || String.IsNullOrEmpty(RemoteUsername))
                oConfig.Output.Monitoring.RemoteCredentials = null;

            // Set Post-Mortem debugging
            if (UsePostMortemDebugging.On)
            {
                oConfig.Output.Monitoring.PostMortemDebugger = new PostMortemDebugger();
                oConfig.Output.Monitoring.PostMortemDebugger.CrashOutputDir = PMDOutputDir.DirectoryName;
            }
            else
                oConfig.Output.Monitoring.PostMortemDebugger = null;

            // Set use debugger with exe
            if (oConfig.Output.EvaluationMethod.Item is OutputToExe)
            {
                OutputToExe oOutputToExe = oConfig.Output.EvaluationMethod.Item as OutputToExe;
                oOutputToExe.ExePathAndName.UseDebugger = UseDebugger.On;
            }

            // Store Monitoring Event Log options
            if (KeywordLists.Count == 0)
                oConfig.Output.Monitoring.EventLog = null;
            else
            {
                oConfig.Output.Monitoring.EventLog = new string[KeywordLists.Count][];
                for (int i = 0; (KeywordLists.Count > 0) && (i < KeywordLists.Count); i++)
                {
                    int KeywordCount = KeywordLists[i].Keywords.Count;
                    oConfig.Output.Monitoring.EventLog[i] = new string[KeywordCount];
                    for (int j = 0; j < KeywordCount; j++)
                        oConfig.Output.Monitoring.EventLog[i][j] = KeywordLists[i].Keywords[j].Value;
                }
            }

            // Store On Process Terminate options
            if (OnTerminateActions.Count == 0)
                oConfig.Output.Monitoring.ProcessTerminationMonitor = null;
            else
            {
                oConfig.Output.Monitoring.ProcessTerminationMonitor = new ProcessTerminationMonitor[OnTerminateActions.Count];
                for (int i = 0; i < OnTerminateActions.Count; i++)
                {
                    ProcessTerminationMonitor oProcessTerminationMonitor = new ProcessTerminationMonitor();
                    // Set target process
                    oProcessTerminationMonitor.TargetProcess = new TargetProcess();
                    uint processid = 0;
                    if (UInt32.TryParse(OnTerminateActions[i].Process, out processid))
                        oProcessTerminationMonitor.TargetProcess.Item = processid;
                    else
                        oProcessTerminationMonitor.TargetProcess.Item = OnTerminateActions[i].Process;
                    // Set actions to take
                    oProcessTerminationMonitor.ActionsToTake = new ActionsToTake();
                    oProcessTerminationMonitor.ActionsToTake.PauseFuzzing = OnTerminateActions[i].PauseFuzzing;
                    oProcessTerminationMonitor.ActionsToTake.ResumeFuzzing = OnTerminateActions[i].ResumeFuzzing;
                    oProcessTerminationMonitor.ActionsToTake.RunCommand = new string[OnTerminateActions[i].Actions.Count];
                    for (int j = 0; j < OnTerminateActions[i].Actions.Count; j++)
                        oProcessTerminationMonitor.ActionsToTake.RunCommand[j] = OnTerminateActions[i].Actions[j].Value;

                    oConfig.Output.Monitoring.ProcessTerminationMonitor[i] = oProcessTerminationMonitor;
                }
            }
        }
    }
}
