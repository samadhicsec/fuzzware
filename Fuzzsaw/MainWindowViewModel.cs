using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Windows;
using System.Windows.Input;
using Fuzzware.Fuzzsaw.Common;
using Fuzzware.Fuzzsaw.Input;
using Fuzzware.Fuzzsaw.Input.ViewModel;
using Fuzzware.Fuzzsaw.FuzzingConfig.ViewModel;
using Fuzzware.Fuzzsaw.Output;
using Fuzzware.Fuzzsaw.Output.ViewModel;
using Fuzzware.Fuzzsaw.Execution.ViewModel;
using Fuzzware.Fuzzsaw.PropertiesWindows.ViewModel;
using Fuzzware.Schemas.AutoGenerated;

namespace Fuzzware.Fuzzsaw
{
    public class MainWindowViewModel : ViewModelBase
    {
        #region Dependency Properties

        #region Input View Models
        static readonly DependencyProperty InputSelectionViewModelProperty = DependencyProperty.Register("InputSelectionViewModel", typeof(InputSelectionViewModel), typeof(MainWindowViewModel));
        /// <summary>
        /// The Input Selection View Model
        /// </summary>
        public InputSelectionViewModel InputSelectionViewModel
        {
            get { return (InputSelectionViewModel)GetValue(InputSelectionViewModelProperty); }
            set { SetValue(InputSelectionViewModelProperty, value); }
        }
        
        static readonly DependencyProperty XMLInputViewModelProperty = DependencyProperty.Register("XMLInputViewModel", typeof(XMLInputViewModel), typeof(MainWindowViewModel));
        /// <summary>
        /// The XML Input View Model
        /// </summary>
        public XMLInputViewModel XMLInputViewModel
        {
            get { return (XMLInputViewModel)GetValue(XMLInputViewModelProperty); }
            set { SetValue(XMLInputViewModelProperty, value); }
        }

        static readonly DependencyProperty C2XInputViewModelProperty = DependencyProperty.Register("C2XInputViewModel", typeof(C2XInputViewModel), typeof(MainWindowViewModel));
        /// <summary>
        /// The C2X Input View Model
        /// </summary>
        public C2XInputViewModel C2XInputViewModel
        {
            get { return (C2XInputViewModel)GetValue(C2XInputViewModelProperty); }
            set { SetValue(C2XInputViewModelProperty, value); }
        }

        static readonly DependencyProperty XMLNetworkInputViewModelProperty = DependencyProperty.Register("XMLNetworkInputViewModel", typeof(XMLInputViewModel), typeof(MainWindowViewModel));
        /// <summary>
        /// The XML Network Input View Model
        /// </summary>
        public XMLInputViewModel XMLNetworkInputViewModel
        {
            get { return (XMLInputViewModel)GetValue(XMLNetworkInputViewModelProperty); }
            set { SetValue(XMLNetworkInputViewModelProperty, value); }
        }

        static readonly DependencyProperty C2XNetworkInputViewModelProperty = DependencyProperty.Register("C2XNetworkInputViewModel", typeof(C2XInputViewModel), typeof(MainWindowViewModel));
        /// <summary>
        /// The C2X Network Input View Model
        /// </summary>
        public C2XInputViewModel C2XNetworkInputViewModel
        {
            get { return (C2XInputViewModel)GetValue(C2XNetworkInputViewModelProperty); }
            set { SetValue(C2XNetworkInputViewModelProperty, value); }
        }

        static readonly DependencyProperty PDMLInputViewModelProperty = DependencyProperty.Register("PDMLInputViewModel", typeof(PDMLInputViewModel), typeof(MainWindowViewModel));
        /// <summary>
        /// The PDML Input View Model
        /// </summary>
        public PDMLInputViewModel PDMLInputViewModel
        {
            get { return (PDMLInputViewModel)GetValue(PDMLInputViewModelProperty); }
            set { SetValue(PDMLInputViewModelProperty, value); }
        }

        static readonly DependencyProperty WSDLInputViewModelProperty = DependencyProperty.Register("WSDLInputViewModel", typeof(WSDLInputViewModel), typeof(MainWindowViewModel));
        /// <summary>
        /// The WSDL Input View Model
        /// </summary>
        public WSDLInputViewModel WSDLInputViewModel
        {
            get { return (WSDLInputViewModel)GetValue(WSDLInputViewModelProperty); }
            set { SetValue(WSDLInputViewModelProperty, value); }
        }

        static readonly DependencyProperty ActiveXInputViewModelProperty = DependencyProperty.Register("ActiveXInputViewModel", typeof(ActiveXInputViewModel), typeof(MainWindowViewModel));
        /// <summary>
        /// The ActiveX Input View Model
        /// </summary>
        public ActiveXInputViewModel ActiveXInputViewModel
        {
            get { return (ActiveXInputViewModel)GetValue(ActiveXInputViewModelProperty); }
            set { SetValue(ActiveXInputViewModelProperty, value); }
        }

        static readonly DependencyProperty CustomInputViewModelProperty = DependencyProperty.Register("CustomInputViewModel", typeof(CustomInputViewModel), typeof(MainWindowViewModel));
        /// <summary>
        /// The Custom Input View Model
        /// </summary>
        public CustomInputViewModel CustomInputViewModel
        {
            get { return (CustomInputViewModel)GetValue(CustomInputViewModelProperty); }
            set { SetValue(CustomInputViewModelProperty, value); }
        }
        
        #endregion

        #region Fuzzing Data Configuration View Model

        static readonly DependencyProperty TypesConfigViewModelProperty = DependencyProperty.Register("TypesConfigViewModel", typeof(DataTypesConfigViewModel), typeof(MainWindowViewModel));
        /// <summary>
        /// The Fuzzing Data Types Configuration View Model
        /// </summary>
        public DataTypesConfigViewModel TypesConfigViewModel
        {
            get { return (DataTypesConfigViewModel)GetValue(TypesConfigViewModelProperty); }
            set { SetValue(TypesConfigViewModelProperty, value); }
        }

        static readonly DependencyProperty StructuresConfigViewModelProperty = DependencyProperty.Register("StructuresConfigViewModel", typeof(DataStructuresConfigViewModel), typeof(MainWindowViewModel));
        /// <summary>
        /// The Fuzzing Data Structures Configuration View Model
        /// </summary>
        public DataStructuresConfigViewModel StructuresConfigViewModel
        {
            get { return (DataStructuresConfigViewModel)GetValue(StructuresConfigViewModelProperty); }
            set { SetValue(StructuresConfigViewModelProperty, value); }
        }

        #endregion

        #region Output View Models
        static readonly DependencyProperty OutputSelectionViewModelProperty = DependencyProperty.Register("OutputSelectionViewModel", typeof(OutputSelectionViewModel), typeof(MainWindowViewModel));
        /// <summary>
        /// The Output Selection View Model
        /// </summary>
        public OutputSelectionViewModel OutputSelectionViewModel
        {
            get { return (OutputSelectionViewModel)GetValue(OutputSelectionViewModelProperty); }
            set { SetValue(OutputSelectionViewModelProperty, value); }
        }
        
        static readonly DependencyProperty OutputFileStoreViewModelProperty = DependencyProperty.Register("OutputFileStoreViewModel", typeof(OutputFileStoreViewModel), typeof(MainWindowViewModel));
        /// <summary>
        /// The Output To File Store View Model
        /// </summary>
        public OutputFileStoreViewModel OutputFileStoreViewModel
        {
            get { return (OutputFileStoreViewModel)GetValue(OutputFileStoreViewModelProperty); }
            set { SetValue(OutputFileStoreViewModelProperty, value); }
        }

        static readonly DependencyProperty ExeOutputViewModelProperty = DependencyProperty.Register("ExeOutputViewModel", typeof(ExeOutputViewModel), typeof(MainWindowViewModel));
        /// <summary>
        /// The Exe Output View Model
        /// </summary>
        public ExeOutputViewModel ExeOutputViewModel
        {
            get { return (ExeOutputViewModel)GetValue(ExeOutputViewModelProperty); }
            set { SetValue(ExeOutputViewModelProperty, value); }
        }

        static readonly DependencyProperty NetworkOutputViewModelProperty = DependencyProperty.Register("NetworkOutputViewModel", typeof(NetworkOutputViewModel), typeof(MainWindowViewModel));
        /// <summary>
        /// The Network Output View Model
        /// </summary>
        public NetworkOutputViewModel NetworkOutputViewModel
        {
            get { return (NetworkOutputViewModel)GetValue(NetworkOutputViewModelProperty); }
            set { SetValue(NetworkOutputViewModelProperty, value); }
        }

        static readonly DependencyProperty WSDLOutputViewModelProperty = DependencyProperty.Register("WSDLOutputViewModel", typeof(WSDLOutputViewModel), typeof(MainWindowViewModel));
        /// <summary>
        /// The WSDL Output View Model
        /// </summary>
        public WSDLOutputViewModel WSDLOutputViewModel
        {
            get { return (WSDLOutputViewModel)GetValue(WSDLOutputViewModelProperty); }
            set { SetValue(WSDLOutputViewModelProperty, value); }
        }

        static readonly DependencyProperty ActiveXOutputViewModelProperty = DependencyProperty.Register("ActiveXOutputViewModel", typeof(ActiveXOutputViewModel), typeof(MainWindowViewModel));
        /// <summary>
        /// The ActiveX Output View Model
        /// </summary>
        public ActiveXOutputViewModel ActiveXOutputViewModel
        {
            get { return (ActiveXOutputViewModel)GetValue(ActiveXOutputViewModelProperty); }
            set { SetValue(ActiveXOutputViewModelProperty, value); }
        }

        static readonly DependencyProperty CustomOutputViewModelProperty = DependencyProperty.Register("CustomOutputViewModel", typeof(CustomOutputViewModel), typeof(MainWindowViewModel));
        /// <summary>
        /// The Custom Output View Model
        /// </summary>
        public CustomOutputViewModel CustomOutputViewModel
        {
            get { return (CustomOutputViewModel)GetValue(CustomOutputViewModelProperty); }
            set { SetValue(CustomOutputViewModelProperty, value); }
        }
        #endregion

        #region Execution View Models
        static readonly DependencyProperty MonitoringViewModelProperty = DependencyProperty.Register("MonitoringViewModel", typeof(MonitoringControlViewModel), typeof(MainWindowViewModel));
        /// <summary>
        /// The Monitoring Control View Model
        /// </summary>
        public MonitoringControlViewModel MonitoringViewModel
        {
            get { return (MonitoringControlViewModel)GetValue(MonitoringViewModelProperty); }
            set { SetValue(MonitoringViewModelProperty, value); }
        }
        
        static readonly DependencyProperty ExecutionViewModelProperty = DependencyProperty.Register("ExecutionViewModel", typeof(ExecuteControlViewModel), typeof(MainWindowViewModel));
        /// <summary>
        /// The Execution Control View Model
        /// </summary>
        public ExecuteControlViewModel ExecutionViewModel
        {
            get { return (ExecuteControlViewModel)GetValue(ExecutionViewModelProperty); }
            set { SetValue(ExecutionViewModelProperty, value); }
        }
        #endregion

        #region NavPane View Model

        static readonly DependencyProperty NavPaneViewModelProperty = DependencyProperty.Register("NavPaneViewModel", typeof(NavPaneViewModel), typeof(MainWindowViewModel));
        /// <summary>
        /// The NavPane View Model
        /// </summary>
        public NavPaneViewModel NavPaneViewModel
        {
            get { return (NavPaneViewModel)GetValue(NavPaneViewModelProperty); }
            set { SetValue(NavPaneViewModelProperty, value); }
        }

        #endregion

        #region Window Properties

        static readonly DependencyProperty TitleProperty = DependencyProperty.Register("Title", typeof(string), typeof(MainWindowViewModel));
        /// <summary>
        /// The Title of the main window
        /// </summary>
        public string Title
        {
            get { return (string)GetValue(TitleProperty); }
            set { SetValue(TitleProperty, value); }
        }

        #endregion

        #region Menu Properties

        static readonly DependencyProperty ProjectLoadedProperty = DependencyProperty.Register("ProjectLoaded", typeof(bool), typeof(MainWindowViewModel));
        /// <summary>
        /// Whether or not there is a project loaded 
        /// </summary>
        public bool ProjectLoaded
        {
            get { return (bool)GetValue(ProjectLoadedProperty); }
            set { SetValue(ProjectLoadedProperty, value); }
        }

        #endregion

        static readonly DependencyProperty WelcomeScreenProperty = DependencyProperty.Register("WelcomeScreen", typeof(WelcomeViewModel), typeof(MainWindowViewModel));
        /// <summary>
        /// The Welcome Screen
        /// </summary>
        public WelcomeViewModel WelcomeScreen
        {
            get { return (WelcomeViewModel)GetValue(WelcomeScreenProperty); }
            set { SetValue(WelcomeScreenProperty, value); }
        }

        #endregion

        #region Commands

        #region Application Commands
        #region NewProject
        RelayCommand<Window> m_oNewProjectCommand;

        /// <summary>
        /// Create a New project
        /// </summary>
        public ICommand NewProjectCommand
        {
            get
            {
                if (null == m_oNewProjectCommand)
                    m_oNewProjectCommand = new RelayCommand<Window>(NewProjectExecute);
                return m_oNewProjectCommand;
            }
        }

        public void NewProjectExecute(Window oNewProjectWindow)
        {
            if (null != m_oCurrentProject)
            {
                if (MessageBoxResult.Yes == MessageBox.Show("Would you like to save the current project?", "Save Project", MessageBoxButton.YesNo))
                    if (!SaveHelper())
                        if (MessageBoxResult.No == MessageBox.Show("There was an error saving the current project.  Do you want to continue creating a new project?", "Error", MessageBoxButton.YesNo))
                            return;
            }

            // Initialise the app to its initial state
            WindowInitialise();

            // Open a modal window to get the Project location
            //NewProjectWindow oNewProjectWindow = new NewProjectWindow();
            NewProjectViewModel oNewProjectViewModel = new NewProjectViewModel();
            oNewProjectWindow.DataContext = oNewProjectViewModel;

            bool? result = oNewProjectWindow.ShowDialog();

            if (false == result)
                return;

            // Try to open a new project
            //m_oCurrentProject = new Project(oNewProjectWindow.ProjectDir, oNewProjectWindow.ProjectName);
            m_oCurrentProject = new Project(oNewProjectViewModel.ProjectDirectory.DirectoryName);

            // If the project already exists, check if the user wants to overwrite
            if (System.IO.File.Exists(m_oCurrentProject.ConfigLocation))
                if (MessageBoxResult.No == MessageBox.Show("A project already exists at this location, do you want to overwrite it?", "Overwrite?", MessageBoxButton.YesNo))
                {
                    WindowInitialise();
                    return;
                }

            // Create the new project
            if (!m_oCurrentProject.New())
            {
                WindowInitialise();
                return;
            }

            OpenHelper();

            // Set the current page to select input
            ShowInWorkingArea(InputSelectionViewModelProperty.Name);
        }
        #endregion

        #region OpenProject
        RelayCommand m_oOpenProjectCommand;

        /// <summary>
        /// Open a project
        /// </summary>
        public ICommand OpenProjectCommand
        {
            get
            {
                if (null == m_oOpenProjectCommand)
                    m_oOpenProjectCommand = new RelayCommand(OpenProjectExecute);
                return m_oOpenProjectCommand;
            }
        }

        public void OpenProjectExecute()
        {
            if (null != m_oCurrentProject)
            {
                if (MessageBoxResult.Yes == MessageBox.Show("Would you like to save the current project?", "Save Project", MessageBoxButton.YesNo))
                    if (!SaveHelper())
                        if (MessageBoxResult.No == MessageBox.Show("There was an error saving the current project.  Do you want to continue opening another project?", "Error", MessageBoxButton.YesNo))
                            return;
            }

            // Initialise the app to its initial state
            WindowInitialise();

            // Get the user to select the project directory
            String ProjectDirectory = FileAndPathHelper.GetFolderUsingDialog("Select the project directory", Fuzzsaw.ProjectsDirectory, false);
            if (String.IsNullOrEmpty(ProjectDirectory))
                return;

            m_oCurrentProject = new Project(ProjectDirectory);

            if (!m_oCurrentProject.Open())
            {
                WindowInitialise();
                return;
            }

            OpenHelper();
        }
        #endregion

        #region SaveProject
        RelayCommand m_oSaveProjectCommand;

        /// <summary>
        /// Save the current project
        /// </summary>
        public ICommand SaveProjectCommand
        {
            get
            {
                if (null == m_oSaveProjectCommand)
                    m_oSaveProjectCommand = new RelayCommand(SaveProjectExecute);
                return m_oSaveProjectCommand;
            }
        }

        public void SaveProjectExecute()
        {
            if (!ProjectLoaded)
                return;

            if (null != m_oCurrentProject)
            {
                if (!SaveHelper())
                    MessageBox.Show("There was an error saving the current project", "Error", MessageBoxButton.OK);
            }
        }
        #endregion

        #region ShowProjectProperties
        RelayCommand<Window> m_oShowProjectPropertiesCommand;

        /// <summary>
        /// Show the current project properties
        /// </summary>
        public ICommand ShowProjectPropertiesCommand
        {
            get
            {
                if (null == m_oShowProjectPropertiesCommand)
                    m_oShowProjectPropertiesCommand = new RelayCommand<Window>(ShowProjectPropertiesExecute);
                return m_oShowProjectPropertiesCommand;
            }
        }

        public void ShowProjectPropertiesExecute(Window oWindow)
        {
            if (null == oWindow)
                return;

            ProjectPropertiesViewModel oProps = new ProjectPropertiesViewModel(m_oCurrentProject.Config);
            oWindow.DataContext = oProps;

            bool? bResult = oWindow.ShowDialog();
            if (bResult == true)
                oProps.UpdateConfig(m_oCurrentProject.Config);
        }
        #endregion

        #region CloseProject
        RelayCommand m_oCloseProjectCommand;

        /// <summary>
        /// Close the current project
        /// </summary>
        public ICommand CloseProjectCommand
        {
            get
            {
                if (null == m_oCloseProjectCommand)
                    m_oCloseProjectCommand = new RelayCommand(CloseProjectExecute);
                return m_oCloseProjectCommand;
            }
        }

        public void CloseProjectExecute()
        {
            if (null != m_oCurrentProject)
            {
                if (MessageBoxResult.Yes == MessageBox.Show("Would you like to save the current project?", "Save Project?", MessageBoxButton.YesNo))
                    if (!SaveHelper())
                        if (MessageBoxResult.No == MessageBox.Show("There was an error saving the current project.  Do you want to continue closing this project?", "Error", MessageBoxButton.YesNo))
                            return;
            }
            WindowInitialise();
        }
        #endregion

        #region ShowGeneralProperties
        RelayCommand<Window> m_oShowGeneralPropertiesCommand;

        /// <summary>
        /// Show the general properties
        /// </summary>
        public ICommand ShowGeneralPropertiesCommand
        {
            get
            {
                if (null == m_oShowGeneralPropertiesCommand)
                    m_oShowGeneralPropertiesCommand = new RelayCommand<Window>(ShowGeneralPropertiesExecute);
                return m_oShowGeneralPropertiesCommand;
            }
        }

        public void ShowGeneralPropertiesExecute(Window oWindow)
        {
            if (null == oWindow)
                return;

            GeneralPropertiesViewModel oProps = new GeneralPropertiesViewModel();
            oWindow.DataContext = oProps;

            bool? bResult = oWindow.ShowDialog();
            if (bResult == true)
                oProps.Update();
        }
        #endregion

        #region ExitApplication
        RelayCommand<System.ComponentModel.CancelEventArgs> m_oExitApplicationCommand;

        /// <summary>
        /// Should be called from the Window.Closing event handler.  Prompts for saving before closing.
        /// </summary>
        public ICommand ExitApplicationCommand
        {
            get
            {
                if (null == m_oExitApplicationCommand)
                    m_oExitApplicationCommand = new RelayCommand<System.ComponentModel.CancelEventArgs>(ExitApplicationExecute);
                return m_oExitApplicationCommand;
            }
        }

        public void ExitApplicationExecute(System.ComponentModel.CancelEventArgs e)
        {
            if (null != m_oCurrentProject)
            {
                if (MessageBoxResult.Yes == MessageBox.Show("Would you like to save the current project?", "Save Project?", MessageBoxButton.YesNo))
                    if (!SaveHelper())
                        if (MessageBoxResult.No == MessageBox.Show("There was an error saving the current project.  Do you want to continue exiting?", "Error", MessageBoxButton.YesNo))
                            e.Cancel = true;
            }
        }
        #endregion
        #endregion

        #region Navigation Commands
        #region ShowInputSelection
        RelayCommand m_oShowInputSelectionCommand;

        /// <summary>
        /// Show the Input Selection Control
        /// </summary>
        public ICommand ShowInputSelectionCommand
        {
            get
            {
                if (null == m_oShowInputSelectionCommand)
                    m_oShowInputSelectionCommand = new RelayCommand(ShowInputSelectionExecute);
                return m_oShowInputSelectionCommand;
            }
        }

        public void ShowInputSelectionExecute()
        {
            NavPaneViewModel.DeselectAll();
            NavPaneViewModel.InputSelectionSelected = true; ;
            ShowInWorkingArea(InputSelectionViewModelProperty.Name);
        }
        #endregion

        #region ShowInput
        RelayCommand m_oShowInputCommand;

        /// <summary>
        /// Show the current Input Control
        /// </summary>
        public ICommand ShowInputCommand
        {
            get
            {
                if (null == m_oShowInputCommand)
                    m_oShowInputCommand = new RelayCommand(ShowInputExecute);
                return m_oShowInputCommand;
            }
        }

        public void ShowInputExecute()
        {
            if (null != m_oCurrentInputSource)
            {
                NavPaneViewModel.DeselectAll();
                NavPaneViewModel.InputSourceSelected = true; ;
                ShowInWorkingArea(m_oCurrentInputSource.Name);
            }
        }
        #endregion

        #region ShowDataTypesConfig
        RelayCommand m_oShowDataTypesConfigCommand;

        /// <summary>
        /// Show the Fuzzing Data Types Config Control
        /// </summary>
        public ICommand ShowDataTypesConfigCommand
        {
            get
            {
                if (null == m_oShowDataTypesConfigCommand)
                    m_oShowDataTypesConfigCommand = new RelayCommand(ShowDataTypesConfigExecute);
                return m_oShowDataTypesConfigCommand;
            }
        }

        public void ShowDataTypesConfigExecute()
        {
            NavPaneViewModel.DeselectAll();
            NavPaneViewModel.DataTypesConfigSelected = true; ;
            ShowInWorkingArea(TypesConfigViewModelProperty.Name);
        }
        #endregion

        #region ShowDataStructuresConfig
        RelayCommand m_oShowDataStructuresConfigCommand;

        /// <summary>
        /// Show the Fuzzing Data Structures Config Control
        /// </summary>
        public ICommand ShowDataStructuresConfigCommand
        {
            get
            {
                if (null == m_oShowDataStructuresConfigCommand)
                    m_oShowDataStructuresConfigCommand = new RelayCommand(ShowDataStructuresConfigExecute);
                return m_oShowDataStructuresConfigCommand;
            }
        }

        public void ShowDataStructuresConfigExecute()
        {
            NavPaneViewModel.DeselectAll();
            NavPaneViewModel.DataStructuresConfigSelected = true; ;
            ShowInWorkingArea(StructuresConfigViewModelProperty.Name);
        }
        #endregion

        #region ShowOutputSelection
        RelayCommand m_oShowOutputSelectionCommand;

        /// <summary>
        /// Show the Output Selection Control
        /// </summary>
        public ICommand ShowOutputSelectionCommand
        {
            get
            {
                if (null == m_oShowOutputSelectionCommand)
                    m_oShowOutputSelectionCommand = new RelayCommand(ShowOutputSelectionExecute);
                return m_oShowOutputSelectionCommand;
            }
        }

        public void ShowOutputSelectionExecute()
        {
            NavPaneViewModel.DeselectAll();
            NavPaneViewModel.OutputSelectionSelected = true; ;
            ShowInWorkingArea(OutputSelectionViewModelProperty.Name);
        }
        #endregion

        #region ShowOutput
        RelayCommand m_oShowOutputCommand;

        /// <summary>
        /// Show the current Output Control
        /// </summary>
        public ICommand ShowOutputCommand
        {
            get
            {
                if (null == m_oShowOutputCommand)
                    m_oShowOutputCommand = new RelayCommand(ShowOutputExecute);
                return m_oShowOutputCommand;
            }
        }

        public void ShowOutputExecute()
        {
            if (null != m_oCurrentOutputDestination)
            {
                NavPaneViewModel.DeselectAll();
                NavPaneViewModel.OutputDestinationSelected = true; ;
                ShowInWorkingArea(m_oCurrentOutputDestination.Name);
            }
        }
        #endregion

        #region ShowMonitoring
        RelayCommand m_oShowMonitoringCommand;

        /// <summary>
        /// Show the Monitoring Control
        /// </summary>
        public ICommand ShowMonitoringCommand
        {
            get
            {
                if (null == m_oShowMonitoringCommand)
                    m_oShowMonitoringCommand = new RelayCommand(ShowMonitoringExecute);
                return m_oShowMonitoringCommand;
            }
        }

        public void ShowMonitoringExecute()
        {
            NavPaneViewModel.DeselectAll();
            NavPaneViewModel.MonitoringSelected = true; ;
            ShowInWorkingArea(MonitoringViewModelProperty.Name);
        }
        #endregion

        #region ShowExecution
        RelayCommand m_oShowExecutionCommand;

        /// <summary>
        /// Show the Execution Control
        /// </summary>
        public ICommand ShowExecutionCommand
        {
            get
            {
                if (null == m_oShowExecutionCommand)
                    m_oShowExecutionCommand = new RelayCommand(ShowExecutionExecute);
                return m_oShowExecutionCommand;
            }
        }

        public void ShowExecutionExecute()
        {
            NavPaneViewModel.DeselectAll();
            NavPaneViewModel.ExecutionSelected = true; ;
            ShowInWorkingArea(ExecutionViewModelProperty.Name);
        }
        #endregion

        #endregion

        #region Handler Commands
        #region UseFileXMLInput
        RelayCommand m_oUseFileXMLInputCommand;

        /// <summary>
        /// Use XML File Input
        /// </summary>
        public ICommand UseFileXMLInputCommand
        {
            get
            {
                if (null == m_oUseFileXMLInputCommand)
                    m_oUseFileXMLInputCommand = new RelayCommand(UseFileXMLInputExecute);
                return m_oUseFileXMLInputCommand;
            }
        }

        public void UseFileXMLInputExecute()
        {
            m_oCurrentInputSource = XMLInputViewModelProperty;
            InputSelectionViewModel.UseFileXMLInputCommand.Execute(null);
            ShowInputExecute();
        }
        #endregion

        #region UseFileC2XInput
        RelayCommand m_oUseFileC2XInputCommand;

        /// <summary>
        /// Use C2X File Input
        /// </summary>
        public ICommand UseFileC2XInputCommand
        {
            get
            {
                if (null == m_oUseFileC2XInputCommand)
                    m_oUseFileC2XInputCommand = new RelayCommand(UseFileC2XInputExecute);
                return m_oUseFileC2XInputCommand;
            }
        }

        public void UseFileC2XInputExecute()
        {
            m_oCurrentInputSource = C2XInputViewModelProperty;
            InputSelectionViewModel.UseFileC2XInputCommand.Execute(null);
            ShowInputExecute();
        }
        #endregion

        #region UseNetworkXMLInput
        RelayCommand m_oUseNetworkXMLInputCommand;

        /// <summary>
        /// Use Network XML Input
        /// </summary>
        public ICommand UseNetworkXMLInputCommand
        {
            get
            {
                if (null == m_oUseNetworkXMLInputCommand)
                    m_oUseNetworkXMLInputCommand = new RelayCommand(UseNetworkXMLInputExecute);
                return m_oUseNetworkXMLInputCommand;
            }
        }

        public void UseNetworkXMLInputExecute()
        {
            m_oCurrentInputSource = XMLNetworkInputViewModelProperty;
            InputSelectionViewModel.UseNetworkXMLInputCommand.Execute(null);
            ShowInputExecute();
        }
        #endregion

        #region UseNetworkC2XInput
        RelayCommand m_oUseNetworkC2XInputCommand;

        /// <summary>
        /// Use Network C2X Input
        /// </summary>
        public ICommand UseNetworkC2XInputCommand
        {
            get
            {
                if (null == m_oUseNetworkC2XInputCommand)
                    m_oUseNetworkC2XInputCommand = new RelayCommand(UseNetworkC2XInputExecute);
                return m_oUseNetworkC2XInputCommand;
            }
        }

        public void UseNetworkC2XInputExecute()
        {
            m_oCurrentInputSource = C2XNetworkInputViewModelProperty;
            InputSelectionViewModel.UseNetworkC2XInputCommand.Execute(null);
            ShowInputExecute();
        }
        #endregion

        #region UseNetworkPDMLInput
        RelayCommand m_oUseNetworkPDMLInputCommand;

        /// <summary>
        /// Use Network PDML Input
        /// </summary>
        public ICommand UseNetworkPDMLInputCommand
        {
            get
            {
                if (null == m_oUseNetworkPDMLInputCommand)
                    m_oUseNetworkPDMLInputCommand = new RelayCommand(UseNetworkPDMLInputExecute);
                return m_oUseNetworkPDMLInputCommand;
            }
        }

        public void UseNetworkPDMLInputExecute()
        {
            m_oCurrentInputSource = PDMLInputViewModelProperty;
            InputSelectionViewModel.UseNetworkPDMLInputCommand.Execute(null);
            ShowInputExecute();
        }
        #endregion

        #region UseWSDLInput
        RelayCommand m_oUseWSDLInputCommand;

        /// <summary>
        /// Use WSDL Input
        /// </summary>
        public ICommand UseWSDLInputCommand
        {
            get
            {
                if (null == m_oUseWSDLInputCommand)
                    m_oUseWSDLInputCommand = new RelayCommand(UseWSDLInputExecute);
                return m_oUseWSDLInputCommand;
            }
        }

        public void UseWSDLInputExecute()
        {
            m_oCurrentInputSource = WSDLInputViewModelProperty;
            InputSelectionViewModel.UseWSDLInputCommand.Execute(null);
            ShowInputExecute();
        }
        #endregion

        #region UseActiveXInput
        RelayCommand m_oUseActiveXInputCommand;

        /// <summary>
        /// Use ActiveX Input
        /// </summary>
        public ICommand UseActiveXInputCommand
        {
            get
            {
                if (null == m_oUseActiveXInputCommand)
                    m_oUseActiveXInputCommand = new RelayCommand(UseActiveXInputExecute);
                return m_oUseActiveXInputCommand;
            }
        }

        public void UseActiveXInputExecute()
        {
            m_oCurrentInputSource = ActiveXInputViewModelProperty;
            InputSelectionViewModel.UseActiveXInputCommand.Execute(null);
            ShowInputExecute();
        }
        #endregion

        #region UseCustomInput
        RelayCommand m_oUseCustomInputCommand;

        /// <summary>
        /// Use Custom Input
        /// </summary>
        public ICommand UseCustomInputCommand
        {
            get
            {
                if (null == m_oUseCustomInputCommand)
                    m_oUseCustomInputCommand = new RelayCommand(UseCustomInputExecute);
                return m_oUseCustomInputCommand;
            }
        }

        public void UseCustomInputExecute()
        {
            m_oCurrentInputSource = CustomInputViewModelProperty;
            InputSelectionViewModel.UseCustomInputCommand.Execute(null);
            ShowInputExecute();
        }
        #endregion

        #region UseDirectoryOutput
        RelayCommand m_oUseDirectoryOutputCommand;

        /// <summary>
        /// Use Directory Output
        /// </summary>
        public ICommand UseDirectoryOutputCommand
        {
            get
            {
                if (null == m_oUseDirectoryOutputCommand)
                    m_oUseDirectoryOutputCommand = new RelayCommand(UseDirectoryOutputExecute);
                return m_oUseDirectoryOutputCommand;
            }
        }

        public void UseDirectoryOutputExecute()
        {
            m_oCurrentOutputDestination = OutputFileStoreViewModelProperty;
            OutputSelectionViewModel.UseDirectoryOutputCommand.Execute(null);
            ShowOutputExecute();
        }
        #endregion

        #region UseExeOutput
        RelayCommand m_oUseExeOutputCommand;

        /// <summary>
        /// Use Exe Output
        /// </summary>
        public ICommand UseExeOutputCommand
        {
            get
            {
                if (null == m_oUseExeOutputCommand)
                    m_oUseExeOutputCommand = new RelayCommand(UseExeOutputExecute);
                return m_oUseExeOutputCommand;
            }
        }

        public void UseExeOutputExecute()
        {
            m_oCurrentOutputDestination = ExeOutputViewModelProperty;
            OutputSelectionViewModel.UseExeOutputCommand.Execute(null);
            ShowOutputExecute();
        }
        #endregion

        #region UseNetworkOutput
        RelayCommand m_oUseNetworkOutputCommand;

        /// <summary>
        /// Use Network Output
        /// </summary>
        public ICommand UseNetworkOutputCommand
        {
            get
            {
                if (null == m_oUseNetworkOutputCommand)
                    m_oUseNetworkOutputCommand = new RelayCommand(UseNetworkOutputExecute);
                return m_oUseNetworkOutputCommand;
            }
        }

        public void UseNetworkOutputExecute()
        {
            m_oCurrentOutputDestination = NetworkOutputViewModelProperty;
            OutputSelectionViewModel.UseNetworkOutputCommand.Execute(null);
            ShowOutputExecute();
        }
        #endregion

        #region UseWSDLOutput
        RelayCommand m_oUseWSDLOutputCommand;

        /// <summary>
        /// Use WSDL Output
        /// </summary>
        public ICommand UseWSDLOutputCommand
        {
            get
            {
                if (null == m_oUseWSDLOutputCommand)
                    m_oUseWSDLOutputCommand = new RelayCommand(UseWSDLOutputExecute);
                return m_oUseWSDLOutputCommand;
            }
        }

        public void UseWSDLOutputExecute()
        {
            m_oCurrentOutputDestination = WSDLOutputViewModelProperty;
            OutputSelectionViewModel.UseWSDLOutputCommand.Execute(null);
            ShowOutputExecute();
        }
        #endregion

        #region UseActiveXOutput
        RelayCommand m_oUseActiveXOutputCommand;

        /// <summary>
        /// Use ActiveX Output
        /// </summary>
        public ICommand UseActiveXOutputCommand
        {
            get
            {
                if (null == m_oUseActiveXOutputCommand)
                    m_oUseActiveXOutputCommand = new RelayCommand(UseActiveXOutputExecute);
                return m_oUseActiveXOutputCommand;
            }
        }

        public void UseActiveXOutputExecute()
        {
            m_oCurrentOutputDestination = ActiveXOutputViewModelProperty;
            OutputSelectionViewModel.UseActiveXOutputCommand.Execute(null);
            ShowOutputExecute();
        }
        #endregion

        #region UseCustomOutput
        RelayCommand m_oUseCustomOutputCommand;

        /// <summary>
        /// Use Custom Output
        /// </summary>
        public ICommand UseCustomOutputCommand
        {
            get
            {
                if (null == m_oUseCustomOutputCommand)
                    m_oUseCustomOutputCommand = new RelayCommand(UseCustomOutputExecute);
                return m_oUseCustomOutputCommand;
            }
        }

        public void UseCustomOutputExecute()
        {
            m_oCurrentOutputDestination = CustomOutputViewModelProperty;
            OutputSelectionViewModel.UseCustomOutputCommand.Execute(null);
            ShowOutputExecute();
        }
        #endregion

        #endregion

        #region Execute Fuzzer

        #region ExecuteFuzzer
        RelayCommand m_oExecuteFuzzerCommand;

        /// <summary>
        /// Execute the fuzzer
        /// </summary>
        public ICommand ExecuteFuzzerCommand
        {
            get
            {
                if (null == m_oExecuteFuzzerCommand)
                    m_oExecuteFuzzerCommand = new RelayCommand(ExecuteFuzzerExecute);
                return m_oExecuteFuzzerCommand;
            }
        }

        public void ExecuteFuzzerExecute()
        {
            if (null != m_oCurrentProject)
            {
                SaveProjectExecute();
                m_oCurrentProject.ExecuteFuzzer();
            }
        }
        #endregion

        #endregion

        #endregion

        #region Public Properties

        protected Project m_oCurrentProject;
        /// <summary>
        /// The current project that is loaded
        /// </summary>
        public Project CurrentProject
        {
            get { return m_oCurrentProject; }
            set { m_oCurrentProject = value; }
        }

        #endregion

        #region Private Class Variables

        DependencyProperty m_oCurrentInputSource;
        DependencyProperty m_oCurrentOutputDestination;

        #endregion

        public MainWindowViewModel()
        {
            WindowInitialise();
        }

        public void Initialise()
        {
            // Set up Input View Models
            InputSelectionViewModel = new InputSelectionViewModel();
            XMLInputViewModel = new XMLInputViewModel();
            XMLInputViewModel.Command = InputSelectionViewModel.UseFileXMLInputCommand;
            C2XInputViewModel = new C2XInputViewModel();
            C2XInputViewModel.Command = InputSelectionViewModel.UseFileC2XInputCommand;
            XMLNetworkInputViewModel = new XMLInputViewModel();
            XMLNetworkInputViewModel.Command = InputSelectionViewModel.UseNetworkXMLInputCommand;
            C2XNetworkInputViewModel = new C2XInputViewModel();
            C2XNetworkInputViewModel.Command = InputSelectionViewModel.UseNetworkC2XInputCommand;
            PDMLInputViewModel = new PDMLInputViewModel();
            PDMLInputViewModel.Command = InputSelectionViewModel.UseNetworkPDMLInputCommand;
            WSDLInputViewModel = new WSDLInputViewModel();
            WSDLInputViewModel.Command = InputSelectionViewModel.UseWSDLInputCommand;
            ActiveXInputViewModel = new ActiveXInputViewModel();
            ActiveXInputViewModel.Command = InputSelectionViewModel.UseActiveXInputCommand;
            CustomInputViewModel = new CustomInputViewModel();
            CustomInputViewModel.Command = InputSelectionViewModel.UseCustomInputCommand;

            // Set up the Fuzzing Data Configuration
            TypesConfigViewModel = new DataTypesConfigViewModel();
            StructuresConfigViewModel = new DataStructuresConfigViewModel();

            // Set up Output View Models
            OutputSelectionViewModel = new OutputSelectionViewModel();
            OutputFileStoreViewModel = new OutputFileStoreViewModel();
            OutputFileStoreViewModel.Command = OutputSelectionViewModel.UseDirectoryOutputCommand;
            ExeOutputViewModel = new ExeOutputViewModel();
            ExeOutputViewModel.Command = OutputSelectionViewModel.UseExeOutputCommand;
            NetworkOutputViewModel = new NetworkOutputViewModel();
            NetworkOutputViewModel.Command = OutputSelectionViewModel.UseNetworkOutputCommand;
            WSDLOutputViewModel = new WSDLOutputViewModel();
            WSDLOutputViewModel.Command = OutputSelectionViewModel.UseWSDLOutputCommand;
            ActiveXOutputViewModel = new ActiveXOutputViewModel();
            ActiveXOutputViewModel.Command = OutputSelectionViewModel.UseActiveXOutputCommand;
            CustomOutputViewModel = new CustomOutputViewModel();
            CustomOutputViewModel.Command = OutputSelectionViewModel.UseCustomOutputCommand;

            // Setup Execution View  Models
            MonitoringViewModel = new MonitoringControlViewModel();
            ExecutionViewModel = new ExecuteControlViewModel();

            // Setup the NavPane View Model
            NavPaneViewModel = new NavPaneViewModel();

            // Assign commands to the view models
            AssignCommands();

            // Set up Menu properties
            ProjectLoaded = false;

            // Set up welcome message
            WelcomeScreen = new WelcomeViewModel();

            //WindowInitialise();
        }

        /// <summary>
        /// Assign the various application commands to the view models that need them
        /// </summary>
        private void AssignCommands()
        {
            NavPaneViewModel.SetValue(ProjectNavigationCommands.ShowInputSelectionProperty, ShowInputSelectionCommand);
            NavPaneViewModel.SetValue(ProjectNavigationCommands.ShowInputConfigProperty, ShowInputCommand);
            NavPaneViewModel.SetValue(ProjectNavigationCommands.ShowDataTypesConfigProperty, ShowDataTypesConfigCommand);
            NavPaneViewModel.SetValue(ProjectNavigationCommands.ShowDataStructuresConfigProperty, ShowDataStructuresConfigCommand);
            NavPaneViewModel.SetValue(ProjectNavigationCommands.ShowOutputSelectionProperty, ShowOutputSelectionCommand);
            NavPaneViewModel.SetValue(ProjectNavigationCommands.ShowOutputConfigProperty, ShowOutputCommand);
            NavPaneViewModel.SetValue(ProjectNavigationCommands.ShowMonitoringProperty, ShowMonitoringCommand);
            NavPaneViewModel.SetValue(ProjectNavigationCommands.ShowExecutionProperty, ShowExecutionCommand);

            InputSelectionViewModel.SetValue(HandlerCommands.UseFileXMLInputProperty, UseFileXMLInputCommand);
            InputSelectionViewModel.SetValue(HandlerCommands.UseFileC2XInputProperty, UseFileC2XInputCommand);
            InputSelectionViewModel.SetValue(HandlerCommands.UseNetworkXMLInputProperty, UseNetworkXMLInputCommand);
            InputSelectionViewModel.SetValue(HandlerCommands.UseNetworkC2XInputProperty, UseNetworkC2XInputCommand);
            InputSelectionViewModel.SetValue(HandlerCommands.UseNetworkPDMLInputProperty, UseNetworkPDMLInputCommand);
            InputSelectionViewModel.SetValue(HandlerCommands.UseInterfaceWSDLInputProperty, UseWSDLInputCommand);
            InputSelectionViewModel.SetValue(HandlerCommands.UseInterfaceActiveXInputProperty, UseActiveXInputCommand);
            InputSelectionViewModel.SetValue(HandlerCommands.UseCustomInputProperty, UseCustomInputCommand);

            OutputSelectionViewModel.SetValue(HandlerCommands.UseDirectoryOutputProperty, UseDirectoryOutputCommand);
            OutputSelectionViewModel.SetValue(HandlerCommands.UseExeOutputProperty, UseExeOutputCommand);
            OutputSelectionViewModel.SetValue(HandlerCommands.UseNetworkOutputProperty, UseNetworkOutputCommand);
            OutputSelectionViewModel.SetValue(HandlerCommands.UseWSDLOutputProperty, UseWSDLOutputCommand);
            OutputSelectionViewModel.SetValue(HandlerCommands.UseActiveXOutputProperty, UseActiveXOutputCommand);
            OutputSelectionViewModel.SetValue(HandlerCommands.UseCustomOutputProperty, UseCustomOutputCommand);

            ExecutionViewModel.SetValue(HelperCommands.ExecuteFuzzerProperty, ExecuteFuzzerCommand);
        }

        /// <summary>
        ///  Show the View associated with the named view model
        /// </summary>
        private void ShowInWorkingArea(string ViewModelName)
        {
            // Loop through all the properties of this view model, and set the Show property for every
            // ViewModelBase
            foreach (System.Reflection.PropertyInfo pi in GetType().GetProperties())
            {
                ViewModelBase oViewModelBase = pi.GetValue(this, null) as ViewModelBase;
                if (null != oViewModelBase)
                {
                    if (pi.Name.Equals(ViewModelName))
                        oViewModelBase.Show = true;
                    else
                        oViewModelBase.Show = false;
                }
            }        
        }

        /// <summary>
        /// Initialise the display by showing the welcome window
        /// </summary>
        private void WindowInitialise()
        {
            // Create new ViewModels so data from last project is not still showing in Views
            Initialise();

            m_oCurrentProject = null;
            m_oCurrentInputSource = null;
            m_oCurrentOutputDestination = null;

            NavPaneViewModel.DeselectAll();
            ShowInWorkingArea(WelcomeScreenProperty.Name);

            DisableProjectInteraction();

            Title = "Fuzzsaw";
        }

        /// <summary>
        /// When a project is loaded we enable all the UI so the user can interact with Fuzzsaw
        /// </summary>
        private void EnableProjectInteraction()
        {
            NavPaneViewModel.Enabled = true;
            ProjectLoaded = true;

            Fuzzsaw.ProjectDirectory = m_oCurrentProject.ProjectDirectory;
        }

        /// <summary>
        /// When no project is loaded we disable the UI that allows project interaction.
        /// </summary>
        private void DisableProjectInteraction()
        {
            NavPaneViewModel.Enabled = false;
            ProjectLoaded = false;

            Fuzzsaw.ProjectDirectory = null;
        }

        /// <summary>
        /// Helps with opening a New or Existing file
        /// </summary>
        private void OpenHelper()
        {
            // Load Configuration into Fuzzsaw
            if (!LoadProjectConfiguration())
            {
                MessageBox.Show("There was an error loading the project.  It has failed to open.", "Loading Error", MessageBoxButton.OK);
                WindowInitialise();
                return;
            }

            Title = "Fuzzsaw - " + m_oCurrentProject.ProjectName;

            // Allow the user to interact with the project
            EnableProjectInteraction();
        }

        private bool LoadProjectConfiguration()
        {
            if ((null == m_oCurrentProject.Config.Input) ||
                (null == m_oCurrentProject.Config.Input.DataInputHandler) ||
                (null == m_oCurrentProject.Config.Input.DataInputHandler.Item))
                return false;

            // Load input.  For each property, see if it is an input handler, and the compare
            // type against config type.  Once found a match set the DataInputHandler
            foreach (System.Reflection.PropertyInfo pi in GetType().GetProperties())
            {
                // Check if it's an input handler
                IInputHandler oInputHandler = pi.GetValue(this, null) as IInputHandler;
                if (null == oInputHandler)
                    continue;

                // Check to see it's the right type of Input
                if (!oInputHandler.GetDataInputHandlerItemType().Equals(m_oCurrentProject.Config.Input.DataInputHandler.Item.GetType()))
                    continue;

                // Assign the DataInputHandler and set the oCurrentInputSource
                oInputHandler.DataInputHandler = m_oCurrentProject.Config.Input.DataInputHandler;
                // Get the DependencyProperty for this DependencyObject
                System.ComponentModel.DependencyPropertyDescriptor oDescriptor = System.ComponentModel.DependencyPropertyDescriptor.FromName(pi.Name, GetType(), GetType());
                if (null == oDescriptor)
                    throw new Exception();
                m_oCurrentInputSource = oDescriptor.DependencyProperty;
                // Tell the InputSelection control to select the appropriate current input indicator
                oInputHandler.SelectCommand.Execute(null);
                break;
            }
            if (null == m_oCurrentInputSource)
            {
                // Special case the Protocol Input
                if (m_oCurrentProject.Config.Input.DataInputHandler.Item is ProtocolDefnInput)
                {
                    MessageBox.Show("The user interface does not support Protocol Definition inputs.  Please run Schemer directly.", "Unsupported", MessageBoxButton.OK);
                }
                return false;
            }

            // Load Execute and Monitoring configuration
            ExecutionViewModel.ApplyConfiguration(m_oCurrentProject.Config);
            MonitoringViewModel.ApplyConfiguration(m_oCurrentProject.Config);

            // Load simple and complex type fuzzers config
            TypesConfigViewModel.ApplyConfiguration(m_oCurrentProject.STFC);
            StructuresConfigViewModel.ApplyConfiguration(m_oCurrentProject.CTFC);

            if ((null == m_oCurrentProject.Config.Output) ||
                (null == m_oCurrentProject.Config.Output.EvaluationMethod) ||
                (null == m_oCurrentProject.Config.Output.EvaluationMethod.Item))
                return false;

            // Load output.
            foreach (System.Reflection.PropertyInfo pi in GetType().GetProperties())
            {
                // Check if it's an output handler
                IOutputHandler oOutputHandler = pi.GetValue(this, null) as IOutputHandler;
                if (null == oOutputHandler)
                    continue;

                // Check to see it's the right type of Input
                if (!oOutputHandler.GetDataOutputHandlerItemType().Equals(m_oCurrentProject.Config.Output.EvaluationMethod.Item.GetType()))
                    continue;

                // Assign the EvaluationMethod and set the oCurrentOutputSource
                oOutputHandler.EvaluationMethod = m_oCurrentProject.Config.Output.EvaluationMethod;
                // Get the DependencyProperty for this DependencyObject
                System.ComponentModel.DependencyPropertyDescriptor oDescriptor = System.ComponentModel.DependencyPropertyDescriptor.FromName(pi.Name, GetType(), GetType());
                if (null == oDescriptor)
                    throw new Exception();
                m_oCurrentOutputDestination = oDescriptor.DependencyProperty;
                // Tell the OutputDestination control to select the appropriate current output indicator
                oOutputHandler.SelectCommand.Execute(null);
                break;
            }
            if (null == m_oCurrentOutputDestination)
                return false;

            return true;
        }

        /// <summary>
        /// Helps with saving a project
        /// </summary>
        private bool SaveHelper()
        {
            bool bSuccess = false;
            try
            {
                Configuration oConfig = m_oCurrentProject.Config;
                // Set the InputHandler
                if (null != m_oCurrentInputSource)
                    oConfig.Input.DataInputHandler = (GetValue(m_oCurrentInputSource) as IInputHandler).DataInputHandler;

                if(null == oConfig.Output)
                    oConfig.Output = new Fuzzware.Schemas.AutoGenerated.Output();
                
                // Set the Convert2XML and Pre-Output
                // The Configuration is updated when the user clicks Ok on the Project Properties page

                // Set the EvaluationMethod
                if (null != m_oCurrentOutputDestination)
                    oConfig.Output.EvaluationMethod = (GetValue(m_oCurrentOutputDestination) as IOutputHandler).EvaluationMethod;

                // Set the Monitoring
                MonitoringViewModel.UpdateConfiguration(oConfig);

                // Set the execution options
                ExecutionViewModel.UpdateConfiguration(oConfig);

                // Sava the Data Types config data
                m_oCurrentProject.STFC = TypesConfigViewModel.SimpleTypeConfig;
                // Save the Data Structure config data
                m_oCurrentProject.CTFC = StructuresConfigViewModel.ComplexTypeConfig;

                // Write all configuration files out to disk
                bSuccess = m_oCurrentProject.Save();
            }
            catch {}

            return bSuccess;
        }
    }
}
