using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.Linq;
using System.Text;
using System.Windows;
using System.Threading;
using Fuzzware.Fuzzsaw.Common.ViewModel;
using Fuzzware.Common;
using Fuzzware.Common.MethodInterface;
using Fuzzware.Schemas.AutoGenerated;

namespace Fuzzware.Fuzzsaw.Input.ViewModel
{
    public class WSDLInputViewModel : InputBaseViewModel, IInputHandler
    {
        #region Dependency Properties

        static readonly DependencyProperty WSDLFilesProperty = DependencyProperty.Register("WSDLFiles", typeof(FilesControlViewModel), typeof(WSDLInputViewModel));
        public FilesControlViewModel WSDLFiles
        {
            get { return (FilesControlViewModel)GetValue(WSDLFilesProperty); }
            set { SetValue(WSDLFilesProperty, value); }
        }

        static readonly DependencyProperty WSDLFilesEdittableProperty = DependencyProperty.Register("WSDLFilesEdittable", typeof(bool), typeof(WSDLInputViewModel));
        public bool WSDLFilesEdittable
        {
            get { return (bool)GetValue(WSDLFilesEdittableProperty); }
            set { SetValue(WSDLFilesEdittableProperty, value); }
        }

        static readonly DependencyProperty WSDLErrorProperty = DependencyProperty.Register("WSDLError", typeof(string), typeof(WSDLInputViewModel));
        public string WSDLError
        {
            get { return (string)GetValue(WSDLErrorProperty); }
            set { SetValue(WSDLErrorProperty, value); }
        }

        static readonly DependencyProperty ProtocolProperty = DependencyProperty.Register("Protocol", typeof(string), typeof(WSDLInputViewModel));
        public string Protocol
        {
            get { return (string)GetValue(ProtocolProperty); }
            set { SetValue(ProtocolProperty, value); }
        }

        static readonly DependencyProperty MethodsConfigProperty = DependencyProperty.Register("MethodsConfig", typeof(MethodsConfigControlViewModel), typeof(WSDLInputViewModel));
        public MethodsConfigControlViewModel MethodsConfig
        {
            get { return (MethodsConfigControlViewModel)GetValue(MethodsConfigProperty); }
            set { SetValue(MethodsConfigProperty, value); }
        }

        #endregion

        public WSDLInputViewModel()
        {
            WSDLFiles = new FilesControlViewModel();
            WSDLFiles.Title = "Choose input WSDLs";
            WSDLFiles.DefaultExtension = ".wsdl";
            WSDLFiles.Filter = "WSDL files (.wsdl)|*.wsdl";
            WSDLFiles.UseRelativePaths = true;
            WSDLFiles.Filenames = new ObservableCollection<string>();
            WSDLFiles.Filenames.CollectionChanged += new NotifyCollectionChangedEventHandler(WSDLsChanged);
            WSDLFilesEdittable = true;
            Protocol = "Soap";

            MethodsConfig = new MethodsConfigControlViewModel();
        }

        /// <summary>
        /// When the WSDLs change, update the list of methods and parameters
        /// </summary>
        private void WSDLsChanged(Object sender, NotifyCollectionChangedEventArgs e)
        {
            WSDLError = null;

            String[] WSDLPaths = WSDLFiles.Filenames.ToArray<string>();

            // Remove the methods as we will be adding them all again after we have updated our list of WSDLs
            MethodsConfig.Methods.Clear();

            if (0 == WSDLPaths.Length)
                return;
            MethodsConfig oMethodsConfig = null;
            //MethodsConfig oMethodsConfig = new MethodsConfig();
            //MethodsConfig.Save(oMethodsConfig);

            // Check all the WSDL files actually exist
            for (int i = 0; i < WSDLPaths.Length; i++)
            {
                if (!System.IO.File.Exists(WSDLPaths[i]))
                    WSDLError = WSDLError + "WSDL file '" + WSDLPaths[i] + "' does not exist." + Environment.NewLine;
            }
            if (!String.IsNullOrEmpty(WSDLError))
                return;

            WSDLFilesEdittable = false;
            String ProtocolCopy = Protocol;
            ThreadStart ts = delegate   // This delegate gets executed on a background thread
            {
                // Load the WSDLs
                CaptureLog(Fuzzware.Common.Log.LogType.LogOnlyInfo);
                WSDLLibraryDescription oWSDLLibrary = null;
                try
                {
                    oWSDLLibrary = new WSDLLibraryDescription(WSDLPaths, (WSDLInputProtocol)Enum.Parse(typeof(WSDLInputProtocol), ProtocolCopy), oMethodsConfig, "");
                }
                catch (Exception err)
                {
                    if (!(err is LoggedException))
                        try
                        {   // This will throw an error we have to catch
                            Fuzzware.Common.Log.Write("Error creating WSDL library", err.Message, Fuzzware.Common.Log.LogType.Error);
                        }
                        catch { }
                }
                StopCapturingLog();

                // The last thing the background thread does is add this delegate to the Dispatcher which executes it on the UI thread
                // so we can update all our DependencyObjects
                Dispatcher.BeginInvoke(System.Windows.Threading.DispatcherPriority.Normal, (EventHandler)
                delegate
                {
                    if (!String.IsNullOrEmpty(m_oLogOutput.ToString()))
                        WSDLError = m_oLogOutput.ToString();

                    for (int i = 0; (null != oWSDLLibrary) && (i < oWSDLLibrary.Interfaces.Count); i++)
                    {
                        for (int j = 0; j < oWSDLLibrary.Interfaces[i].Methods.Count; j++)
                        {
                            MethodsConfig.Methods.Add(new MethodInfoViewModel(oWSDLLibrary.Interfaces[i].GetMethodNodeName(oWSDLLibrary.Interfaces[i].Methods[j]),
                                oWSDLLibrary.Interfaces[i].Methods[j]));
                        }
                    }
                    WSDLFilesEdittable = true;
                }, null, null);
            };
            ts.BeginInvoke(delegate(IAsyncResult aysncResult) { ts.EndInvoke(aysncResult); }, null);
        }

        #region IInputHandler Members

        public Type GetDataInputHandlerItemType()
        {
            return typeof(Fuzzware.Schemas.AutoGenerated.WSDLInput);
        }

        public Fuzzware.Schemas.AutoGenerated.DataInputHandler DataInputHandler
        {
            get
            {
                Fuzzware.Schemas.AutoGenerated.WSDLInput oWSDLInput = new Fuzzware.Schemas.AutoGenerated.WSDLInput();
                oWSDLInput.WSDLPathAndFile = WSDLFiles.Filenames.ToArray<string>();
                oWSDLInput.MethodsConfig = new MethodsConfig();
                MethodsConfig.Save(oWSDLInput.MethodsConfig);
                oWSDLInput.Protocol = (WSDLInputProtocol)Enum.Parse(typeof(WSDLInputProtocol), Protocol);
                // Default to the Project Directory for XSD and XML output files
                oWSDLInput.OutputDir = "";

                m_oDataInputHandler.Item = oWSDLInput;

                return m_oDataInputHandler;
            }
            set
            {
                if (!(value.Item is Fuzzware.Schemas.AutoGenerated.WSDLInput))
                    return;

                m_oDataInputHandler = value;
                Fuzzware.Schemas.AutoGenerated.WSDLInput oWSDLInput = (Fuzzware.Schemas.AutoGenerated.WSDLInput)m_oDataInputHandler.Item;

                // The methods get loaded by WSDLsChanged automatically when we change the filenames collection
                // Load the Methods Config
                if(null != oWSDLInput.MethodsConfig)
                    MethodsConfig.Load(oWSDLInput.MethodsConfig);

                // Load the protocol
                Protocol = oWSDLInput.Protocol.ToString();

                // Load the WSDLs
                WSDLFiles.Filenames.Clear();
                for (int i = 0; (null != oWSDLInput.WSDLPathAndFile) && (i < oWSDLInput.WSDLPathAndFile.Length); i++)
                {
                    String WSDLPath = oWSDLInput.WSDLPathAndFile[i];
                    //if (!System.IO.Path.IsPathRooted(WSDLPath))
                    //    WSDLPath = System.IO.Path.Combine(Fuzzsaw.ProjectDirectory, WSDLPath);
                    WSDLFiles.Filenames.Add(WSDLPath);
                }
            }
        }
        #endregion
    }
}
