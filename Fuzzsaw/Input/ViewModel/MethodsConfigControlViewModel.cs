using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.Linq;
using System.Text;
using System.IO;
using System.Windows;
using System.Windows.Input;
using System.Xml;
using System.Xml.Schema;
using Fuzzware.Fuzzsaw.Common;
using Fuzzware.Common;
using Fuzzware.Common.Encoding;
using Fuzzware.Common.MethodInterface;
using Fuzzware.Common.XML;
using Fuzzware.Schemas.AutoGenerated;

namespace Fuzzware.Fuzzsaw.Input.ViewModel
{
    public class MethodsConfigControlViewModel : ViewModelBase
    {
        #region Dependency Properties

        #region Methods
        /// <summary>
        /// MethodNames DependencyProperty
        /// </summary>
        public static DependencyProperty MethodsProperty =
                DependencyProperty.Register(
                        "Methods",
                        typeof(ObservableCollection<MethodInfoViewModel>),
                        typeof(MethodsConfigControlViewModel),
                        new FrameworkPropertyMetadata(new ObservableCollection<MethodInfoViewModel>()));

        public ObservableCollection<MethodInfoViewModel> Methods
        {
            get { return (ObservableCollection<MethodInfoViewModel>)GetValue(MethodsProperty); }
            set { SetValue(MethodsProperty, value); }
        }
        #endregion

        #region MethodsWithInputParameters

        /// <summary>
        /// MethodsWithInputParameters DependencyProperty
        /// </summary>
        public static DependencyProperty MethodsWithInputParametersProperty =
                DependencyProperty.Register(
                        "MethodsWithInputParameters",
                        typeof(ObservableCollection<MethodInfoViewModel>),
                        typeof(MethodsConfigControlViewModel),
                        new FrameworkPropertyMetadata(new ObservableCollection<MethodInfoViewModel>()));

        public ObservableCollection<MethodInfoViewModel> MethodsWithInputParameters
        {
            get { return (ObservableCollection<MethodInfoViewModel>)GetValue(MethodsWithInputParametersProperty); }
            set { SetValue(MethodsWithInputParametersProperty, value); }
        }

        #endregion

        #region InputParameters
        /// <summary>
        /// InputParameters DependencyProperty
        /// </summary>
        public static DependencyProperty InputParametersProperty =
                DependencyProperty.Register(
                        "InputParameters",
                        typeof(ObservableCollection<ParamDescViewModel>),
                        typeof(MethodsConfigControlViewModel),
                        new FrameworkPropertyMetadata(new ObservableCollection<ParamDescViewModel>()));

        public ObservableCollection<ParamDescViewModel> InputParameters
        {
            get { return (ObservableCollection<ParamDescViewModel>)GetValue(InputParametersProperty); }
            set { SetValue(InputParametersProperty, value); }
        }
        #endregion

        #region InitialMethods

        /// <summary>
        /// Source DependencyProperty
        /// </summary>
        public static DependencyProperty InitialMethodsProperty =
                DependencyProperty.Register(
                        "InitialMethods",
                        typeof(ObservableCollection<ObservableString>),
                        typeof(MethodsConfigControlViewModel),
                        new FrameworkPropertyMetadata(new ObservableCollection<ObservableString>()));


        /// <summary>
        /// Gets or sets the InitialMethods
        /// </summary>
        public ObservableCollection<ObservableString> InitialMethods
        {
            get { return (ObservableCollection<ObservableString>)GetValue(InitialMethodsProperty); }
            set { SetValue(InitialMethodsProperty, value); }
        }

        #endregion

        #region DefaultValues

        /// <summary>
        /// DefaultValues DependencyProperty
        /// </summary>
        public static DependencyProperty DefaultValuesProperty =
                DependencyProperty.Register(
                        "DefaultValues",
                        typeof(ObservableCollection<DefaultValueViewModel>),
                        typeof(MethodsConfigControlViewModel),
                        new FrameworkPropertyMetadata(new ObservableCollection<DefaultValueViewModel>()));


        /// <summary>
        /// Gets or sets the DefaultValues
        /// </summary>
        public ObservableCollection<DefaultValueViewModel> DefaultValues
        {
            get { return (ObservableCollection<DefaultValueViewModel>)GetValue(DefaultValuesProperty); }
            set { SetValue(DefaultValuesProperty, value); }
        }

        #endregion

        #region DefaultStringValue
        /// <summary>
        /// DefaultStringValue DependencyProperty
        /// </summary>
        public static DependencyProperty DefaultStringValueProperty =
                DependencyProperty.Register("DefaultStringValue", typeof(string), typeof(MethodsConfigControlViewModel));

        public string DefaultStringValue
        {
            get { return (string)GetValue(DefaultStringValueProperty); }
            set { SetValue(DefaultStringValueProperty, value); }
        }
        #endregion

        #region DefaultIntegerValue
        /// <summary>
        /// DefaultIntegerValue DependencyProperty
        /// </summary>
        public static DependencyProperty DefaultIntegerValueProperty =
                DependencyProperty.Register("DefaultIntegerValue", typeof(string), typeof(MethodsConfigControlViewModel));

        public string DefaultIntegerValue
        {
            get { return (string)GetValue(DefaultIntegerValueProperty); }
            set { SetValue(DefaultIntegerValueProperty, value); }
        }
        #endregion

        #region DefaultDecimalValue
        /// <summary>
        /// DefaultDecimalValue DependencyProperty
        /// </summary>
        public static DependencyProperty DefaultDecimalValueProperty =
                DependencyProperty.Register("DefaultDecimalValue", typeof(string), typeof(MethodsConfigControlViewModel));

        public string DefaultDecimalValue
        {
            get { return (string)GetValue(DefaultDecimalValueProperty); }
            set { SetValue(DefaultDecimalValueProperty, value); }
        }
        #endregion

        #region DefaultBinaryValue
        /// <summary>
        /// DefaultBinaryValue DependencyProperty
        /// </summary>
        public static DependencyProperty DefaultBinaryValueProperty =
                DependencyProperty.Register("DefaultBinaryValue", typeof(string), typeof(MethodsConfigControlViewModel));

        public string DefaultBinaryValue
        {
            get { return (string)GetValue(DefaultBinaryValueProperty); }
            set { SetValue(DefaultBinaryValueProperty, value); }
        }
        #endregion

        #region DefaultAnyTypeValue
        /// <summary>
        /// DefaultAnyTypeValue DependencyProperty
        /// </summary>
        public static DependencyProperty DefaultAnyTypeValueProperty =
                DependencyProperty.Register("DefaultAnyTypeValue", typeof(XmlQualifiedName), typeof(MethodsConfigControlViewModel));

        public XmlQualifiedName DefaultAnyTypeValue
        {
            get { return (XmlQualifiedName)GetValue(DefaultAnyTypeValueProperty); }
            set { SetValue(DefaultAnyTypeValueProperty, value); }
        }
        #endregion

        #endregion

        #region Commands

        #region AddInitialMethodCommand
        RelayCommand m_oAddInitialMethodCommand;

        public ICommand AddInitialMethodCommand
        {
            get
            {
                if (null == m_oAddInitialMethodCommand)
                    m_oAddInitialMethodCommand = new RelayCommand(AddInitialMethodExecute);
                return m_oAddInitialMethodCommand;
            }
        }

        public void AddInitialMethodExecute()
        {
            // If the last InitialMethods value is not what we expect add a new one
            if((null != InitialMethods) && (InitialMethods.Count > 0) && !(InitialMethods[InitialMethods.Count - 1].Value.Equals(FINAL_LB_VALUE)))
                InitialMethods.Add(new ObservableString(FINAL_LB_VALUE));
        }
        #endregion

        #region DeleteInitialMethodCommand
        RelayCommand<ObservableString> m_oDeleteInitialMethodCommand;

        public ICommand DeleteInitialMethodCommand
        {
            get
            {
                if (null == m_oDeleteInitialMethodCommand)
                    m_oDeleteInitialMethodCommand = new RelayCommand<ObservableString>(DeleteInitialMethodExecute);
                return m_oDeleteInitialMethodCommand;
            }
        }

        public void DeleteInitialMethodExecute(ObservableString oString)
        {
            if ((null != oString) && !oString.Value.Equals(FINAL_LB_VALUE))
                InitialMethods.Remove(oString);
        }
        #endregion

        #region PromoteInitialMethodCommand
        RelayCommand<ObservableString> m_oPromoteInitialMethodCommand;

        public ICommand PromoteInitialMethodCommand
        {
            get
            {
                if (null == m_oPromoteInitialMethodCommand)
                    m_oPromoteInitialMethodCommand = new RelayCommand<ObservableString>(PromoteInitialMethodExecute);
                return m_oPromoteInitialMethodCommand;
            }
        }

        public void PromoteInitialMethodExecute(ObservableString oString)
        {
            int index = InitialMethods.IndexOf(oString);
            // Can promote any initial method except for the first and the last
            if ((index != -1) && (index > 0) && (index != InitialMethods.Count - 1))
            {
                InitialMethods.Move(index, index - 1);
            }
        }
        #endregion

        #region DemoteInitialMethodCommand
        RelayCommand<ObservableString> m_oDemoteInitialMethodCommand;

        public ICommand DemoteInitialMethodCommand
        {
            get
            {
                if (null == m_oDemoteInitialMethodCommand)
                    m_oDemoteInitialMethodCommand = new RelayCommand<ObservableString>(DemoteInitialMethodExecute);
                return m_oDemoteInitialMethodCommand;
            }
        }

        public void DemoteInitialMethodExecute(ObservableString oString)
        {
            int index = InitialMethods.IndexOf(oString);
            // Can demote any initial method except for the last and second to last
            if ((index != -1) && (index < InitialMethods.Count - 2))
            {
                InitialMethods.Move(index, index + 1);
            }
        }
        #endregion

        #region AddDefaultValueCommand
        RelayCommand m_oAddDefaultValueCommand;

        public ICommand AddDefaultValueCommand
        {
            get
            {
                if (null == m_oAddDefaultValueCommand)
                    m_oAddDefaultValueCommand = new RelayCommand(AddDefaultValueCommandExecute);
                return m_oAddDefaultValueCommand;
            }
        }

        public void AddDefaultValueCommandExecute()
        {
            DefaultValues.Add(new DefaultValueViewModel(MethodsWithInputParameters, InputParameters));
        }
        #endregion

        #region PromoteDefaultValueCommand
        RelayCommand<DefaultValueViewModel> m_oPromoteDefaultValueCommand;

        public ICommand PromoteDefaultValueCommand
        {
            get
            {
                if (null == m_oPromoteDefaultValueCommand)
                    m_oPromoteDefaultValueCommand = new RelayCommand<DefaultValueViewModel>(PromoteDefaultValueExecute);
                return m_oPromoteDefaultValueCommand;
            }
        }

        public void PromoteDefaultValueExecute(DefaultValueViewModel oDefaultValue)
        {
            int index = DefaultValues.IndexOf(oDefaultValue);
            // Can promote any default value except for the first
            if ((index != -1) && (index > 0))
            {
                DefaultValues.Move(index, index - 1);
            }
        }
        #endregion

        #region DemoteDefaultValueCommand
        RelayCommand<DefaultValueViewModel> m_oDemoteDefaultValueCommand;

        public ICommand DemoteDefaultValueCommand
        {
            get
            {
                if (null == m_oDemoteDefaultValueCommand)
                    m_oDemoteDefaultValueCommand = new RelayCommand<DefaultValueViewModel>(DemoteDefaultValueExecute);
                return m_oDemoteDefaultValueCommand;
            }
        }

        public void DemoteDefaultValueExecute(DefaultValueViewModel oDefaultValue)
        {
            int index = DefaultValues.IndexOf(oDefaultValue);
            // Can demote any default value except for the last
            if ((index != -1) && (index < DefaultValues.Count - 1))
            {
                DefaultValues.Move(index, index + 1);
            }
        }
        #endregion

        #region RemoveDefaultValueCommand
        RelayCommand<DefaultValueViewModel> m_oRemoveDefaultValueCommand;

        public ICommand RemoveDefaultValueCommand
        {
            get
            {
                if (null == m_oRemoveDefaultValueCommand)
                    m_oRemoveDefaultValueCommand = new RelayCommand<DefaultValueViewModel>(RemoveDefaultValueExecute);
                return m_oRemoveDefaultValueCommand;
            }
        }

        public void RemoveDefaultValueExecute(DefaultValueViewModel oDefaultValueViewModel)
        {
            DefaultValues.Remove(oDefaultValueViewModel);
        }
        #endregion

        #region AssignDefaultValueCommand
        RelayCommand<DefaultValueViewModel> m_oAssignDefaultValueCommand;

        /// <summary>
        /// The command that assign a default value to a default value
        /// </summary>
        public ICommand AssignDefaultValueCommand
        {
            get
            {
                if (null == m_oAssignDefaultValueCommand)
                    m_oAssignDefaultValueCommand = new RelayCommand<DefaultValueViewModel>(AssignDefaultValueExecute);
                return m_oAssignDefaultValueCommand;
            }
        }

        public void AssignDefaultValueExecute(DefaultValueViewModel oDefaultValueViewModel)
        {
            if (null == oDefaultValueViewModel)
                return;
            //if (!String.IsNullOrEmpty(oDefaultValueViewModel.DefaultValue))
            //    return;
            if ((null == oDefaultValueViewModel.Parameter) || (null == oDefaultValueViewModel.Parameter.ParamDesc) ||
                (null == oDefaultValueViewModel.Parameter.ParamDesc.ParamSchemaElement))
                return;
            if (oDefaultValueViewModel.Parameter.ParamDesc.ParamSchemaElement.SchemaTypeName.Namespace.Equals("http://www.w3.org/2001/XMLSchema"))
            {
                switch (oDefaultValueViewModel.Parameter.ParamDesc.ParamSchemaElement.SchemaTypeName.Name)
                {
                    case "string":
                    case "normalizedString":
                    case "token":
                    case "language":
                    case "Name":
                    case "NMTOKEN":
                    case "NCName":
                    case "ID":
                    case "IDREF":
                    case "ENTITY":
                        oDefaultValueViewModel.DefaultValue = DefaultStringValue;
                        break;
                    case "integer":
                    case "nonPositiveInteger":
                    case "negativeInteger":
                    case "nonNegativeInteger":
                    case "positiveInteger":
                    case "unsignedLong":
                    case "unsignedInt":
                    case "unsignedShort":
                    case "unsignedByte":
                    case "long":
                    case "int":
                    case "short":
                    case "byte":
                        oDefaultValueViewModel.DefaultValue = DefaultIntegerValue;
                        break;
                    case "decimal":
                    case "float":
                    case "double":
                        oDefaultValueViewModel.DefaultValue = DefaultDecimalValue;
                        break;
                    case "hexBinary":
                        oDefaultValueViewModel.DefaultValue = DefaultBinaryValue;
                        break;
                    case "boolean":
                        oDefaultValueViewModel.DefaultValue = "true";
                        break;
                }
            }
        }
        #endregion

        #endregion

        protected String[] m_AnyTypeValues = { "String", "Integer", "Decimal", "Binary" };
        public String[] AnyTypeValues { get { return m_AnyTypeValues; } }

        protected const String FINAL_LB_VALUE = "Add a method";
        public const String prefix = LibraryDescription.PREFIX;
        
        public MethodsConfigControlViewModel()
        {
            // Initialise all Dependency Properties
            Methods = new ObservableCollection<MethodInfoViewModel>();
            MethodsWithInputParameters = new ObservableCollection<MethodInfoViewModel>();
            InputParameters = new ObservableCollection<ParamDescViewModel>();
            InitialMethods = new ObservableCollection<ObservableString>();
            DefaultValues = new ObservableCollection<DefaultValueViewModel>();
            DefaultStringValue = null;
            DefaultIntegerValue = null;
            DefaultDecimalValue = null;
            DefaultBinaryValue = null;
            DefaultAnyTypeValue = null;

            Methods.CollectionChanged += new NotifyCollectionChangedEventHandler(MethodsCollectionChanged);

            // Initialise with default XmlDefaultValues
            MethodsConfig oMethodsConfig = new MethodsConfig();
            Load(oMethodsConfig);
        }

        /// <summary>
        /// When the Methods collection changes, update the MethodsWithInputParameters and InputParameters collections
        /// </summary>
        public void MethodsCollectionChanged(Object sender, NotifyCollectionChangedEventArgs e)
        {
            // Clear MethodsWithInputParameters
            MethodsWithInputParameters.Clear();
            // Clear InputParameters
            InputParameters.Clear();

            for (int i = 0; i < Methods.Count; i++)
            {
                if (Methods[i].oMethodDescription.InParameterCount > 0)
                {
                    bool bAddMethod = false;
                    for (int j = 0; j < Methods[i].oMethodDescription.ParameterDescs.Count; j++)
                    {
                        bool bAddParameter = false;
                        // Since parameters may be types and hence not compiled into the schema, check the type name first
                        XmlQualifiedName oTypeName = Methods[i].oMethodDescription.ParameterDescs[j].ParamSchemaElement.SchemaTypeName;
                        if((null != oTypeName) && (!oTypeName.IsEmpty) && 
                                (oTypeName.Namespace.Equals(@"http://www.w3.org/2001/XMLSchema", StringComparison.CurrentCultureIgnoreCase)))
                            bAddParameter = true;

                        if (!bAddParameter)
                        {
                            // Now try the compiled schema value if it exists
                            XmlSchemaType oXmlSchemaType = null;
                            XmlSchemaElement oXmlSchemaElement = Methods[i].oMethodDescription.ParameterDescs[j].ParamSchemaElement;
                            try
                            {
                                // We do this to avoid a lot of exceptions for non-compiled schema elements
                                if((null != oXmlSchemaElement.SchemaType) || (null != oXmlSchemaElement.ElementSchemaType))
                                    oXmlSchemaType = XMLHelper.GetSchemaType(oXmlSchemaElement);
                            }
                            catch { }
                            if (oXmlSchemaType is XmlSchemaSimpleType)
                                bAddParameter = true;
                        }

                        // Update the InputParameters
                        if(bAddParameter)
                        {
                            InputParameters.Add(new ParamDescViewModel(Methods[i].oMethodDescription.ParameterDescs[j]));
                            bAddMethod = true;
                        }
                    }
                    // Update the MethodsWithInputParameters
                    if(bAddMethod)
                        MethodsWithInputParameters.Add(Methods[i]);
                }
            }
        }

        /// <summary>
        /// Match up the Methods Config info with the methods loaded and set the default values by type
        /// </summary>
        public void Load(MethodsConfig oMethodsConfig)
        {
            // Set the initial methods
            InitialMethods.Clear();
            for (int i = 0; (null != oMethodsConfig.InitialMethods) && (i < oMethodsConfig.InitialMethods.Length); i++)
            {
                if (!String.IsNullOrEmpty(oMethodsConfig.InitialMethods[i]))
                    InitialMethods.Add(new ObservableString(oMethodsConfig.InitialMethods[i]));
            }
            InitialMethods.Add(new ObservableString(FINAL_LB_VALUE));

            // Use XmlDefaultValuesLoader
            XmlDefaultValues oXmlDefaultValues = null;
            try
            {
                // Capture errors written to the log
                CaptureLog();

                // Get the XmlDefaultValues
                String XmlDefaultValuesFile = oMethodsConfig.DefaultValues;
                if (!String.IsNullOrEmpty(XmlDefaultValuesFile) && !System.IO.Path.IsPathRooted(XmlDefaultValuesFile))
                    XmlDefaultValuesFile = System.IO.Path.Combine(Fuzzsaw.ProjectDirectory, XmlDefaultValuesFile);

                // Load the XmlDefaultValues
                XmlDefaultValuesLoader oXmlDefaultValuesLoader = new XmlDefaultValuesLoader();
                oXmlDefaultValues = oXmlDefaultValuesLoader.Load(XmlDefaultValuesFile);

                StopCapturingLog();
            }
            catch (Exception err)
            {
                Log.Write("Load", err.Message, Log.LogType.Info);
                StopCapturingLog();
            }
            if (null == oXmlDefaultValues)
            {
                HelperCommands.ShowError.Execute(new ErrorHelper(this, "Could not load Xml default values" + Environment.NewLine + m_oLogOutput, true), App.Current.MainWindow);
                return;
            }

            // Set the default values by type
            DefaultStringValue = oXmlDefaultValues.StringDefaultValue;
            DefaultIntegerValue = oXmlDefaultValues.IntegerDefaultValue;
            DefaultDecimalValue = oXmlDefaultValues.DecimalDefaultValue.ToString();
            HexCoder oHexCoder = new HexCoder();
            if(null != oXmlDefaultValues.BinaryDefaultValue)
                DefaultBinaryValue = oHexCoder.Encode(oXmlDefaultValues.BinaryDefaultValue);
            DefaultAnyTypeValue = oXmlDefaultValues.AnyTypeDefaultType;

            DefaultValues.Clear();
            // Set the default values by XPath
            for (int i = 0; (null != oXmlDefaultValues.DefaultValues) && (i < oXmlDefaultValues.DefaultValues.Length); i++)
            {
                DefaultValueViewModel oDPV = new DefaultValueViewModel(MethodsWithInputParameters, InputParameters);
                if(oDPV.SetFromXPath(oXmlDefaultValues.DefaultValues[i].XPath, oXmlDefaultValues.DefaultValues[i].Value))
                    DefaultValues.Add(oDPV);
            }
        }

        /// <summary>
        /// Save the Methods Config info
        /// </summary>
        public void Save(MethodsConfig oMethodsConfig)
        {
            try
            {
                // Capture errors written to the log
                CaptureLog();

                oMethodsConfig.InitialMethods = new string[InitialMethods.Count - 1];
                for (int i = 0; i < InitialMethods.Count - 1; i++)
                    oMethodsConfig.InitialMethods[i] = InitialMethods[i].ToString();

                // Create a new XmlDefaultValues
                XmlDefaultValues oXmlDefaultValues = new XmlDefaultValues();
                oXmlDefaultValues.StringDefaultValue = DefaultStringValue;
                oXmlDefaultValues.IntegerDefaultValue = DefaultIntegerValue;
                oXmlDefaultValues.DecimalDefaultValue = 0.0M;
                decimal dec = 0;
                if (Decimal.TryParse(DefaultDecimalValue, out dec))
                    oXmlDefaultValues.DecimalDefaultValue = dec;
                else
                {
                    Log.Write("MethodsConfig Save", "Unable to convert '" + DefaultDecimalValue + "' to a decimal.  Using 0.0." + Environment.NewLine, Log.LogType.Warning);
                }
                try
                {
                    HexCoder oHexCoder = new HexCoder();
                    oXmlDefaultValues.BinaryDefaultValue = oHexCoder.DecodeToBytes(DefaultBinaryValue);
                }
                catch
                {
                    Log.Write("MethodsConfig Save", "Using default value '00' for the binary default value", Log.LogType.Warning);
                    byte[] oBytes = new byte[1];
                    oBytes[0] = 0;
                    oXmlDefaultValues.BinaryDefaultValue = oBytes;
                }
                oXmlDefaultValues.AnyTypeDefaultType = DefaultAnyTypeValue;

                // Create the XmlDefaultValues
                oXmlDefaultValues.DefaultValues = new DefaultValuesDefaultValue[DefaultValues.Count];
                for (int i = 0; i < DefaultValues.Count; i++)
                {
                    DefaultValuesDefaultValue oDVDV = new DefaultValuesDefaultValue();
                    oDVDV.Value = DefaultValues[i].DefaultValue;
                    oDVDV.XPath = DefaultValues[i].GetXPath();
                    oXmlDefaultValues.DefaultValues[i] = oDVDV;
                }
                
                // Serialise to a temp file
                String tempfile = Common.Common.SerializeFile<XmlDefaultValues>(oXmlDefaultValues, "urn:Fuzzware.Schemas.XmlDefaultValues");
                if (null != tempfile)
                {
                    if (String.IsNullOrEmpty(oMethodsConfig.DefaultValues))
                        oMethodsConfig.DefaultValues = Fuzzsaw.DefaultXmlDefaultValuesFilename;
                    // Create the XmlDefaultValues xml file
                    String FilePath = oMethodsConfig.DefaultValues;
                    if (!System.IO.Path.IsPathRooted(FilePath))
                        FilePath = System.IO.Path.Combine(Fuzzsaw.ProjectDirectory, FilePath);
                    if (!File.Exists(FilePath))
                        Directory.CreateDirectory(System.IO.Path.GetDirectoryName(FilePath));
                    // At this stage the file either exists or the directory where the file will be written exists
                    FileAndPathHelper.Move(tempfile, FilePath);
                }
            }
            catch (Exception err)
            {
                Log.Write("MethodsConfig Save", err.Message, Log.LogType.Warning);
            }
            StopCapturingLog();

            if (m_oLogOutput.Length > 0)
                HelperCommands.ShowError.Execute(new ErrorHelper(this, "There was an error saving the interface input configuration" +
                    Environment.NewLine + m_oLogOutput.ToString(), true), App.Current.MainWindow);
        }

    }
}
