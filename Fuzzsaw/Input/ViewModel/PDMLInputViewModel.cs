using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Windows;
using Fuzzware.Fuzzsaw.Common;
using Fuzzware.Fuzzsaw.Common.ViewModel;
using Fuzzware.Schemas.AutoGenerated;

namespace Fuzzware.Fuzzsaw.Input.ViewModel
{
    public class PDMLInputViewModel : InputBaseViewModel, IInputHandler
    {
        #region Dependency Properties

        static readonly DependencyProperty PDMLFileProperty = DependencyProperty.Register("PDMLFile", typeof(FileControlViewModel), typeof(PDMLInputViewModel));
        public FileControlViewModel PDMLFile
        {
            get { return (FileControlViewModel)GetValue(PDMLFileProperty); }
            set { SetValue(PDMLFileProperty, value); }
        }

        static readonly DependencyProperty XSDXLSTProperty = DependencyProperty.Register("XSDXLST", typeof(FileControlViewModel), typeof(PDMLInputViewModel));
        public FileControlViewModel XSDXLST
        {
            get { return (FileControlViewModel)GetValue(XSDXLSTProperty); }
            set { SetValue(XSDXLSTProperty, value); }
        }

        static readonly DependencyProperty XMLXLSTProperty = DependencyProperty.Register("XMLXLST", typeof(FileControlViewModel), typeof(PDMLInputViewModel));
        public FileControlViewModel XMLXLST
        {
            get { return (FileControlViewModel)GetValue(XMLXLSTProperty); }
            set { SetValue(XMLXLSTProperty, value); }
        }

        #endregion

        public PDMLInputViewModel()
        {
            PDMLFile = new FileControlViewModel();
            PDMLFile.Title = "Choose a PDML file";
            PDMLFile.DefaultExtension = ".pdml";
            PDMLFile.Filter = "PDML files (.pdml)|*.pdml";
            PDMLFile.UseRelativePaths = true;

            XSDXLST = new FileControlViewModel();
            XSDXLST.Title = "Choose a XSLT file to convert PDML to XSD";
            XSDXLST.DefaultExtension = ".xslt";
            XSDXLST.Filter = "XSLT files (.xslt)|*.xslt";
            XSDXLST.UseRelativePaths = true;
            XSDXLST.Filename = System.IO.Path.Combine(Fuzzsaw.SchemasDirectory, "PDML2XSD.xslt");

            XMLXLST = new FileControlViewModel();
            XMLXLST.Title = "Choose a XSLT file to convert PDML to XML";
            XMLXLST.DefaultExtension = ".xslt";
            XMLXLST.Filter = "XSLT files (.xslt)|*.xslt";
            XMLXLST.UseRelativePaths = true;
            XMLXLST.Filename = System.IO.Path.Combine(Fuzzsaw.SchemasDirectory, "PDML2XML.xslt");
        }

        #region IInputHandler Members

        public Type GetDataInputHandlerItemType()
        {
            return typeof(Fuzzware.Schemas.AutoGenerated.PDMLInput);
        }

        public DataInputHandler DataInputHandler
        {
            get
            {
                PDMLInput oPDMLInput = new PDMLInput();
                oPDMLInput.InputPDMLPathAndFile = PDMLFile.Filename;
                if (String.IsNullOrEmpty(oPDMLInput.OutputPrefix))
                    oPDMLInput.OutputPrefix = "pkt";
                if (String.IsNullOrEmpty(oPDMLInput.OutputNamespace))
                    oPDMLInput.OutputNamespace = "urn:Fuzzware.Projects." + ((MainWindowViewModel)App.Current.MainWindow.DataContext).CurrentProject.ProjectName;
                oPDMLInput.OutputXMLPathAndFile = (string)(new ChangeFileExtension()).Convert(PDMLFile.Filename, null, ".xml", null);
                oPDMLInput.OutputXSDPathAndFile = (string)(new ChangeFileExtension()).Convert(PDMLFile.Filename, null, ".xsd", null);
                oPDMLInput.OptionalXSLT = new PDMLInputOptionalXSLT();
                oPDMLInput.OptionalXSLT.PDML2XSD = XSDXLST.Filename;
                oPDMLInput.OptionalXSLT.PDML2XML = XMLXLST.Filename;
                m_oDataInputHandler.Item = oPDMLInput;
                return m_oDataInputHandler;
            }
            set
            {
                if (!(value.Item is Fuzzware.Schemas.AutoGenerated.PDMLInput))
                    return;

                m_oDataInputHandler = value;
                PDMLInput oPDMLInput = (Fuzzware.Schemas.AutoGenerated.PDMLInput)m_oDataInputHandler.Item;
                PDMLFile.Filename = oPDMLInput.InputPDMLPathAndFile;
                if (null != oPDMLInput.OptionalXSLT)
                {
                    if(!String.IsNullOrEmpty(oPDMLInput.OptionalXSLT.PDML2XSD))
                        XSDXLST.Filename = oPDMLInput.OptionalXSLT.PDML2XSD;
                    if(!String.IsNullOrEmpty(oPDMLInput.OptionalXSLT.PDML2XML))
                        XMLXLST.Filename = oPDMLInput.OptionalXSLT.PDML2XML;
                }
            }
        }

        #endregion
    }
}
