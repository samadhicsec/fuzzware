using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Text;
using System.Windows;
using System.Windows.Input;
using System.ComponentModel;
using System.Threading;
using Fuzzware.Fuzzsaw.Common;
using Fuzzware.Fuzzsaw.Common.ViewModel;
using Fuzzware.Common;
using Fuzzware.Common.MethodInterface;
using Fuzzware.Schemas.AutoGenerated;

namespace Fuzzware.Fuzzsaw.Input.ViewModel
{
    public class ActiveXInputViewModel : InputBaseViewModel, IInputHandler, IDataErrorInfo
    {
        #region Dependency Properties

        static readonly DependencyProperty ActiveXIDProperty = DependencyProperty.Register("ActiveXID", typeof(string), typeof(ActiveXInputViewModel));
        public string ActiveXID
        {
            get { return (string)GetValue(ActiveXIDProperty); }
            set { SetValue(ActiveXIDProperty, value); }
        }

        static readonly DependencyProperty ActiveXEdittableProperty = DependencyProperty.Register("ActiveXEdittable", typeof(bool), typeof(ActiveXInputViewModel));
        public bool ActiveXEdittable
        {
            get { return (bool)GetValue(ActiveXEdittableProperty); }
            set { SetValue(ActiveXEdittableProperty, value); }
        }

        static readonly DependencyProperty ActiveXErrorProperty = DependencyProperty.Register("ActiveXError", typeof(string), typeof(ActiveXInputViewModel));
        public string ActiveXError
        {
            get { return (string)GetValue(ActiveXErrorProperty); }
            set { SetValue(ActiveXErrorProperty, value); }
        }

        static readonly DependencyProperty MethodsConfigProperty = DependencyProperty.Register("MethodsConfig", typeof(MethodsConfigControlViewModel), typeof(ActiveXInputViewModel));
        public MethodsConfigControlViewModel MethodsConfig
        {
            get { return (MethodsConfigControlViewModel)GetValue(MethodsConfigProperty); }
            set { SetValue(MethodsConfigProperty, value); }
        }

        #endregion

        protected Guid m_oGuid;
        protected String m_ProgId;

        public ActiveXInputViewModel()
        {
            MethodsConfig = new MethodsConfigControlViewModel();
            ActiveXEdittable = true;
        }

        /// <summary>
        /// Validates the ActiveX ClassId or ProgId
        /// </summary>
        protected bool ValidateActiveXID()
        {
            MethodsConfig.Methods.Clear();
            ActiveXError = null;

            if (String.IsNullOrEmpty(ActiveXID))
                return true;

            m_ProgId = null;
            // Try to convert to Guid
            m_oGuid = Guid.Empty;
            try
            {
                m_oGuid = new Guid(ActiveXID);
            }
            catch { }

            bool bTryToCreate = false;
            try
            {
                Type COMType = null;
                if (Guid.Empty != m_oGuid)
                {
                    // Try to get the Type via ClassId
                    COMType = System.Type.GetTypeFromCLSID(m_oGuid, true);
                }
                else
                {
                    // Try to get the Type via ProgId
                    COMType = System.Type.GetTypeFromProgID(ActiveXID, true);
                    m_ProgId = ActiveXID;
                    // Be sure not to set m_oGuid as we rely on it being Guid.Empty to distinguish ClassId and ProgId cases
                }
                bTryToCreate = true;
            }
            catch { }

            if (!bTryToCreate)
                return false;

            ActiveXEdittable = false;
            ThreadStart ts = delegate   // This delegate gets executed on a background thread
            {
                COMLibraryDescription oCOMLibrary = null;
                // Try to create the COM Library Description
                CaptureLog();
                try
                {
                    Fuzzware.Schemas.AutoGenerated.MethodsConfig oMethodsConfig = new MethodsConfig();
                    oCOMLibrary = new COMLibraryDescription(Fuzzsaw.ProjectDirectory, m_oGuid, m_ProgId, oMethodsConfig);
                }
                catch (Exception err)
                {
                    if (!(err is LoggedException))
                        try
                        {   // This will through an error we have to catch
                            Log.Write("", "Error creating COM Library Description" + Environment.NewLine + err.Message, Log.LogType.Error);
                        }
                        catch { }
                }
                StopCapturingLog();

                // The last thing the background thread does is add this delegate to the Dispatcher which executes it on the UI thread
                // so we can update all our DependencyObjects
                Dispatcher.BeginInvoke(System.Windows.Threading.DispatcherPriority.Normal, (EventHandler)
                delegate
                {
                    if (null == oCOMLibrary)
                    {
                        ActiveXError = m_oLogOutput.ToString();
                    }
                    else
                    {
                        // Populate Methods
                        for (int i = 0; i < oCOMLibrary.Interfaces.Count; i++)
                        {
                            for (int j = 0; j < oCOMLibrary.Interfaces[i].Methods.Count; j++)
                            {
                                MethodsConfig.Methods.Add(new MethodInfoViewModel(oCOMLibrary.Interfaces[i].GetMethodNodeName(oCOMLibrary.Interfaces[i].Methods[j]),
                                    oCOMLibrary.Interfaces[i].Methods[j]));
                            }
                        }
                    }
                    ActiveXEdittable = true;
                }, null, null);
            };
            ts.BeginInvoke(delegate(IAsyncResult aysncResult) { ts.EndInvoke(aysncResult); }, null);
                
            return true;

            //// Try to create the COM Library Description
            //COMLibraryDescription oCOMLibrary = null;
            //CaptureLog();
            //try
            //{
            //    Fuzzware.Schemas.AutoGenerated.MethodsConfig oMethodsConfig = new MethodsConfig();
            //    oCOMLibrary = new COMLibraryDescription(Fuzzsaw.ProjectDirectory, m_oGuid, m_ProgId, oMethodsConfig);
            //}
            //catch (Exception err)
            //{
            //    if (!(err is LoggedException))
            //        try
            //        {   // This will through an error we have to catch
            //            Log.Write("", "Error creating COM Library Description" + Environment.NewLine + err.Message, Log.LogType.Error);
            //        }
            //        catch { }
            //}
            //StopCapturingLog();
            //if (null == oCOMLibrary)
            //{
            //    ActiveXError = m_oLogOutput.ToString();
            //    return false;
            //}

            //// Populate Methods
            //for (int i = 0; i < oCOMLibrary.Interfaces.Count; i++)
            //{
            //    for (int j = 0; j < oCOMLibrary.Interfaces[i].Methods.Count; j++)
            //    {
            //        MethodsConfig.Methods.Add(new MethodInfoViewModel(oCOMLibrary.Interfaces[i].GetMethodNodeName(oCOMLibrary.Interfaces[i].Methods[j]),
            //            oCOMLibrary.Interfaces[i].Methods[j]));
            //    }
            //}
            //return true;
        }

        #region IDataErrorInfo Members

        public string Error
        {
            get { throw new NotImplementedException(); }
        }

        public string this[string columnName]
        {
            get
            {
                String error = null;
                if (columnName.Equals(ActiveXIDProperty.Name))
                {
                    if (!ValidateActiveXID())
                        error = "An error occurred";
                }
                
                return error;
            }
        }

        #endregion

        #region IInputHandler Members

        public Type GetDataInputHandlerItemType()
        {
            return typeof(Fuzzware.Schemas.AutoGenerated.COMInput);
        }

        public Fuzzware.Schemas.AutoGenerated.DataInputHandler DataInputHandler
        {
            get
            {
                COMInput oCOMInput = new COMInput();

                oCOMInput.Item = ActiveXID;
                if (Guid.Empty == m_oGuid)
                    oCOMInput.ItemElementName = ItemChoiceType.ProgId;
                else
                    oCOMInput.ItemElementName = ItemChoiceType.CLSID;

                // Default to the Project Directory for XSD and XML output files
                oCOMInput.OutputDir = "";

                // Save the MethodConfig, and let it update the WSDLInput
                oCOMInput.MethodsConfig = new MethodsConfig();
                MethodsConfig.Save(oCOMInput.MethodsConfig);

                m_oDataInputHandler.Item = oCOMInput;
                return m_oDataInputHandler;
            }
            set
            {
                if (!(value.Item is Fuzzware.Schemas.AutoGenerated.COMInput))
                    return;

                m_oDataInputHandler = value;
                COMInput oCOMInput = (Fuzzware.Schemas.AutoGenerated.COMInput)m_oDataInputHandler.Item;

                // Load the COM Control Id
                ActiveXID = oCOMInput.Item;

                // Load the Methods Config
                if(null != oCOMInput.MethodsConfig)
                    MethodsConfig.Load(oCOMInput.MethodsConfig);
            }
        }
        #endregion
    }
}
