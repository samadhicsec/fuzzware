using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.IO;
using System.Threading;
using System.Windows;
using System.Windows.Threading;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Shapes;
using System.Reflection;
using System.Xml.Schema;
using Fuzzware.Common;
using Fuzzware.Common.XML;
using Fuzzware.Schemas.AutoGenerated;
using Fuzzware.Convert2XML;
using Fuzzware.Convert2XML.C2X;

namespace Fuzzware.Fuzzsaw
{
    /// <summary>
    /// Interaction logic for C2XWindow.xaml
    /// </summary>
    public partial class C2XWindow : Window, System.ComponentModel.INotifyPropertyChanged
    {
        Encoding oOutputEncoding;
        Fuzzware.Convert2XML.Convert2XMLInput C2XInputHandler;
        protected Fuzzware.Schemas.AutoGenerated.Convert2XMLInput C2XSettings;
        Thread C2XThread;
        bool bPause;
        int iDelay = 100;

        // Log output
        StringBuilder oLogOutput;

        public C2XWindow(Fuzzware.Schemas.AutoGenerated.Convert2XMLInput C2XInput, Encoding OutputEncoding)
        {
            oLogOutput = new StringBuilder();

            Log.LogEvent += LogUpdated;

            InitializeComponent();

            C2XSettings = C2XInput;
            oOutputEncoding = OutputEncoding;
        }

        private void LogUpdated(object sender, LogEventArgs a)
        {
            oLogOutput.AppendLine(a.Message);
            RaisePropertyChanged("LogOutput");
        }

        public String LogOutput
        {
            get
            {
                return oLogOutput.ToString();
            }
        }

        void ProgressCallback(object sender, C2XProgressEventArgs a)
        {
            // Show the current XML
            this.Dispatcher.Invoke(DispatcherPriority.Normal, new System.Windows.Forms.MethodInvoker(delegate()
            {
                this.tbC2XOutput.Text = a.XML;
                tbC2XOutput.ScrollToEnd();
            }));

            // If paused, then loop;
            while (bPause)
                System.Threading.Thread.Sleep(100);

            // Pause for some amount of time
            System.Threading.Thread.Sleep(iDelay);
        }

        private void DoConversion()
        {
            try
            {
                Fuzzware.Convert2XML.C2X.Convert2XML C2X = new Fuzzware.Convert2XML.C2X.Convert2XML(C2XInputHandler.SchemaSet, C2XInputHandler.ObjectDB, oOutputEncoding);
                C2X.ProgressEventHandler += ProgressCallback;
                if (C2X.Convert(C2XSettings.Convert2XML))
                {
                    Log.Write(MethodBase.GetCurrentMethod(), "Conversion process was successful", Log.LogType.Info);
                }
                else
                {
                    Log.Write(MethodBase.GetCurrentMethod(), "Conversion process was unsuccessful", Log.LogType.Info);
                }
            }
            catch (Exception e)
            {
                if (e is System.Threading.ThreadAbortException)
                {
                    Log.Write(MethodBase.GetCurrentMethod(), "Conversion process was ended", Log.LogType.Info);
                }
                else
                {
                    System.Windows.MessageBox.Show("An error occurred, see Log window for details", "Error", MessageBoxButton.OK);
                }
            }
            this.Dispatcher.Invoke(DispatcherPriority.Normal, new System.Windows.Forms.MethodInvoker(delegate()
            {
                End();
            }));
        }

        
        #region INotifyPropertyChanged Members

        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

        protected void RaisePropertyChanged(string propertyName)
        {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null))
            {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }

        #endregion

        public void Initialise()
        {
            tbiLogOutput.Focus();
            try
            {
                C2XInputHandler = new Fuzzware.Convert2XML.Convert2XMLInput();
                C2XInputHandler.Initialise(C2XSettings, oOutputEncoding);
                // Read it so it gets generated
                object o = C2XInputHandler.ObjectDB;
            }
            catch
            {
                return;
                //System.Windows.MessageBox.Show(e.Message, "An initialisation error occurred", MessageBoxButton.OK);
            }
            bC2XStart.IsEnabled = true;
            bC2XPause.IsEnabled = true;
        }

        private void bC2XInitialise_Click(object sender, RoutedEventArgs e)
        {
            Initialise();
        }

        public void Start()
        {
            bPause = false;
            tbiC2XOutput.Focus();
            // May need to kick this off in its own thread
            C2XThread = new Thread(new ThreadStart(DoConversion));
            C2XThread.IsBackground = true;
            C2XThread.SetApartmentState(ApartmentState.STA);
            C2XThread.Start();
            bC2XInitialise.IsEnabled = false;
            bC2XStart.IsEnabled = false;
            bC2XPause.IsEnabled = true;
            bC2XResume.IsEnabled = false;
            bC2XEnd.IsEnabled = true;
        }

        private void bC2XStart_Click(object sender, RoutedEventArgs e)
        {
            Start();
        }

        private void bC2XPause_Click(object sender, RoutedEventArgs e)
        {
            bPause = true;
            bC2XPause.IsEnabled = false;
            bC2XResume.IsEnabled = true;
        }

        private void bC2XResume_Click(object sender, RoutedEventArgs e)
        {
            bPause = false;
            bC2XPause.IsEnabled = true;
            bC2XResume.IsEnabled = false;
        }

        private void End()
        {
            if ((null != C2XThread) && (C2XThread.IsAlive))
                C2XThread.Abort();
            bC2XInitialise.IsEnabled = true;
            bC2XStart.IsEnabled = true;
            bC2XPause.IsEnabled = false;
            bC2XResume.IsEnabled = false;
            bC2XEnd.IsEnabled = false;
        }

        private void bC2XEnd_Click(object sender, RoutedEventArgs e)
        {
            End();
        }

        private void wC2XWindow_Closing(object sender, System.ComponentModel.CancelEventArgs e)
        {
            // Remove Log event handler
            Log.LogEvent -= LogUpdated;

            // Make sure thread is finished
            End();
        }

        public double Delay
        {
            get
            {
                return (double)iDelay;
            }
            set
            {
                iDelay = (int)value;
            }
        }
    }
}
