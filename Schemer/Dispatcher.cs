using System;
using System.IO;
using System.Collections.Generic;
using System.Text;
using System.Reflection;
using System.Xml;
using System.Xml.Schema;
using System.Threading;
using Fuzzware.Common;
using Fuzzware.Common.XML;
using Fuzzware.Common.XML.Restrictions;
using Fuzzware.Common.DataSchema.Restrictions;
using Fuzzware.Schemer.Statistics;
using Fuzzware.Schemer.Fuzzers;
using Fuzzware.Schemas.AutoGenerated;
using Fuzzware.Evaluate;
using Fuzzware.ConvertFromXML;
using Fuzzware.Schemer.PreOutputHandlers;

namespace Fuzzware.Schemer
{
    class Dispatcher
    {
        private ConfigData oConfigData;
        private PreCompData oPreComp;
        private OutputHandler oOutputHandler;
        private PreOutputHandler oPreOutputHandler;
        private bool XMLValidationError;

        public Dispatcher(ConfigData oConfigData, PreCompData oPreComp)
        {
            this.oConfigData = oConfigData;
            this.oPreComp = oPreComp;
            // Create the output handler
            oOutputHandler = OutputHandlersFactory.GetOutputHandler(oConfigData.Config.Output.EvaluationMethod);
            oOutputHandler.Initialise(oConfigData.Config.Output.EvaluationMethod.Item, oPreComp.InputHandler);
            // Create the pre-output handler
            oPreOutputHandler = PreOutputHandlersFactory.GetPreOutputHandler(oConfigData.Config.Output.PreOutput, oPreComp.InputHandler);
            if (null != oPreOutputHandler)
            {
                if (oPreOutputHandler is ProtocolPreOutputHandler)   // Special case this as its not actually in the XML
                    oPreOutputHandler.Initialise(oPreComp.GetOutputSettings(oConfigData), oPreComp.InputHandler, oOutputHandler);
                else
                    oPreOutputHandler.Initialise(oConfigData.Config.Output.PreOutput.UserDefinedPreOutput, oPreComp.InputHandler, oOutputHandler);
            }
        }

        public bool Dispatch(XmlDocument oXMLDoc, EngineState oEngineState, IFuzzer Fuzzer)
        {
            bool TestcaseValidationFailure = false;

            // Initialise the fuzzer
            Fuzzer.Initialise();
            
            // Initialise the fuzzer state
            oEngineState.InitialiseFuzzerState(Fuzzer);
            
            // Loop while fuzzer has not finished
            do
            {
                FuzzerStats.AddToCountOfPossibleTestCases();

                try
                {
                    // Get the State.ControlMutex.  This should be the very first thing we do.
                    oEngineState.ControlMutex.WaitOne();

                    // Check if the Controller put the Fuzzer into a Finished state
                    if (Fuzzer.IsFinished)
                        break;

                    // Fuzz
                    Fuzzer.Fuzz();

                    // Check to see if the current state is the finished state
                    if (Fuzzer.IsFinished)
                    {
                        // If we exit here it means the fuzz function was 'Finished' and our count is one off
                        FuzzerStats.SubtractFromCountOfPossibleTestCases();
                        break;
                    }

                    MemoryStream XMLMemStream = null;
                    try
                    {
                        // Validate the XML we have just fuzzed.  This should validate(?).  We need this so the output can use the post-schema
                        // validation information
                        XMLValidationError = false;
                        oXMLDoc.Validate(XMLValidationEventHandler);
                        if (XMLValidationError)
                        {
                            // To much noise to print out all failed testcases, so tell user and write specifics to log.
                            if (!TestcaseValidationFailure)
                            {
                                Log.Write(MethodBase.GetCurrentMethod(), "There are some fuzzed XML testcases for the current node that did not pass XML validation.  See the log for specific details.", Log.LogType.Warning);
                                TestcaseValidationFailure = true;
                            }
                            Log.Write(MethodBase.GetCurrentMethod(), "Could not validate fuzzed XML.  Skipping " + oEngineState.ToString(), Log.LogType.LogOnlyInfo);
                            throw new SkipStateException();
                        }

                        // Write the XML to a MemoryStream
                        XMLMemStream = new MemoryStream();
                        ConvertXMLToStream(oXMLDoc, XMLMemStream);

                    }
                    catch (OutOfMemoryException)
                    {
                        GC.Collect();
                        GC.WaitForPendingFinalizers();
                        Log.Write(MethodBase.GetCurrentMethod(), "OutOfMemoryException occurred for state '" + oEngineState.ToString() + "', garbage collection was invoked", Log.LogType.Warning);
                        throw new SkipStateOutOfMemoryException();
                    }
                    
                    // If the user has specified that the output be compiled against the schema, we check it here
                    if (oConfigData.Config.Output.ConvertFromXML.VerifyOutputAgainstInputSchema)
                        VerifyOutput(XMLMemStream);

                    // If a PreOuputHandler has been specified, this will alter the data parsed to the OutputHandler
                    if (null != oPreOutputHandler)
                    {
                        XMLMemStream.Seek(0, SeekOrigin.Begin);
                        XMLMemStream = oPreOutputHandler.Output(XMLMemStream);
                        if (null == XMLMemStream)
                        {
                            Log.Write(MethodBase.GetCurrentMethod(), "The PreOutputHandler returned a null test case (State '" + oEngineState.ToString() + "'", Log.LogType.Warning);
                        }
                    }

                    XMLMemStream.Seek(0, SeekOrigin.Begin);
                    // Use the OutputHandler to evaluate the testcase
                    if (!oOutputHandler.Output(XMLMemStream, oEngineState.ToString()))
                        break;

                    XMLMemStream.Dispose();                    
                }
                catch (SkipStateException e)
                {
                    if (e is SkipStateOutOfRangeException)
                    {
                        // This was not a real test case
                        FuzzerStats.SubtractFromCountOfPossibleTestCases();
                    }
                    else if (e is SkipStateNoAllCaseException)
                    {
                        // This was not a real test case
                        FuzzerStats.SubtractFromCountOfPossibleTestCases();
                    }
                    else if (e is SkipStateFuzzerInGroupFinished)
                    {
                        // Do nothing
                    }
                    else if (e is SkipStateOutOfMemoryException)
                    {
                        // We can't try this test case
                        FuzzerStats.SubtractFromCountOfPossibleTestCases();
                    }
                    else
                    {
                        // We skip this particular state
                        FuzzerStats.AddToCountOfSkippedTestCases();
                    }
                }
                catch (ValidateFailedException)
                {
                    // We skip this particular state (generally due to some validation failure)
                    FuzzerStats.AddToCountOfSkippedTestCases();
                }

                // Restore original values
                Fuzzer.Restore();

                // Record history for monitoring purposes
                oEngineState.RecordHistory();
                
                // Increment the IFuzzState
                Fuzzer.Next();

                if (Fuzzer.IsFinished)
                    break;

                // This should be the very last thing we do.
                oEngineState.ControlMutex.ReleaseMutex();
                Thread.Sleep(5);    // Give the Controller thread a chance to acquire the mutex

            } while (true);

            // The first thing we do in the do loop is acquire the mutex, and the last thing we do is
            // release it.  When (not if) we break out of the do loop we need to release the mutex.
            oEngineState.ControlMutex.ReleaseMutex();

            // Any final cleanup, or inform user of any particulars for this fuzzer
            Fuzzer.End();

            // Let the state handle any post node fuzzing activities
            oEngineState.FinialiseFuzzerState();

            return true;
        }

        void ConvertXMLToStream(XmlDocument oXMLDoc, MemoryStream XMLMemStream)
        {
            MemoryStream tempXMLMemStream = new MemoryStream();
            OutputSettings oSettings = oPreComp.GetOutputSettings(oConfigData);

            // Create the string that will hold the entire XML
            OutputWriter FuzzWriter = new OutputWriter(tempXMLMemStream, oSettings);
            XmlWriter Writer = XmlWriter.Create(FuzzWriter as XmlWriter, oSettings.XmlSettings);

            oXMLDoc.WriteTo(Writer);
            Writer.Flush();

            // We use a temp memory stream so we can close the XmlWriter
            tempXMLMemStream.WriteTo(XMLMemStream);

            tempXMLMemStream.Dispose();
            Writer.Close();

            return;
        }

        private void XMLValidationEventHandler(Object sender, ValidationEventArgs e)
        {
            //Log.Write(MethodBase.GetCurrentMethod(), "XML validation error - " + e.Message, Log.LogType.Warning);
            XMLValidationError = true;
        }

        private void VerifyOutputValidationEventHandler(Object sender, ValidationEventArgs e)
        {
            FuzzerStats.CountOfVerifyFailureSkippedTestCases++;
            throw new SkipStateException();
        }

        private void VerifyOutput(MemoryStream XMLMemStream)
        {
            XmlDocument oXMLDoc = new XmlDocument();
            // Create the validating reader and specify schema validation.
            XmlReaderSettings settings = new XmlReaderSettings();
            settings.ValidationType = ValidationType.Schema;
            settings.Schemas = oPreComp.SchemaSet;
            settings.ValidationEventHandler += VerifyOutputValidationEventHandler;

            XMLMemStream.Position = 0;
            XmlReader reader = XmlReader.Create(XMLMemStream, settings);
            oXMLDoc.Load(reader);
            reader.Close();
        }

        public void TestDispatch(XmlDocument oXMLDoc)
        {
            OutputSettings oSettings = oPreComp.GetOutputSettings(oConfigData);

            Log.Write(MethodBase.GetCurrentMethod(), "Creating reference test case", Log.LogType.Info);

            MemoryStream XMLMemStream = new MemoryStream();

            ConvertXMLToStream(oXMLDoc, XMLMemStream);

            EngineState State = new EngineState(oConfigData, oPreComp, true);

            if (oConfigData.Config.Output.ConvertFromXML.VerifyOutputAgainstInputSchema)
                VerifyOutput(XMLMemStream);

            // Test against the original file
            if(!String.IsNullOrEmpty(oConfigData.Config.originalFile))
            {
                try
                {
                    Log.Write(MethodBase.GetCurrentMethod(), "Comparing to original file '" + oConfigData.Config.originalFile + "'", Log.LogType.Info);
                    byte[] OriginalFile = null;
                    using (FileStream fs = new FileStream(oConfigData.Config.originalFile, FileMode.Open, FileAccess.Read, FileShare.ReadWrite))
                    {
                        OriginalFile = new byte[fs.Length];
                        fs.Read(OriginalFile, 0, (int)fs.Length);
                    }
                    if (OriginalFile != null)
                    {
                        if (XMLMemStream.Length == OriginalFile.Length)
                        {
                            XMLMemStream.Position = 0;
                            byte[] TestCase = XMLMemStream.ToArray();
                            int i = 0;
                            for (; i < OriginalFile.Length; i++)
                            {
                                if (TestCase[i] != OriginalFile[i])
                                {
                                    Log.Write(MethodBase.GetCurrentMethod(), "The test case differs from the original file at byte " + i, Log.LogType.Info);
                                    break;
                                }
                            }
                            if (i == OriginalFile.Length)
                                Log.Write(MethodBase.GetCurrentMethod(), "The test case and the original file are identical", Log.LogType.Info);
                        }
                        else
                            Log.Write(MethodBase.GetCurrentMethod(), "The specified original file and the test case were of different lengths", Log.LogType.Info);
                    }
                }
                catch (Exception e)
                {
                    Log.Write(MethodBase.GetCurrentMethod(), "Error comparing the original file to the test case. Message:\n" + e.Message, Log.LogType.Info);
                }
            }
            else
                Log.Write(MethodBase.GetCurrentMethod(), "Finished creating reference test case", Log.LogType.Info);

            XMLMemStream.Seek(0, SeekOrigin.Begin);

            // Run pre output processing
            if (null != oPreOutputHandler)
            {
                XMLMemStream = oPreOutputHandler.Output(XMLMemStream);
                if (null == XMLMemStream)
                {
                    Log.Write(MethodBase.GetCurrentMethod(), "The PreOutputHandler returned a null test case (State '" + State.ToString() + "'", Log.LogType.Warning);
                }
            }

            XMLMemStream.Seek(0, SeekOrigin.Begin);
            // Output the test case
            oOutputHandler.Output(XMLMemStream, State.ToString());
            
        }
    }
}
