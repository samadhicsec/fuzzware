using System;
using System.Collections.Generic;
using System.Text;
using System.Reflection;
using Fuzzware.Schemer.AutoGenerated;
using Fuzzware.Common;
using Fuzzware.Common.XML;
using Fuzzware.Common.DataSchema;

namespace Fuzzware.Schemer.Fuzzers.DateTimeFuzzing
{
    class ReplaceDateTime : FuzzerBase, ITypeFuzzer
    {
        protected DateTimeValueFuzzer ValueConfig;
        protected ObjectDBEntry oSchemaElement;

        public ReplaceDateTime(ConfigData oConfigData, PreCompData oPreCompData, ObjectDBEntry oSchemaElement)
            : base(oConfigData, oPreCompData)
        {
            this.oSchemaElement = oSchemaElement;
            ConfigDefinedValues = null;
            ValueConfig = oConfigData.STFConfig.DateTimeValueFuzzer;

            bool UsingCustomFuzzer = false;
            if (null != ValueConfig)
            {
                // Check if the user has assigned custom fuzzers for this node
                if (ValueConfig.CustomFuzzer != null)
                    for (int i = 0; i < ValueConfig.CustomFuzzer.Length; i++)
                    {
                        if (ValueConfig.CustomFuzzer[i].NodeNamespace.Equals(oSchemaElement.Name.Namespace, StringComparison.CurrentCultureIgnoreCase) &&
                            ValueConfig.CustomFuzzer[i].NodeName.Equals(oSchemaElement.Name.Name, StringComparison.CurrentCultureIgnoreCase))
                        {
                            AssignValueFuzzers(ValueConfig.CustomFuzzer[i]);
                            UsingCustomFuzzer = true;
                            Log.Write(MethodBase.GetCurrentMethod(), "Custom DateTimeValue fuzzer being used", Log.LogType.LogOnlyInfo);
                            break;
                        }
                    }
                // Assign the default fuzzers if there is no custom one
                if (!UsingCustomFuzzer && (ValueConfig.DefaultFuzzers != null))
                    AssignValueFuzzers(ValueConfig.DefaultFuzzers);
            }
        }

        protected virtual void AssignValueFuzzers(DateTimeValueFuzzerType FuzzersType)
        {
            ValueFuzzerType oValueFuzzerType = FuzzersType.GetType().GetProperty(GetType().Name).GetValue(FuzzersType, null) as ValueFuzzerType;
            if (oValueFuzzerType != null)
            {
                Add(GetType().Name, FuzzConfigDefinedValues);
                ConfigDefinedValues = GetValueGroup(oValueFuzzerType.ValueGroupRef);
            }
        }

        protected string[] GetValueGroup(String ID)
        {
            for (int i = 0; i < ValueConfig.DateTimeGroup.Length; i++)
            {
                if (ID == ValueConfig.DateTimeGroup[i].ID)
                {
                    return ConvertFuzzingValues(ValueConfig.DateTimeGroup[i].DateTimeValue);
                }
            }
            Log.Write(MethodBase.GetCurrentMethod(), "Could not find a ValueGroup with ID='" + ID + "'.  '" + GetType().Name + "' will be skipped.", Log.LogType.Warning);
            return null;
        }

        /// <summary>
        /// The input DateTime strings may not be appropriate for the type we are actually fuzzing, so convert the values we can to
        /// appropriate types.  No duplicates are entered.
        /// </summary>
        /// <param name="Values"></param>
        /// <returns></returns>
        protected string[] ConvertFuzzingValues(string[] Values)
        {
            string[] ConvertedValues = new string[Values.Length];
            Array.Copy(Values, ConvertedValues, Values.Length);

            for (int i = 0; i < Values.Length; i++)
            {
                string ConvertedValue = Values[i];
                switch (oSchemaElement.DataSchemaType)
                {
                    case DataSchemaTypeCode.DateTime:
                        // Only DateTime type allowed
                        if (!DateTimeHelper.IsDateTime(Values[i]))
                            ConvertedValue = String.Empty;
                        break;
                    case DataSchemaTypeCode.Date:
                        // Allow DateTime, Date
                        if (DateTimeHelper.IsDate(Values[i]))
                            break;  // Already assigned ConvertedValue
                        else if (DateTimeHelper.IsDateTime(Values[i]))
                            ConvertedValue = DateTimeHelper.ConvertDateTimeTo(oSchemaElement.DataSchemaType, Values[i]);
                        else
                            ConvertedValue = String.Empty;
                        break;
                    case DataSchemaTypeCode.Time:
                        // Allow DateTime, Time
                        if (DateTimeHelper.IsTime(Values[i]))
                            break; // Already assigned ConvertedValue
                        else if (DateTimeHelper.IsDateTime(Values[i]))
                            ConvertedValue = DateTimeHelper.ConvertDateTimeTo(oSchemaElement.DataSchemaType, Values[i]);
                        else
                            ConvertedValue = String.Empty;
                        break;
                    case DataSchemaTypeCode.GYear:
                        // Allow DateTime, Date, GYearMonth, GYear
                        if (DateTimeHelper.IsYear(Values[i]))
                            break; // Already assigned ConvertedValue
                        else if (DateTimeHelper.IsDateTime(Values[i]))
                            ConvertedValue = DateTimeHelper.ConvertDateTimeTo(oSchemaElement.DataSchemaType, Values[i]);
                        else if (DateTimeHelper.IsDate(Values[i]))
                            ConvertedValue = DateTimeHelper.ConvertDateTo(oSchemaElement.DataSchemaType, Values[i]);
                        else if (DateTimeHelper.IsYearMonth(Values[i]))
                            ConvertedValue = DateTimeHelper.ConvertYearMonthTo(oSchemaElement.DataSchemaType, Values[i]);
                        else
                            ConvertedValue = String.Empty;
                        break;
                    case DataSchemaTypeCode.GYearMonth:
                        // Allow DateTime, Date, GYearMonth
                        if (DateTimeHelper.IsYearMonth(Values[i]))
                            break; // Already assigned ConvertedValue
                        else if (DateTimeHelper.IsDateTime(Values[i]))
                            ConvertedValue = DateTimeHelper.ConvertDateTimeTo(oSchemaElement.DataSchemaType, Values[i]);
                        else if (DateTimeHelper.IsDate(Values[i]))
                            ConvertedValue = DateTimeHelper.ConvertDateTo(oSchemaElement.DataSchemaType, Values[i]);
                        else
                            ConvertedValue = String.Empty;
                        break;
                    case DataSchemaTypeCode.GMonth:
                        // Allow DateTime, Date, GYearMonth, GMonth
                        if (DateTimeHelper.IsMonth(Values[i]))
                            break; // Already assigned ConvertedValue
                        else if (DateTimeHelper.IsDateTime(Values[i]))
                            ConvertedValue = DateTimeHelper.ConvertDateTimeTo(oSchemaElement.DataSchemaType, Values[i]);
                        else if (DateTimeHelper.IsDate(Values[i]))
                            ConvertedValue = DateTimeHelper.ConvertDateTo(oSchemaElement.DataSchemaType, Values[i]);
                        else if (DateTimeHelper.IsYearMonth(Values[i]))
                            ConvertedValue = DateTimeHelper.ConvertYearMonthTo(oSchemaElement.DataSchemaType, Values[i]);
                        else if (DateTimeHelper.IsMonthDay(Values[i]))
                            ConvertedValue = DateTimeHelper.ConvertMonthDayTo(oSchemaElement.DataSchemaType, Values[i]);
                        else
                            ConvertedValue = String.Empty;
                        break;
                    case DataSchemaTypeCode.GMonthDay:
                        // Allow DateTime, Date, GMonthDay
                        if (DateTimeHelper.IsMonthDay(Values[i]))
                            break; // Already assigned ConvertedValue
                        else if (DateTimeHelper.IsDateTime(Values[i]))
                            ConvertedValue = DateTimeHelper.ConvertDateTimeTo(oSchemaElement.DataSchemaType, Values[i]);
                        else if (DateTimeHelper.IsDate(Values[i]))
                            ConvertedValue = DateTimeHelper.ConvertDateTo(oSchemaElement.DataSchemaType, Values[i]);
                        else
                            ConvertedValue = String.Empty;
                        break;
                    case DataSchemaTypeCode.GDay:
                        // Allow DateTime, Date, GMonthDay, GDay
                        if (DateTimeHelper.IsDay(Values[i]))
                            break; // Already assigned ConvertedValue
                        else if (DateTimeHelper.IsDateTime(Values[i]))
                            ConvertedValue = DateTimeHelper.ConvertDateTimeTo(oSchemaElement.DataSchemaType, Values[i]);
                        else if (DateTimeHelper.IsDate(Values[i]))
                            ConvertedValue = DateTimeHelper.ConvertDateTo(oSchemaElement.DataSchemaType, Values[i]);
                        else if (DateTimeHelper.IsMonthDay(Values[i]))
                            ConvertedValue = DateTimeHelper.ConvertMonthDayTo(oSchemaElement.DataSchemaType, Values[i]);
                        else
                            ConvertedValue = String.Empty;
                        break;
                }

                // Check if the converted value is identical to an existing value, if so null out the converted value
                if(!String.IsNullOrEmpty(ConvertedValue))
                    for (int j = 0; j < ConvertedValues.Length - 1; j++)
                        if ((i != j) && ConvertedValue.Equals(ConvertedValues[j], StringComparison.InvariantCultureIgnoreCase))
                        {
                            ConvertedValue = String.Empty;
                            break;
                        }

                ConvertedValues[i] = ConvertedValue;
            }

            return ConvertedValues;
        }
    }
}
