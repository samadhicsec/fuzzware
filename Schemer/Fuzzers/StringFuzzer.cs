using System;
using System.Collections.Generic;
using System.Text;
using System.Reflection;
using Fuzzware.Common;
using Fuzzware.Common.Encoding;
using Fuzzware.Common.XML;
using Fuzzware.Schemer.AutoGenerated;
using Fuzzware.Common.XML.Restrictions;
using Fuzzware.Schemer.Editors;
using Fuzzware.ConvertFromXML.Processors;

namespace Fuzzware.Schemer.Fuzzers
{
    class StringFuzzer : FuzzerBase, ITypeFuzzer
    {
        public delegate String StringCreateFn(String OriginalValue, Array Source, int Index);

        protected StringLengthFuzzer LengthConfig;
        protected StringValueFuzzer ValueConfig;

        // Length Fuzzing
        protected string LengthRepetitionString = "";
        protected uint[] StringLength_Lengths;
        protected uint[] InsertStringLength_Lengths;
        protected ValueRange InsertStringLength_ValueRange;
        protected uint[] InsertTotalStringLength_Lengths;
        protected ValueRange InsertTotalStringLength_ValueRange;

        // Value fuzzing
        protected String[] ReplaceString_Strings;
        protected String[] InsertString_Strings;
        protected ValueRange InsertString_ValueRange;
        protected String[] EncodeString_Strings;
        protected String[] StringEncodings;
        static protected StringBuilder LongString;
        protected int MaxFuzzIndex;

        ObjectDBEntry oSchemaElement;

        public StringFuzzer(ConfigData oConfigData, PreCompData oPreCompData, ObjectDBEntry oSchemaElement)
            : base(oConfigData, oPreCompData)
        {
            this.oSchemaElement = oSchemaElement;
            bool UsingCustomFuzzer = false;
            LengthConfig = oConfigData.STFConfig.StringLengthFuzzer;
            ValueConfig = oConfigData.STFConfig.StringValueFuzzer;

            if (null != LengthConfig)
            {
                UsingCustomFuzzer = false;
                // Check if the user has assigned custom fuzzers for this node
                if (LengthConfig.CustomFuzzer != null)
                    for (int i = 0; i < LengthConfig.CustomFuzzer.Length; i++)
                    {
                        if (LengthConfig.CustomFuzzer[i].NodeNamespace.Equals(oSchemaElement.Name.Namespace, StringComparison.CurrentCultureIgnoreCase) &&
                            LengthConfig.CustomFuzzer[i].NodeName.Equals(oSchemaElement.Name.Name, StringComparison.CurrentCultureIgnoreCase))
                        {
                            AssignLengthFuzzers(LengthConfig.CustomFuzzer[i]);
                            UsingCustomFuzzer = true;
                            Log.Write(MethodBase.GetCurrentMethod(), "Custom StringLength fuzzer being used", Log.LogType.LogOnlyInfo);
                            break;
                        }
                    }
                // Assign the default fuzzers if there is no custom one
                if (!UsingCustomFuzzer && (LengthConfig.DefaultFuzzers != null))
                    AssignLengthFuzzers(LengthConfig.DefaultFuzzers);

                LengthRepetitionString = LengthConfig.LengthRepetitionString;
            }
            if (null != ValueConfig)
            {
                UsingCustomFuzzer = false;
                // Check if the user has assigned custom fuzzers for this node
                if(ValueConfig.CustomFuzzer != null)
                    for (int i = 0; i < ValueConfig.CustomFuzzer.Length; i++)
                    {
                        if (ValueConfig.CustomFuzzer[i].NodeNamespace.Equals(oSchemaElement.Name.Namespace, StringComparison.CurrentCultureIgnoreCase) &&
                            ValueConfig.CustomFuzzer[i].NodeName.Equals(oSchemaElement.Name.Name, StringComparison.CurrentCultureIgnoreCase))
                        {
                            AssignValueFuzzers(ValueConfig.CustomFuzzer[i]);
                            UsingCustomFuzzer = true;
                            Log.Write(MethodBase.GetCurrentMethod(), "Custom StringValue fuzzer being used", Log.LogType.LogOnlyInfo);
                            break;
                        }
                    }
                // Assign the default fuzzers if there is no custom one
                if (!UsingCustomFuzzer && (ValueConfig.DefaultFuzzers != null))
                    AssignValueFuzzers(ValueConfig.DefaultFuzzers);
            }

            ConfigDefinedValues = null;

            // Find the maximum string length
            uint maxlength = 0;
            if(StringLength_Lengths != null)
                for (int i = 0; i < StringLength_Lengths.Length; i++)
                    if (maxlength < StringLength_Lengths[i])
                        maxlength = StringLength_Lengths[i];
            if(InsertStringLength_Lengths != null)
                for (int i = 0; i < InsertStringLength_Lengths.Length; i++)
                    if (maxlength < InsertStringLength_Lengths[i])
                        maxlength = InsertStringLength_Lengths[i];
            // Make the string builder allocate enough memory, this avoids lots of memory allocations when creating long strings
            if(null == LongString)
                LongString = new StringBuilder();
            LongString.EnsureCapacity((int)(maxlength * LengthRepetitionString.Length));
        }

        private void AssignLengthFuzzers(StringLengthFuzzersType FuzzersType)
        {
            if (FuzzersType.StringLength != null)
            {
                Add("StringLength", StringLength);
                StringLength_Lengths = GetLengthGroup(FuzzersType.StringLength.ValueGroupRef);
            }
            if (FuzzersType.InsertStringLength != null)
            {
                Add("InsertStringLength", InsertStringLength);
                InsertStringLength_Lengths = GetLengthGroup(FuzzersType.InsertStringLength.ValueGroupRef);
                InsertStringLength_ValueRange = GetValueRange(FuzzersType.InsertStringLength.ValueRangeRef, LengthConfig.LengthRange);
            }
            if (FuzzersType.InsertTotalStringLength != null)
            {
                Add("InsertTotalStringLength", InsertTotalStringLength);
                InsertTotalStringLength_Lengths = GetLengthGroup(FuzzersType.InsertTotalStringLength.ValueGroupRef);
                InsertTotalStringLength_ValueRange = GetValueRange(FuzzersType.InsertTotalStringLength.ValueRangeRef, LengthConfig.LengthRange);
            }
        }

        private void AssignValueFuzzers(StringValueFuzzersType FuzzersType)
        {
            if (FuzzersType.ReplaceString != null)
            {
                Add("ReplaceString", ReplaceString);
                ReplaceString_Strings = GetValueGroup(FuzzersType.ReplaceString.ValueGroupRef);
            }
            if (FuzzersType.InsertString != null)
            {
                Add("InsertString", InsertString);
                InsertString_Strings = GetValueGroup(FuzzersType.InsertString.ValueGroupRef);
                InsertString_ValueRange = GetValueRange(FuzzersType.InsertString.ValueRangeRef, ValueConfig.StringRange);
            }
            if (FuzzersType.EncodeString != null)
            {
                // Add fuzz delegate
                Add("EncodeString", EncodeString);
                // Get array of replacement strings
                EncodeString_Strings = GetValueGroup(FuzzersType.EncodeString.ValueGroupRef);
                // Make a list of all the encodings that will be used
                StringEncodings = new string[0];
                String[] AllEncodings = Enum.GetNames(typeof(Coder.OutputAsType));
                Coder.OutputAsType outputAsType = Coder.OutputAsType.Unchanged;
                SchemaAttributeCommands.GetOutputAs(oPreCompData.GetOutputSettings(oConfigData), (oSchemaElement as Fuzzware.Common.XML.ElementDBEntry).ObjectId, out outputAsType);
                String CurrentOutputAsType = Enum.GetName(typeof(Coder.OutputAsType), outputAsType);
                for (int i = 0; i < AllEncodings.Length; i++)
                {
                    if (AllEncodings[i].Contains("String"))
                    {
                        // Don't add the current encoding of the type
                        if (CurrentOutputAsType.Equals(AllEncodings[i]))
                            continue;
                        Array.Resize<string>(ref StringEncodings, StringEncodings.Length + 1);
                        StringEncodings[StringEncodings.Length - 1] = AllEncodings[i];
                    }
                }
            }
        }

        private uint[] GetLengthGroup(String ID)
        {
            for (int i = 0; i < LengthConfig.LengthGroup.Length; i++)
            {
                if (ID == LengthConfig.LengthGroup[i].ID)
                    return LengthConfig.LengthGroup[i].StringLength;
            }
            Log.Write(MethodBase.GetCurrentMethod(), "Could not find a LengthGroup with ID='" + ID + "'.  The associated StringValueFuzzer will be skipped.", Log.LogType.Warning);
            return null;
        }

        private String[] GetValueGroup(String ID)
        {
            for (int i = 0; i < ValueConfig.StringGroup.Length; i++)
            {
                if (ID == ValueConfig.StringGroup[i].ID)
                    return ValueConfig.StringGroup[i].StringValue;
            }
            Log.Write(MethodBase.GetCurrentMethod(), "Could not find a ValueGroup with ID='" + ID + "'.  The associated StringValueFuzzer will be skipped.", Log.LogType.Warning);
            return null;
        }

        #region ITypeFuzzer Members
        public override void Initialise()
        {
            base.Initialise();
            MaxFuzzIndex = CountOfCurrentNodes;
        }
        #endregion

        public bool StringLength(int FuzzIndex, int NodeIndex)
        {
            if (null == StringLength_Lengths)
                return false;

            return ReplaceStringValue(FuzzIndex, NodeIndex, StringLength_Lengths, CreateLongString);
        }

        public bool InsertStringLength(int FuzzIndex, int NodeIndex)
        {
            if (null == InsertStringLength_Lengths)
                return false;

            return InsertStringValue(FuzzIndex, NodeIndex, InsertStringLength_Lengths, CreateLongString, InsertStringLength_ValueRange);
        }

        public bool InsertTotalStringLength(int FuzzIndex, int NodeIndex)
        {
            if (null == InsertTotalStringLength_Lengths)
                return false;

            return InsertStringValue(FuzzIndex, NodeIndex, InsertTotalStringLength_Lengths, CreateTotalLongString, InsertTotalStringLength_ValueRange);
        }

        public bool ReplaceString(int FuzzIndex, int NodeIndex)
        {
            if (null == ReplaceString_Strings)
                return false;

            return ReplaceStringValue(FuzzIndex, NodeIndex, ReplaceString_Strings, GetValueString);
        }

        public bool InsertString(int FuzzIndex, int NodeIndex)
        {
            if (null == InsertString_Strings)
                return false;

            return InsertStringValue(FuzzIndex, NodeIndex, InsertString_Strings, GetValueString, InsertString_ValueRange);
        }

        public bool EncodeString(int FuzzIndex, int NodeIndex)
        {
            if (null == EncodeString_Strings)
                return false;

            // Change the output encoding for this node
            SchemaAttributeCommands.SetOutputAs(oPreCompData.GetOutputSettings(oConfigData), (oSchemaElement as Fuzzware.Common.XML.ElementDBEntry).ObjectId as XMLElementIdentifier, StringEncodings[FuzzIndex % StringEncodings.Length]);

            return ReplaceStringValue(FuzzIndex / StringEncodings.Length, NodeIndex, EncodeString_Strings, GetValueString);
        }

        public bool ReplaceStringValue(int FuzzIndex, int NodeIndex, Array ReplacementValues, StringCreateFn CreateString)
        {
            if (FuzzIndex >= ReplacementValues.Length)
                return false;

            String temp = CreateString(null, ReplacementValues, FuzzIndex);
            ChangeToValue(temp, NodeIndex);
            return true;
        }

        public bool InsertStringValue(int FuzzIndex, int NodeIndex, Array InsertValues, StringCreateFn CreateString, ValueRange Range)
        {
            // We avoid changing all the values, as they will be of different lengths, we can't insert in some of them
            if(NodeIndex >= 0)
            {
                // Get the current value
                String CurrentValue = oValuesEditor.GetValue(NodeIndex);

                if (MaxFuzzIndex < (CurrentValue.Length + 1) * InsertValues.Length)
                    MaxFuzzIndex = (CurrentValue.Length + 1) * InsertValues.Length;

                if (FuzzIndex >= MaxFuzzIndex)
                {
                    // Reset, for other fuzzers that will be used without Fuzzer.Initialise being called
                    MaxFuzzIndex = CountOfCurrentNodes;
                    return false;
                }

                // Make sure we have got something to edit
                if (FuzzIndex >= (CurrentValue.Length + 1) * InsertValues.Length)
                    throw new SkipStateOutOfRangeException();
                
                // Get the config insertion value
                String InsertString = CreateString(CurrentValue, InsertValues, (FuzzIndex % InsertValues.Length));

                // Calulcate the start position
                int startpos = FuzzIndex / InsertValues.Length;

                // Check we are in the right range
                if (startpos < Range.StartIndex)
                    throw new SkipStateOutOfRangeException();
                if ((Range.Length != 0) && (startpos > Range.StartIndex + Range.Length))
                    throw new SkipStateOutOfRangeException();
                if ((Range.Length - startpos) % Range.StepSize != 0)
                    throw new SkipStateOutOfRangeException();

                // Create the new value
                StringBuilder NewValue = new StringBuilder();
                NewValue.Append(CurrentValue, 0, startpos);
                NewValue.Append(InsertString);
                if (startpos < CurrentValue.Length)
                    NewValue.Append(CurrentValue, startpos, CurrentValue.Length - startpos);

                ChangeToValue(NewValue.ToString(), NodeIndex);
            }
            else
                throw new SkipStateNoAllCaseException();
            
            return true;
        }

        private String CreateLongString(String OriginalValue, Array Source, int Index)
        {
            uint[] StringLengths = (uint[])Source;

            int size = (int)StringLengths[Index];

            // Check if we already have the correct length
            if (LongString.Length == (size * LengthRepetitionString.Length))
                return LongString.ToString();

            // This should be fast if XPathNavs read in are in order
            //  - Append as long a string as possible, get it from the current long string
            LongString.EnsureCapacity(size * LengthRepetitionString.Length);
            if (LongString.Length < size * LengthRepetitionString.Length)
            {
                // Make sure LongString has at least 1 char
                if(0 == LongString.Length)
                    LongString.Append(LengthRepetitionString);

                // Double up to quickly add length
                while (LongString.Length < ((size * LengthRepetitionString.Length) / 2) + 1)
                    LongString.Append(LongString.ToString());

                // If we are within some threshold, then just sequentially add, otherwise double and remove.
                //if (((2 * LongString.Length) - (size * LengthRepetitionString.Length)) > ((size * LengthRepetitionString.Length) - LongString.Length))
                if (((size * LengthRepetitionString.Length) - LongString.Length) < 20)
                {
                    // Fill up to the required length
                    while (LongString.Length < (size * LengthRepetitionString.Length))
                        LongString.Append(LengthRepetitionString);
                }
                else
                {
                    // Double and remove
                    LongString.Append(LongString.ToString());
                    LongString.Remove(size * LengthRepetitionString.Length, LongString.Length - (size * LengthRepetitionString.Length));
                }
            }
            else
            {
                LongString.Remove(size * LengthRepetitionString.Length, LongString.Length - (size * LengthRepetitionString.Length));
            }
            return LongString.ToString();
        }

        private String CreateTotalLongString(String OriginalValue, Array Source, int Index)
        {
            uint TotalLength = ((uint[])Source)[Index];
            if(TotalLength <= OriginalValue.Length)
                throw new SkipStateOutOfRangeException();

            uint[] InjectLength = new uint[1];
            InjectLength[0] = TotalLength - (uint)OriginalValue.Length;
            return CreateLongString(OriginalValue, InjectLength, 0);
        }

        private String GetValueString(String OriginalValue, Array Source, int Index)
        {
            return (String)Source.GetValue(Index % (Source.Length));
        }

    }
}
