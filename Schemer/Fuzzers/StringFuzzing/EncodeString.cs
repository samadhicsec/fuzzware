using System;
using System.Collections.Generic;
using System.Text;
using System.Reflection;
using Fuzzware.Common;
using Fuzzware.Common.XML;
using Fuzzware.Common.Encoding;
using Fuzzware.Schemer.AutoGenerated;
using Fuzzware.ConvertFromXML.Processors;

namespace Fuzzware.Schemer.Fuzzers.StringFuzzing
{
    class EncodeString : StringValueFuzzerBase
    {
        protected String[] StringEncodings;

        public EncodeString(ConfigData oConfigData, PreCompData oPreCompData, ObjectDBEntry oSchemaElement)
            : base(oConfigData, oPreCompData, oSchemaElement)
        {

        }

        protected override void AssignValueFuzzers(StringValueFuzzersType FuzzersType)
        {
            if (FuzzersType.EncodeString != null)
            {
                // Add fuzz delegate
                Add("EncodeString", EncodeStringFn);
                // Get array of replacement strings
                Strings = GetValueGroup(FuzzersType.EncodeString.ValueGroupRef);
                // Make a list of all the encodings that will be used
                StringEncodings = new string[0];
                String[] AllEncodings = Enum.GetNames(typeof(Coder.OutputAsType));
                Coder.OutputAsType outputAsType = Coder.OutputAsType.Unchanged;
                SchemaAttributeCommands.GetOutputAs(oPreCompData.GetOutputSettings(oConfigData), (oSchemaElement as Fuzzware.Common.XML.ElementDBEntry).ObjectId, out outputAsType);
                String CurrentOutputAsType = Enum.GetName(typeof(Coder.OutputAsType), outputAsType);
                for (int i = 0; i < AllEncodings.Length; i++)
                {
                    if (AllEncodings[i].Contains("String"))
                    {
                        // Don't add the current encoding of the type
                        if (CurrentOutputAsType.Equals(AllEncodings[i]))
                            continue;
                        Array.Resize<string>(ref StringEncodings, StringEncodings.Length + 1);
                        StringEncodings[StringEncodings.Length - 1] = AllEncodings[i];
                    }
                }
            }
        }

        /// <summary>
        /// Replace the current string value an encoded version of the value from the user configured list.
        /// </summary>
        public bool EncodeStringFn(int FuzzIndex, int NodeIndex)
        {
            if (null == Strings)
                return false;

            // Change the output encoding for this node
            SchemaAttributeCommands.SetOutputAs(oPreCompData.GetOutputSettings(oConfigData), (oSchemaElement as Fuzzware.Common.XML.ElementDBEntry).ObjectId as XMLElementIdentifier, StringEncodings[FuzzIndex % StringEncodings.Length]);

            return ReplaceStringValue(FuzzIndex / StringEncodings.Length, NodeIndex, Strings);
        }
    }
}
