using System;
using System.Collections.Generic;
using System.Text;
using System.Reflection;
using Fuzzware.Common;
using Fuzzware.Common.XML;
using Fuzzware.Schemer.AutoGenerated;

namespace Fuzzware.Schemer.Fuzzers.StringFuzzing
{
    class InsertTotalStringLength : StringLengthFuzzerBase
    {
        public InsertTotalStringLength(ConfigData oConfigData, PreCompData oPreCompData, ObjectDBEntry oSchemaElement)
            : base(oConfigData, oPreCompData, oSchemaElement)
        {

        }

        protected override void AssignLengthFuzzers(StringLengthFuzzersType FuzzersType)
        {
            if (FuzzersType.InsertTotalStringLength != null)
            {
                Add("InsertTotalStringLength", InsertTotalStringLengthFn);
                Lengths = GetLengthGroup(FuzzersType.InsertTotalStringLength.ValueGroupRef);
                oValueRange = GetValueRange(FuzzersType.InsertTotalStringLength.ValueRangeRef, LengthConfig.LengthRange);
            }
        }

        /// <summary>
        /// Inserts into the current value of the node a long string making the length of the string equal values specified from 
        /// the user configured list, and using the LengthRepetitionString specified in the configuration.
        /// </summary>
        public bool InsertTotalStringLengthFn(int FuzzIndex, int NodeIndex)
        {
            if (null == Lengths)
                return false;

            return InsertStringValue(FuzzIndex, NodeIndex, Lengths, oValueRange);
        }

        /// <summary>
        /// Creates a long string for inserting into the current string so that the total length of the string is the length specified
        /// </summary>
        /// <param name="OriginalValue">The current string value</param>
        /// <param name="Source">An array to lengths to extend the length of the current string to</param>
        /// <param name="Index">An index into Source</param>
        /// <returns></returns>
        protected override String StringCreateFn(String OriginalValue, Array Source, int Index)
        {
            uint TotalLength = ((uint[])Source)[Index];
            if (TotalLength <= OriginalValue.Length)
                throw new SkipStateOutOfRangeException();

            uint[] InjectLength = new uint[1];
            InjectLength[0] = TotalLength - (uint)OriginalValue.Length;
            return base.StringCreateFn(OriginalValue, InjectLength, 0);
        }
    }
}
