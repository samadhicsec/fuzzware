using System;
using System.Collections.Generic;
using System.Text;
using System.Reflection;
using Fuzzware.Common;
using Fuzzware.Common.XML;
using Fuzzware.Schemer.AutoGenerated;

namespace Fuzzware.Schemer.Fuzzers.StringFuzzing
{
    abstract class StringValueFuzzerBase : StringFuzzerBase
    {
        protected StringValueFuzzer ValueConfig;

        // Value fuzzing
        protected String[] Strings;
        protected ValueRange oValueRange;

        public StringValueFuzzerBase(ConfigData oConfigData, PreCompData oPreCompData, ObjectDBEntry oSchemaElement)
            : base(oConfigData, oPreCompData, oSchemaElement)
        {
            bool UsingCustomFuzzer = false;
            ValueConfig = oConfigData.STFConfig.StringValueFuzzer;

            if (null != ValueConfig)
            {
                UsingCustomFuzzer = false;
                // Check if the user has assigned custom fuzzers for this node
                if(ValueConfig.CustomFuzzer != null)
                    for (int i = 0; i < ValueConfig.CustomFuzzer.Length; i++)
                    {
                        if (ValueConfig.CustomFuzzer[i].NodeNamespace.Equals(oSchemaElement.Name.Namespace, StringComparison.CurrentCultureIgnoreCase) &&
                            ValueConfig.CustomFuzzer[i].NodeName.Equals(oSchemaElement.Name.Name, StringComparison.CurrentCultureIgnoreCase))
                        {
                            AssignValueFuzzers(ValueConfig.CustomFuzzer[i]);
                            UsingCustomFuzzer = true;
                            Log.Write(MethodBase.GetCurrentMethod(), "Custom StringValue fuzzer being used", Log.LogType.LogOnlyInfo);
                            break;
                        }
                    }
                // Assign the default fuzzers if there is no custom one
                if (!UsingCustomFuzzer && (ValueConfig.DefaultFuzzers != null))
                    AssignValueFuzzers(ValueConfig.DefaultFuzzers);
            }

            ConfigDefinedValues = null;
        }

        /// <summary>
        /// Implement to assign the fuzzer function
        /// </summary>
        protected abstract void AssignValueFuzzers(StringValueFuzzersType FuzzersType);

        protected String[] GetValueGroup(String ID)
        {
            for (int i = 0; i < ValueConfig.StringGroup.Length; i++)
            {
                if (ID == ValueConfig.StringGroup[i].ID)
                    return ValueConfig.StringGroup[i].StringValue;
            }
            Log.Write(MethodBase.GetCurrentMethod(), "Could not find a ValueGroup with ID='" + ID + "'.  The associated StringValueFuzzer will be skipped.", Log.LogType.Warning);
            return null;
        }

        /// <summary>
        /// Returns a string at position Index in array Source 
        /// </summary>
        /// <param name="OriginalValue">Not Used</param>
        /// <param name="Source">Array of string values</param>
        /// <param name="Index">Index into Source</param>
        /// <returns></returns>
        protected override String StringCreateFn(String OriginalValue, Array Source, int Index)
        {
            return (String)Source.GetValue(Index % (Source.Length));
        }
    }
}
