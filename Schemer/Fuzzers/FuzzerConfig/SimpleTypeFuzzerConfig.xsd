<?xml version="1.0" encoding="utf-8" ?> 
<xs:schema id="SimpleTypeFuzzerConfig" 
                  targetNamespace="http://tempuri.org/SimpleTypeFuzzerConfig.xsd"
                  elementFormDefault="qualified"
                  xmlns="http://tempuri.org/SimpleTypeFuzzerConfig.xsd"
                  xmlns:stfc="http://tempuri.org/SimpleTypeFuzzerConfig.xsd"
                  xmlns:xs="http://www.w3.org/2001/XMLSchema">
  <xs:complexType name="LengthFuzzerType">
    <xs:simpleContent>
      <xs:extension base="xs:string">
        <xs:attribute name="LengthGroupRef" type="xs:IDREF" use="required" />
        <xs:attribute name="ValueRangeRef" type="xs:IDREF" use="optional" />
      </xs:extension>
    </xs:simpleContent>
  </xs:complexType>

  <xs:complexType name="ValueFuzzerType">
    <xs:simpleContent>
      <xs:extension base="xs:string">
        <xs:attribute name="ValueGroupRef" type="xs:IDREF" use="required" />
        <xs:attribute name="ValueRangeRef" type="xs:IDREF" use="optional" />
      </xs:extension>
    </xs:simpleContent>
  </xs:complexType>
  <xs:complexType name ="ValueRange" >
    <xs:annotation>
      <xs:documentation>
        Define a ValueRange node to limit the area of the value data that will be fuzzed.  If a ValueFuzzerType is not explicitly
        linked to a ValueRange node, then the default values are used.
      </xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="StartIndex" type="xs:unsignedInt" default="0" />
      <xs:element name="Length" type="xs:unsignedInt" default="0">
        <xs:annotation>
          <xs:documentation>
            The value 0 for this element indicates that the length will be the entire length of the node.  Any value fuzzing type that
            would affect a value beyond this length, will be skipped, including value ranges that start less than the length but finish
            beyond it.
          </xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="StepSize" default="1">
        <xs:annotation>
          <xs:documentation>
            Set this to indicate which values in the specified range will be fuzzed.  For example, if set to 1, then every value
            is fuzzed, or if set to 4 then every 4th value (i.e. DWORD boundaries if type is bytes) is fuzzed.
          </xs:documentation>
        </xs:annotation>
        <xs:simpleType>
          <xs:restriction base="xs:unsignedInt">
            <xs:minInclusive value="1" />
          </xs:restriction>
        </xs:simpleType>
      </xs:element>
    </xs:sequence>
    <xs:attribute name="ID" type="xs:ID" use="required" />
  </xs:complexType>

  <xs:element name="StringLengthFuzzer">
    <xs:complexType>
      <xs:sequence>
        <xs:element name="LengthRepetitionString" type="xs:string" minOccurs="1" maxOccurs="1"/>
        <xs:element name="StringLengthFuzzers">
          <xs:complexType>
            <xs:all>
              <xs:element name="StringLength" type="stfc:LengthFuzzerType" minOccurs="0" nillable="true">
                <xs:annotation>
                  <xs:documentation>
                    This type of length fuzzing will replace the string value with the LengthRepetitionString string repeated
                    according to the LengthGroup.  If a LengthSectionRef is specified it will be ignored.
                    Bug Scenario: An application improperly processes a long string.
                  </xs:documentation>
                </xs:annotation>
              </xs:element>
              <xs:element name="InsertStringLength" type="stfc:LengthFuzzerType" minOccurs="0" nillable="true">
                <xs:annotation>
                  <xs:documentation>
                    This type of length fuzzing will insert the LengthRepetitionString string repeated according to the LengthGroup,
                    into the string value, at every character position.  The values in the LengthGroup specify the length of the string
                    inserted.
                    Bug Scenario: An application processes the input string, but part of it is unexpectedly long.
                  </xs:documentation>
                </xs:annotation>
              </xs:element>
              <xs:element name="InsertTotalStringLength" type="stfc:LengthFuzzerType" minOccurs="0" nillable="true">
                <xs:annotation>
                  <xs:documentation>
                    This type of length fuzzing will insert the LengthRepetitionString string repeated according to the LengthGroup,
                    into the string value, at every character position.  The values in the LengthGroup specify the TOTAL length of the
                    output string, the fuzzer will determine the correct size of string to inject.
                    Bug Scenario: Similar to StringLength, except to avoid an application rejecting a string based on its content, the
                    content is kept, with the long strings injected at each character position (according to the LengthSectionRef).
                  </xs:documentation>
                </xs:annotation>
              </xs:element>
            </xs:all>
          </xs:complexType>
        </xs:element>
        <xs:element name="LengthRange" type="stfc:ValueRange" minOccurs="0" maxOccurs="unbounded">
          <xs:annotation>
            <xs:documentation>
              For string length fuzzing if the value we are inserting exceeds the range specified, the insertion still occurs.  This is 
              different to the binary case.
            </xs:documentation>
          </xs:annotation>
        </xs:element>
        <xs:element name="LengthGroup" minOccurs="0" maxOccurs="unbounded">
          <xs:complexType>
            <xs:sequence>
              <xs:element name="StringLength" type="xs:unsignedInt" minOccurs="0" maxOccurs="unbounded" />
            </xs:sequence>
            <xs:attribute name="ID" type="xs:ID" use="required" />
          </xs:complexType>
        </xs:element>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  
  <xs:element name="StringValueFuzzer">
    <xs:complexType>
      <xs:sequence>
        <xs:element name="StringValueFuzzers">
          <xs:complexType>
            <xs:all>
              <xs:element name="ReplaceString" type="stfc:ValueFuzzerType" nillable="true" minOccurs="0">
                <xs:annotation>
                  <xs:documentation>
                    This type of value fuzzing will replace the string value with the values specified in the reference LengthGroup.  
                    If a ValueSectionRef is specified it will be ignored.
                  </xs:documentation>
                </xs:annotation>
              </xs:element>
              <xs:element name="InsertString" type="stfc:ValueFuzzerType" nillable="true" minOccurs="0">
                <xs:annotation>
                  <xs:documentation>
                    This type of value fuzzing will insert into the string value, in every character position, the values specified in the 
                    reference LengthGroup.
                  </xs:documentation>
                </xs:annotation>
              </xs:element>
            </xs:all>
          </xs:complexType>
        </xs:element>
        <xs:element name ="StringRange" type="stfc:ValueRange" minOccurs="0" maxOccurs="unbounded" />
        <xs:element name="StringGroup" minOccurs="0" maxOccurs="unbounded">
          <xs:complexType>
            <xs:sequence>
              <xs:element name="StringValue" type="xs:string" minOccurs="0" maxOccurs="unbounded" />
            </xs:sequence>
            <xs:attribute name="ID" type="xs:ID" use="required" />
          </xs:complexType>
        </xs:element>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  
  <xs:element name="DecimalValueFuzzer">
    <xs:complexType>
      <xs:sequence>
        <xs:element name="DecimalValue" type="xs:string" minOccurs="0" maxOccurs="unbounded" />
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  
  <xs:element name="IntegerValueFuzzer">
    <xs:complexType>
      <xs:sequence>
        <xs:annotation>
          <xs:documentation>
            The numbers specified here can be passed in either as arbitrary size base 10 numbers, or as hex numbers (identified by a preceeding
            '0x' or '0X') that fit into an Int64 (as the pre-processor converts them to their base 10 representation, and to do this they need
            to fit into the largest integer type).  The hex numbers should be used when the output will be in binary, and the type used in the
            XML should be unsigned.
          </xs:documentation>
        </xs:annotation>
        <xs:element name="IntegerValue" type="xs:string" minOccurs="0" maxOccurs="unbounded" />
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  
  <xs:element name="BooleanValueFuzzer">
    <xs:complexType>
      <xs:sequence>
        <xs:element name="BooleanValue" type="xs:string" minOccurs="0" maxOccurs="unbounded" />
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  
  <xs:element name="BinaryValueFuzzer">
    <xs:complexType>
      <xs:sequence>
        <xs:element name="ByteValueFuzzers">
          <xs:complexType>
            <xs:all>
              <xs:element name="ReplaceBytes" type="stfc:ValueFuzzerType" nillable="true" minOccurs="0" />
              <xs:element name="InsertBytes" type="stfc:ValueFuzzerType" nillable="true" minOccurs="0" />
              <xs:element name="AndBytes" type="stfc:ValueFuzzerType" nillable="true" minOccurs="0" />
              <xs:element name="OrBytes" type="stfc:ValueFuzzerType" nillable="true" minOccurs="0" />
              <xs:element name="XOrBytes" type="stfc:ValueFuzzerType" nillable="true" minOccurs="0" />
            </xs:all>
          </xs:complexType>
        </xs:element>
        <xs:element name ="ByteRange" type="stfc:ValueRange" minOccurs="0" maxOccurs="unbounded" />
        <xs:element name="ByteGroup" minOccurs="0" maxOccurs="unbounded">
          <xs:complexType>
            <xs:sequence>
              <xs:element name="ByteValue" type="xs:hexBinary" minOccurs="0" maxOccurs="unbounded" />
            </xs:sequence>
            <xs:attribute name="ID" type="xs:ID" use="required" />
          </xs:complexType>
        </xs:element>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  
  <xs:element name ="SimpleTypeFuzzerConfig">
    <xs:complexType>
      <xs:all>
        <xs:element ref="StringLengthFuzzer" minOccurs="0" maxOccurs="1" />
        <xs:element ref="StringValueFuzzer" minOccurs="0" maxOccurs="1" />
        <xs:element ref="DecimalValueFuzzer" minOccurs="0" maxOccurs="1" />
        <xs:element ref="IntegerValueFuzzer" minOccurs="0" maxOccurs="1" />
        <xs:element ref="BooleanValueFuzzer" minOccurs="0" maxOccurs="1" />
        <xs:element ref="BinaryValueFuzzer" minOccurs="0" maxOccurs="1" />
      </xs:all>
    </xs:complexType>
  </xs:element>
</xs:schema>
