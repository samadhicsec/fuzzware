using System;
using System.Collections.Generic;
using System.Text;
using System.Reflection;
using System.Xml;
using System.Xml.Schema;
using System.Xml.XPath;
using Fuzzware.Common;
using Fuzzware.Common.DataSchema;
using Fuzzware.Common.XML;
using Fuzzware.Schemer.Editors;
using Fuzzware.Schemer.AutoGenerated;

namespace Fuzzware.Schemer.Fuzzers.OccurrenceFuzzing
{
    /// <summary>
    /// Occurrence fuzzing tries all possible combinations, limited by minOccurs and maxOccurs, of a particle and its sub-particles.
    /// If multiple particles of the same type exist in the example XML, then only the first one has its sub-particles
    /// occurrenced fuzz (the same is true for sub-particles of sub-particles).
    /// </summary>
    class OccurrenceFuzzer : FuzzerBase, IChildNodesFuzzer
    {
        PreCompData oPreComp;
        ComplexTypeFuzzerConfig Config;
        IChildNodesEditor oChildNodesEditor;
        ParticleDBEntry FuzzNodeParticleEntry;
        List<XPathNavigator> XPathNavReturnArray;
        List<XmlQualifiedName> MissingNodeExamples;
        XMLElementIdentifier NonSpecficId;

        public OccurrenceFuzzer(ConfigData oConfigData, PreCompData oPreCompData, XMLElementIdentifier oElementId)
            : base(oConfigData, oPreCompData)
        {
            this.oPreComp = oPreCompData;
            Config = oConfigData.CTFConfig;
            NonSpecficId = oElementId;

            if (null == Config.OccurranceFuzzingCount)
                return;

            Add("Occurrence", FuzzOccurrence);
        }

        protected override int CountOfCurrentNodes
        {
            get
            {
                if (null != oChildNodesEditor)
                {
                    return oChildNodesEditor.NodeCount();
                }
                Log.Write(MethodBase.GetCurrentMethod(), "Unable to return CountOfCurrentNodes, oChildNodesEditor was null", Log.LogType.Error);
                return 0;
            }
        }

        public bool FuzzOccurrence(int FuzzIndex, int NodeIndex)
        {
            if (-1 == NodeIndex)
            {
                throw new SkipStateException();
            }

            //if (null == FuzzNodeParticleEntry)
            //    return false;

            // We want to get the specific ElementDBEntry for the node we are fuzzing so the min and max occurs are right
            //XMLElementIdentifier NonSpecficId = State.CurrentSchemaElement.ElementId;
            XMLElementIdentifier Id = new XMLElementIdentifier(NonSpecficId.QualifiedName, NonSpecficId.SchemaType as XmlSchemaElement, oPreComp.SchemaSet, 
                oChildNodesEditor.GetNodeInstance(NodeIndex).Particle.MinOccurs, oChildNodesEditor.GetNodeInstance(NodeIndex).Particle.MaxOccurs);
            FuzzNodeParticleEntry = oPreComp.ObjectDB[Id] as ParticleDBEntry;

            // Check if we have been through all combinations.  The 0 sub particle will be the group i.e. seq, choice, all, and we get
            // a count of the possible occurrence values of that node including its children.  We do not include the parent, that will
            // get occurrenced fuzzed when we fuzz the parent's parent.
            if (FuzzIndex >= FuzzNodeParticleEntry.SubParticles[0].GetCountOfOccurrenceValuesInclChildren(Config.OccurranceFuzzingCount))
                return false;

            XPathNavReturnArray = new List<XPathNavigator>();

            CreateParticleInstance(FuzzNodeParticleEntry, oChildNodesEditor.GetNodeInstance(NodeIndex), FuzzIndex);

            oChildNodesEditor.SetNodeArray(XPathNavReturnArray, NodeIndex);

            return true;
        }

        private void CreateParticleInstance(ParticleDBEntry ParticleDBEntry, ParticleInstance ParticleInstance, int FuzzIndex)
        {
            bool CreatedFuzzedParticle = false;     // Used to ensure we only ever fuzz one particle
            int InstancesFound = 0;                 // Keep track of how many child instances have been discovered so far

            // Go through all the sub-particles            
            for (int i = 0; i < ParticleDBEntry.SubParticles.Length; i++)
            {
                int StartIndex = 0;                 // Used to ensure, if a sub-particle was fuzzed, we don't output the reference parent particle
                bool ThisParticleFuzzed = false;    // Used to ensure we don't output multiple reference instances of the particle we are fuzzing
                                                    // (for particles that occur more than once in our example/reference particle instance)

                // Get the number of Occurrence values of the current sub-particles
                int ParticleCount = ParticleDBEntry.SubParticles[i].GetCountOfOccurrenceValuesInclChildren(Config.OccurranceFuzzingCount);

                // Make a list of sub-particle instances
                List<ParticleInstance> AllInstances = new List<ParticleInstance>();
                List<ParticleInstance> InstancesAtIndex = new List<ParticleInstance>();
                if (null != ParticleInstance)
                {
                    AllInstances = ParticleInstance.GetAllSubParticlesOfType(ParticleDBEntry.SubParticles[i].Particle);
                    // The offset that we want to look for a specific instance depends on the previous instances found
                    InstancesAtIndex = ParticleInstance.GetSubParticlesOfTypeFromIndex(ParticleDBEntry.SubParticles[i].Particle, InstancesFound);
                    InstancesFound += InstancesAtIndex.Count;
                }

                // Find which sub-particle we are fuzzing
                if ((FuzzIndex < ParticleCount) && !CreatedFuzzedParticle)
                {
                    // We have found the particle we want to fuzz
                    if (FuzzIndex < ParticleDBEntry.SubParticles[i].GetCountOfOccurrenceValues(Config.OccurranceFuzzingCount))
                    {
                        // We want to add a number of this particle
                        AddFuzzedSubParticleInstance(ParticleDBEntry.SubParticles[i], AllInstances, FuzzIndex, ParticleDBEntry.Particle);
                        ThisParticleFuzzed = true;
                    }
                    else
                    {
                        // We want to fuzz the sub-particles of this sub-particle
                        FuzzIndex -= ParticleDBEntry.SubParticles[i].GetCountOfOccurrenceValues(Config.OccurranceFuzzingCount);
                        ParticleInstance SubInstance = null;
                        if (AllInstances.Count > 0)
                            SubInstance = AllInstances[0];
                        // Recurse into the children of this sub-particle
                        CreateParticleInstance(ParticleDBEntry.SubParticles[i], SubInstance, FuzzIndex);
                    }
                    CreatedFuzzedParticle = true;
                    StartIndex = 1;
                }

                // Add the current sub-particle to the output
                if (!(ParticleDBEntry.Particle is XmlSchemaChoice) && !ThisParticleFuzzed)
                {
                    for (int j = StartIndex; j < InstancesAtIndex.Count; j++)
                        XPathNavReturnArray.AddRange(InstancesAtIndex[j].XPathNavs);
                }

                FuzzIndex -= ParticleCount;
            }
        }

        private void AddFuzzedSubParticleInstance(ParticleDBEntry SubParticleDBEntry, List<ParticleInstance> Instances, int FuzzIndex, XmlSchemaParticle ParentType)
        {
            int NumberParticlesToAdd = SubParticleDBEntry.GetOccurrenceCount(FuzzIndex, Config.OccurranceFuzzingCount);
            for (int j = 0; j < NumberParticlesToAdd; j++)
            {
                List<XPathNavigator> ExampleInstance = null;
                if (Instances.Count > 0)
                {
                    // Our example will come from our available instances
                    ExampleInstance = Instances[j % Instances.Count].XPathNavs;
                }
                else
                {
                    // Try to get example from Config files, but only if it is an ElementDBEntry (and so has a name)
                    if ((SubParticleDBEntry is ElementDBEntry) && 
                        (null != (SubParticleDBEntry as ElementDBEntry).Name) && 
                        (oPreComp.ConfigExamplesDict.ContainsKey((SubParticleDBEntry as ElementDBEntry).Name)))
                    {
                        // Get reference to examples list
                        ExampleInstance = oPreComp.ConfigExamplesDict[(SubParticleDBEntry as ElementDBEntry).Name];
                    }
                    else
                    {
                        // Try to get examples from other nodes of this type
                        if(SubParticleDBEntry.Instances.Count > 0)
                        {
                            ExampleInstance = SubParticleDBEntry.Instances[j % SubParticleDBEntry.Instances.Count].XPathNavs;
                        }
                    }
                }

                // If we can't create an example keep track so we can inform the user
                if ((null == ExampleInstance) &&
                    (SubParticleDBEntry is ElementDBEntry) && (null != (SubParticleDBEntry as ElementDBEntry).Name))
                {
                    // Add to missing node examples
                    int i = MissingNodeExamples.Count - 1;
                    for (; i >= 0; i--)
                    {
                        if ((new XmlQualifiedNameComparer()).Compare((SubParticleDBEntry as ElementDBEntry).Name, MissingNodeExamples[i]) == 0)
                            break;
                    }
                    if (-1 == i)
                    {
                        MissingNodeExamples.Add((SubParticleDBEntry as ElementDBEntry).Name);
                        //break;
                    }
                }
                if (null == ExampleInstance)
                    throw new SkipStateException();

                // Add our example to the output
                XPathNavReturnArray.AddRange(ExampleInstance);
            }
        }

        #region IChildNodesFuzzer Members

        public override void Initialise()
        {
            base.Initialise();

            if (null == oChildNodesEditor)
            {
                Log.Write(MethodBase.GetCurrentMethod(), "Child Nodes Editor was null", Log.LogType.Error);
            }

            // Initialise the instances of the particles in the SchemerParticleDB
            oChildNodesEditor.Initialise();

            //FuzzNodeParticleEntry = oPreComp.ElementDB[(State.CurrentSchemaElement as ElementDBEntry).ElementId] as ParticleDBEntry;

            MissingNodeExamples = new List<XmlQualifiedName>();
        }

        public override void Restore()
        {
            oChildNodesEditor.RestoreChildNodes();
        }

        public override void End()
        {
            if (MissingNodeExamples.Count > 0)
            {
                StringBuilder output = new StringBuilder();
                output.Append("\nOccurrence fuzzing was restricted by there being no examples of the following XML node(s):");
                for (int i = 0; i < MissingNodeExamples.Count; i++)
                {
                    output.Append("\n\t");
                    output.Append(MissingNodeExamples[i].ToString());
                }
                Log.Write(MethodBase.GetCurrentMethod(), output.ToString(), Log.LogType.Info);
            }
        }

        public IChildNodesEditor ChildNodesEditor
        {
            set
            {
                oChildNodesEditor = value;
            }
        }

        #endregion
    }
}
