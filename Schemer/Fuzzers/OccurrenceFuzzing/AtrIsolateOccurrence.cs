using System;
using System.Collections.Generic;
using System.Text;
using System.Reflection;
using System.Xml;
using System.Xml.Schema;
using Fuzzware.Common;
using Fuzzware.Schemer.AutoGenerated;
using Fuzzware.Schemer.Editors;

namespace Fuzzware.Schemer.Fuzzers.OccurrenceFuzzing
{
    class AtrIsolateOccurrence : FuzzerBase, IFuzzer
    {
        protected ComplexTypeFuzzerConfig config;
        protected AttributeEditor oEditor;

        public AtrIsolateOccurrence(ConfigData oConfigData, PreCompData oPreCompData)
            : base(oConfigData, oPreCompData)
        {
            // Add different types of occurance
            config = oConfigData.CTFConfig;

            if (null == config.AttributeFuzzing)
                return;

            if (null != config.AttributeFuzzing.AtrIsolateOccurrence)
            {
                // Have each attribute present in isolation, including having no attributes
                Add("AtrIsolateOccurrence", FuzzAttributeIsolatedOccurrence);
            }
        }

        public override IValuesEditor ValuesEditor
        {
            set
            {
                oValuesEditor = value;
                oEditor = value as AttributeEditor;
            }
        }

        /// <summary>
        /// Will remove all other attributes apart from the selected one.
        /// </summary>
        public bool FuzzAttributeIsolatedOccurrence(int FuzzIndex, int NodeIndex)
        {
            if (oEditor == null)
                Log.Write(MethodBase.GetCurrentMethod(), "The Attribute Editor is null", Log.LogType.Error);

            if (FuzzIndex >= oEditor.FuzzableAttributes.Count)
                return false;

            if (-1 == NodeIndex)
                throw new SkipStateNoAllCaseException();

            // Check to see if the attribute exists
            XmlSchemaAttribute SchAtt = oEditor.FuzzableAttributes[FuzzIndex];
            bool AttExists = oEditor.CheckAttributeExists(SchAtt.QualifiedName, NodeIndex);

            for (int i = 0; i < oEditor.FuzzableAttributes.Count; i++)
            {
                if (AttExists)
                {
                    // Check to see if this is the one we would other wise delete
                    if (oEditor.FuzzableAttributes[i].QualifiedName.ToString() == SchAtt.QualifiedName.ToString())
                        continue;
                }
                // Delete this attribute
                oEditor.DeleteAttribute(oEditor.FuzzableAttributes[i].QualifiedName, NodeIndex);
            }

            if (!AttExists)
            {
                // Attribute didn't exist, so we need to add it
                oEditor.CreateAttribute(SchAtt, NodeIndex);
            }

            return true;
        }
    }
}
