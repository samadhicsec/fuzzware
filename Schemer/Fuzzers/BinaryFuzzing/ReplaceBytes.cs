using System;
using System.Collections.Generic;
using System.Text;
using Fuzzware.Common;
using Fuzzware.Common.XML;
using Fuzzware.Schemer.AutoGenerated;

namespace Fuzzware.Schemer.Fuzzers.BinaryFuzzing
{
    class ReplaceBytes : BinaryFuzzerBase
    {
        public ReplaceBytes(ConfigData oConfigData, PreCompData oPreCompData, ObjectDBEntry oSchemaElement)
            : base(oConfigData, oPreCompData, oSchemaElement)
        {
        }

        protected override void AssignValueFuzzers(ByteValueFuzzersType FuzzersType)
        {
            if (null != FuzzersType.ReplaceBytes)
            {
                Add("ReplaceBytes", ReplaceBytesFn);
                FuzzingValues = GetByteGroup(FuzzersType.ReplaceBytes.ValueGroupRef);
                BytesVR = GetValueRange(FuzzersType.ReplaceBytes.ValueRangeRef, ValueConfig.ByteRange);
            }
        }

        /// <summary>
        /// Replace bytes in the current byte value with values from the user configured list.  If there is an
        /// associated Value Range then only bytes in the specified position will be changed.  Otherwise all the
        /// bytes will be replaced, starting with the first and incrementing by one.
        /// </summary>
        public bool ReplaceBytesFn(int FuzzIndex, int NodeIndex)
        {
            return EditBytes(FuzzIndex, NodeIndex, FuzzingValues, BytesVR);
        }

        /// <summary>
        /// Replace the current byte value with the byte value from the user configured list
        /// </summary>
        /// <param name="StartIndex">Where to start replacing bytes in the current byte array</param>
        /// <param name="FuzzByteValues">The replacement bytes</param>
        /// <param name="OutputBytes">The current byte array to be changed</param>
        protected override void BinaryEditFn(int StartIndex, byte[] FuzzByteValues, ref byte[] OutputBytes)
        {
            for (int i = 0; i < FuzzByteValues.Length; i++)
                OutputBytes[StartIndex + i] = FuzzByteValues[i];
        }
    }
}
