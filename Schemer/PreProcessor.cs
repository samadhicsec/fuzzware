using System;
using System.IO;
using System.Collections.Generic;
using System.Text;
using System.Reflection;
using System.Xml;
using System.Xml.Schema;
using System.Xml.XPath;
using System.Xml.Serialization;
using Fuzzware.Common;
using Fuzzware.Common.Encoding;
using Fuzzware.Common.DataSchema;
using Fuzzware.Common.XML;
//using Fuzzware.Schemer.Properties;       // For access to application Settings
using Fuzzware.Schemer.AutoGenerated;
using Fuzzware.Schemer.Statistics;
using Fuzzware.Evaluate.Statistics;
using Fuzzware.Schemas.AutoGenerated;
using Fuzzware.Convert2XML;

namespace Fuzzware.Schemer
{
    class PreProcessor
    {
        private static string ValidatorCaller;

        public static ConfigData ReadConfigData(String ConfigXML)
        {
            // Verify and load fuzzer configuration
            Log.Write(MethodInfo.GetCurrentMethod(), "Loading Configuration", Log.LogType.Info);
            Configuration oConfig = InitialiseFuzzerConfiguration(ConfigXML);
            SimpleTypeFuzzerConfig oSTFConfig = InitialiseSimpleTypeFuzzerConfig(oConfig);
            ComplexTypeFuzzerConfig oCTFConfig = InitialiseComplexTypeFuzzerConfig(oConfig);

            return new ConfigData(oConfig, oSTFConfig, oCTFConfig);
        }

        public static PreCompData CreateCompiledData(ConfigData oConfigData)
        {
            // Get output encoding
            Encoding oOutputEncoding = EncodingHelper.LoadEncoding(oConfigData.Config.Output.ConvertFromXML.OutputEncoding);

            // Create the InputHandler
            InputHandler oInputHandler = InputHandlerFactory.GetInputHandler(oConfigData.Config.Input.DataInputHandler);
            // Initialise it.
            oInputHandler.Initialise(oConfigData.Config.Input.DataInputHandler.Item, oOutputEncoding);

            // The input will populate the pre-compiled data with the XML Schema, XML file path, compiled XML document and Element DB
            PreCompData oPreComp = new PreCompData(oInputHandler, oOutputEncoding);

            Log.Write(MethodInfo.GetCurrentMethod(), "Creating Configuration Examples dictionary", Log.LogType.Info);
            CreateConfigExamplesDictionary(oConfigData, oPreComp);

            Log.Write(MethodInfo.GetCurrentMethod(), "Creating Namespace-Prefix Dictionary", Log.LogType.Info);
            XMLHelper.CreateNamespacePrefixDictionary(oPreComp.NamespacePrefixDict, oPreComp.SchemaSet);

            Log.Write(MethodInfo.GetCurrentMethod(), "Initialising fuzzer statistics", Log.LogType.Info);
            InitialiseFuzzerStatistics(oConfigData);

            return oPreComp;
        }

        /// <summary>
        /// Used to receive validate failures of the schemas or XML.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private static void GeneralValidationEventHandler(Object sender, ValidationEventArgs e)
        {
            Log.Write("Validation Error = " + PreProcessor.ValidatorCaller, e.Message, Log.LogType.Warning);
        }

        /// <summary>
        /// Used to receive validate failures of the Configuration.xml.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private static void ConfigValidationEventHandler(Object sender, ValidationEventArgs e)
        {
            if ((sender as System.Xml.XmlReader).Name.Equals("version") && (e.Message.Equals("The value of the 'version' attribute does not equal its fixed value.")))
                Log.Write("Configuration Validation Error = " + PreProcessor.ValidatorCaller, "Your configuration XML file has the wrong version number.  Update the version number and check for changes in the Configuration.xsd file.", Log.LogType.Warning);
            else
                Log.Write("Configuration Validation Error = " + PreProcessor.ValidatorCaller, e.Message, Log.LogType.Warning);
        }

        /// <summary>
        /// Creates a list of all assemblies used by Schemer, including the Schemer assembly.
        /// </summary>
        public static Assembly[] GetAssemblyList()
        {
            // Create a list of all the Assemblies used by Schemer, including Schemer
            Assembly[] Assemblies = new Assembly[6];
            Assemblies[0] = Assembly.GetAssembly(typeof(Fuzzware.Common.Log));                      // Common
            Assemblies[1] = Assembly.GetAssembly(typeof(Fuzzware.ConvertFromXML.OutputWriter));     // ConvertFromXML
            Assemblies[2] = Assembly.GetAssembly(typeof(Fuzzware.Convert2XML.InputHandler));         // Convert2XML
            Assemblies[3] = Assembly.GetAssembly(typeof(Fuzzware.Evaluate.EvaluationFunctions));    // Evaluate
            Assemblies[4] = Assembly.GetAssembly(typeof(Fuzzware.Monitoring.GenericMonitor));       // Monitoring
            Assemblies[5] = Assembly.GetExecutingAssembly();                                        // Schemer

            return Assemblies;
        }

        private static Configuration InitialiseFuzzerConfiguration(String ConfigurationXML)
        {
            Configuration oConfig = null;

            // Create Assembly[] of Schemas referenced in Configuration.xsd
            Assembly[] Assemblies = GetAssemblyList();
            // Load and compile Configuration Schema file
            String TargetNamespace;
            ValidatorCaller = "Configuration Schema";
            XmlSchemaSet oSchemaSet = XMLHelper.LoadAndCompileSchema("Configuration.xsd", Assemblies, PreProcessor.GeneralValidationEventHandler, out TargetNamespace);

            // Record the namespace of schema (there will be the only one)
            //Namespace = String.Copy(TargetNamespace);

            // Load and compilie XML Configuration file
            ValidatorCaller = "Validating Configuration XML";
            XmlDocument ConfigurationXMLDoc = XMLHelper.LoadAndCompileXML(ConfigurationXML, oSchemaSet, PreProcessor.ConfigValidationEventHandler);

            // Open the XML Configuration file
            FileStream myFileStream = null;
            try
            {
                myFileStream = new FileStream(ConfigurationXML, FileMode.Open, FileAccess.Read, FileShare.Read);
            }
            catch (Exception e)
            {
                Log.Write(e);
            }

            // Deserialise the XML file into the auto generated object
            XmlSerializer Serializer = new XmlSerializer(typeof(Configuration));
            try
            {
                oConfig = (Configuration)Serializer.Deserialize(myFileStream);
            }
            catch (Exception e)
            {
                Log.Write(MethodInfo.GetCurrentMethod(), "Could not deserialise '" + ConfigurationXML + "'\n" + e.ToString(), Log.LogType.Error);
            }

            myFileStream.Close();

            return oConfig;
        }

        private static SimpleTypeFuzzerConfig InitialiseSimpleTypeFuzzerConfig(Configuration Config)
        {
            SimpleTypeFuzzerConfig STFConfig = null;

            Assembly ass = Assembly.GetExecutingAssembly();

            // Load and compile Configuration Schema file
            String TargetNamespace;
            ValidatorCaller = "SimpleTypeFuzzerConfig Configuration Schema";
            XmlSchemaSet oSchemaSet = XMLHelper.LoadAndCompileSchema("SimpleTypeFuzzerConfig.xsd", ass, PreProcessor.GeneralValidationEventHandler, out TargetNamespace);

            // Load and compilie XML Configuration file
            ValidatorCaller = "Validating SimpleTypeFuzzerConfig Configuration XML";
            XmlDocument ConfigurationXML = XMLHelper.LoadAndCompileXML(Config.XmlConfigFiles.SimpleTypeFuzzerXML, oSchemaSet, PreProcessor.GeneralValidationEventHandler);

            // Open the XML Configuration file
            FileStream myFileStream = null;
            try
            {
                myFileStream = new FileStream(Config.XmlConfigFiles.SimpleTypeFuzzerXML, FileMode.Open, FileAccess.Read, FileShare.ReadWrite);
            }
            catch (Exception e)
            {
                Log.Write(e);
            }

            // Deserialise the XML file into the auto generated object
            XmlSerializer Serializer = new XmlSerializer(typeof(SimpleTypeFuzzerConfig));
            try
            {
                STFConfig = (SimpleTypeFuzzerConfig)Serializer.Deserialize(myFileStream);
            }
            catch (Exception e)
            {
                Log.Write(MethodInfo.GetCurrentMethod(), "Could not deserialise '" + Config.XmlConfigFiles.SimpleTypeFuzzerXML + "'\n" + e.ToString(), Log.LogType.Error);
            }

            myFileStream.Close();

            PreProcSTFArrayConversion(STFConfig);

            return STFConfig;
        }

        /// <summary>
        /// The purpose of this is to give the user an easy way to specify integers in hex form.  However, the problem is when we convert it to
        /// an integer string, the number depends on the type e.g. UInt32 or Int32?.  We assume the user is wanting output bytes in binary, and
        /// is going to be using an unsigned type, we do this for convenience.
        /// </summary>
        /// <param name="STFConfig"></param>
        private static void PreProcSTFArrayConversion(SimpleTypeFuzzerConfig STFConfig)
        {
            if ((STFConfig.IntegerValueFuzzer == null) || (STFConfig.IntegerValueFuzzer.IntegerGroup == null))
                return;

            // Convert each integer value group
            for(int j = 0; j < STFConfig.IntegerValueFuzzer.IntegerGroup.Length; j++)
            {
                // Convert all hex strings passed of the Integer value fuzzer into their Int64 equivalents
                String[] IntValStrs = STFConfig.IntegerValueFuzzer.IntegerGroup[j].IntegerValue;
                if (null == IntValStrs)
                    return;
                for (int i = 0; i < IntValStrs.Length; i++)
                {
                    if (IntValStrs[i].Length < 3)
                        continue;
                    if (IntValStrs[i].StartsWith("0x", StringComparison.CurrentCultureIgnoreCase))
                    {
                        // Read in as a hex number
                        Int64 Val;
                        if (!Int64.TryParse(IntValStrs[i].Substring(2, IntValStrs[i].Length - 2), System.Globalization.NumberStyles.HexNumber, null, out Val))
                        {
                            Log.Write(MethodInfo.GetCurrentMethod(), "Could not convert hex number '" + IntValStrs[i] + 
                                "' to an Int64.  Numbers specified as hex need to fit into an Int64.  If larger integers are required, specify directly as base 10 integers.  Ignoring entry.", Log.LogType.Warning);
                        }
                        else
                        {
                            IntValStrs[i] = Val.ToString();
                        }
                    }
                }
            }
        }

        private static ComplexTypeFuzzerConfig InitialiseComplexTypeFuzzerConfig(Configuration Config)
        {
            ComplexTypeFuzzerConfig CTFConfig = null;

            Assembly ass = Assembly.GetExecutingAssembly();

            // Load and compile Configuration Schema file
            String TargetNamespace;
            ValidatorCaller = "ComplexTypeFuzzerConfig Configuration Schema";
            XmlSchemaSet oSchemaSet = XMLHelper.LoadAndCompileSchema("ComplexTypeFuzzerConfig.xsd", ass, PreProcessor.GeneralValidationEventHandler, out TargetNamespace);

            // Load and compilie XML Configuration file
            ValidatorCaller = "Validating ComplexTypeFuzzerConfig Configuration XML";
            XmlDocument ConfigurationXML = XMLHelper.LoadAndCompileXML(Config.XmlConfigFiles.ComplexTypeFuzzerXML, oSchemaSet, PreProcessor.GeneralValidationEventHandler);

            // Open the XML Configuration file
            FileStream myFileStream = null;
            try
            {
                myFileStream = new FileStream(Config.XmlConfigFiles.ComplexTypeFuzzerXML, FileMode.Open, FileAccess.Read, FileShare.ReadWrite);
            }
            catch (Exception e)
            {
                Log.Write(e);
            }

            // Deserialise the XML file into the auto generated object
            XmlSerializer Serializer = new XmlSerializer(typeof(ComplexTypeFuzzerConfig));
            try
            {
                CTFConfig = (ComplexTypeFuzzerConfig)Serializer.Deserialize(myFileStream);
            }
            catch (Exception e)
            {
                Log.Write(MethodInfo.GetCurrentMethod(), "Could not deserialise '" + Config.XmlConfigFiles.ComplexTypeFuzzerXML + "'\n" + e.ToString(), Log.LogType.Error);
            }

            myFileStream.Close();

            return CTFConfig;
        }

        private static void CreateConfigExamplesDictionary(ConfigData oConfigData, PreCompData oPreComp)
        {
            if (null == oConfigData.CTFConfig.ExampleComplexContent)
                return;

            for (int i = 0; i < oConfigData.CTFConfig.ExampleComplexContent.Length; i++)
            {
                XmlNode[] NodeArray = (XmlNode[])oConfigData.CTFConfig.ExampleComplexContent[i];
                if (0 == NodeArray.Length)
                    continue;

                XmlElement Ele = NodeArray[0] as XmlElement;
                if(String.IsNullOrEmpty(Ele.NamespaceURI))
                    Log.Write(MethodInfo.GetCurrentMethod(), "Namespace of ComplexTypeFuzzerConfig example node '" + Ele.LocalName + "' was empty", Log.LogType.Warning); 

                XPathNavigator Nav = Ele.CreateNavigator();

                // Recurse through all elements in the example
                AddToExampleDictionary(Nav, oPreComp);
            }
        }

        private static void AddToExampleDictionary(XPathNavigator Nav, PreCompData oPreComp)
        {
            do
            {
                XPathNavigator NavClone = Nav.Clone();

                // Add the current element
                XmlQualifiedName Name = new XmlQualifiedName(NavClone.LocalName, NavClone.NamespaceURI);
                if (oPreComp.ConfigExamplesDict.ContainsKey(Name))
                {
                    oPreComp.ConfigExamplesDict[Name].Add(NavClone);
                }
                else
                {
                    List<XPathNavigator> NavList = new List<XPathNavigator>();
                    NavList.Add(NavClone);
                    oPreComp.ConfigExamplesDict.Add(Name, NavList);
                }

                // Add any child elements
                if(NavClone.MoveToFirstChild())
                    AddToExampleDictionary(NavClone, oPreComp);

                // Move to sibling
            }
            while(Nav.MoveToNext(XPathNodeType.Element));
        }

        private static void InitialiseFuzzerStatistics(ConfigData oConfigData)
        {
            FuzzerStats.InitialiseFuzzerStats();
            uint Tolerance = 0;
            if (oConfigData.Config.Output.EvaluationMethod.Item is Fuzzware.Schemas.AutoGenerated.OutputToExe)
            {
                uint.TryParse((oConfigData.Config.Output.EvaluationMethod.Item as Fuzzware.Schemas.AutoGenerated.OutputToExe).UniqueOutputs.Tolerance, out Tolerance);
            }
            else if (oConfigData.Config.Output.EvaluationMethod.Item is Fuzzware.Schemas.AutoGenerated.OutputToNetwork)
            {
                uint.TryParse((oConfigData.Config.Output.EvaluationMethod.Item as Fuzzware.Schemas.AutoGenerated.OutputToNetwork).UniqueResponses.Tolerance, out Tolerance);
            }
            else if (oConfigData.Config.Output.EvaluationMethod.Item is Fuzzware.Schemas.AutoGenerated.OutputToWebService)
            {
                uint.TryParse((oConfigData.Config.Output.EvaluationMethod.Item as Fuzzware.Schemas.AutoGenerated.OutputToWebService).UniqueResponses.Tolerance, out Tolerance);
            }
            OutputStats.InitialiseOutputStats(EngineState.DefaultTestcaseName, Tolerance);
        }
    }
}
