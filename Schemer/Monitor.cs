using System;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Reflection;
using System.Diagnostics;
using Fuzzware.Common;
using Fuzzware.Monitoring;
using Fuzzware.Schemas.AutoGenerated;

namespace Fuzzware.Schemer
{
    class Monitor
    {
        private delegate uint RunCommandDelegate(String Commandline);
        Fuzzware.Schemas.AutoGenerated.Monitoring oMonitoringConfig;
        Controller oFuzzController;
        EventLogMonitor EVMon;
        List<ProcessMonitor> ProcMonList;
        List<ProcessPerfMonitor> ProcPerfMonList;
        EngineState oState;
        int PreviousStatesToShow = 5;

        public Monitor(Fuzzware.Schemas.AutoGenerated.Monitoring MonitoringConfig, Controller FuzzController, EngineState EngState)
        {
            oMonitoringConfig = MonitoringConfig;
            oFuzzController = FuzzController;
            oState = EngState;
            ProcMonList = new List<ProcessMonitor>();
            ProcPerfMonList = new List<ProcessPerfMonitor>();
        }

        public void Start()
        {
            if(oMonitoringConfig == null)
                return;

            Log.Write(MethodBase.GetCurrentMethod(), "Initialising monitoring threads", Log.LogType.Info);

            // Configure Post-Mortem Debugging
            if (null != oMonitoringConfig.PostMortemDebugger)
            {
                StringBuilder DBGCmdLine = new StringBuilder("-I");
                if (!String.IsNullOrEmpty(oMonitoringConfig.PostMortemDebugger.CrashOutputDir))
                {
                    DBGCmdLine.Append(" -o \"");
                    if (String.IsNullOrEmpty(oMonitoringConfig.PostMortemDebugger.CrashOutputDir))
                        oMonitoringConfig.PostMortemDebugger.CrashOutputDir = Environment.CurrentDirectory;
                    DBGCmdLine.Append(Path.GetFullPath(oMonitoringConfig.PostMortemDebugger.CrashOutputDir));
                    DBGCmdLine.Append("\"");
                }
                Process oFuzzwareDBG = new Process();
#if DEBUG
                String FuzzwareDBGStubPath = @"..\..\..\FuzzwareDBG\debug\FuzzwareDBG.exe";
#else
                String FuzzwareDBGStubPath = @"FuzzwareDBG.exe";
#endif
                oFuzzwareDBG.StartInfo.FileName = Path.GetFullPath(Path.Combine(Path.GetDirectoryName(Assembly.GetEntryAssembly().Location), FuzzwareDBGStubPath));
                oFuzzwareDBG.StartInfo.Arguments = DBGCmdLine.ToString();
                oFuzzwareDBG.StartInfo.WorkingDirectory = Environment.CurrentDirectory;
                oFuzzwareDBG.Start();
            }

            // Configure event log monitoring
            if (oMonitoringConfig.EventLog != null)
            {
                // Create Event Log monitor
                EVMon = new EventLogMonitor(this.EventLogCallback, oMonitoringConfig.EventLog);
                if (oMonitoringConfig.RemoteCredentials != null)
                    EVMon.SetRemoteComputer(oMonitoringConfig.RemoteCredentials.RemoteHostname,
                                            oMonitoringConfig.RemoteCredentials.RemoteUsername,
                                            oMonitoringConfig.RemoteCredentials.RemotePassword);
                EVMon.Start();
                Log.Write(MethodBase.GetCurrentMethod(), "Monitoring Event Log...", Log.LogType.Info);
            }

            // Configure the process termination monitor
            if (oMonitoringConfig.ProcessTerminationMonitor != null)
            {
                for (int i = 0; i < oMonitoringConfig.ProcessTerminationMonitor.Length; i++)
                {
                    ProcessTerminationMonitor ptm = oMonitoringConfig.ProcessTerminationMonitor[i];
                    // Create Process Termination Monitor
                    ProcessMonitor ProcMon = null;
                    if (ptm.TargetProcess.Item is String)
                        ProcMon = new ProcessMonitor((string)ptm.TargetProcess.Item, this.ProcTermCallback);
                    else
                        ProcMon = new ProcessMonitor((uint)ptm.TargetProcess.Item, this.ProcTermCallback);

                    if (oMonitoringConfig.RemoteCredentials != null)
                        ProcMon.SetRemoteComputer(oMonitoringConfig.RemoteCredentials.RemoteHostname,
                                                oMonitoringConfig.RemoteCredentials.RemoteUsername,
                                                oMonitoringConfig.RemoteCredentials.RemotePassword);

                    ProcMon.CallbackUserObject = ptm;
                    ProcMon.Start();
                    Log.Write(MethodBase.GetCurrentMethod(), "Monitoring process '" + ptm.TargetProcess.Item.ToString()
                        + "' for termination ...", Log.LogType.Info);
                    ProcMonList.Add(ProcMon);
                }
            }

            // Configure the process performance
            if (oMonitoringConfig.ProcessPerformanceMonitor != null)
            {
                for (int i = 0; i < oMonitoringConfig.ProcessPerformanceMonitor.Length; i++)
                {
                    ProcessPerformanceMonitor ppm = oMonitoringConfig.ProcessPerformanceMonitor[i];
                    ProcessPerfMonitor PPerfMon = null;
                    if (ppm.TargetProcess.Item is String)
                        PPerfMon = new ProcessPerfMonitor((string)ppm.TargetProcess.Item, ppm.PollingIntervalSecs);
                    else
                        PPerfMon = new ProcessPerfMonitor((uint)ppm.TargetProcess.Item, ppm.PollingIntervalSecs);

                    if (oMonitoringConfig.RemoteCredentials != null)
                        PPerfMon.SetRemoteComputer(oMonitoringConfig.RemoteCredentials.RemoteHostname,
                                                oMonitoringConfig.RemoteCredentials.RemoteUsername,
                                                oMonitoringConfig.RemoteCredentials.RemotePassword);

                    // Create Process Max Value Performance Monitor
                    if (ppm.ProcessMaxValues != null)
                    {
                        if (ppm.ProcessMaxValues.MaxValues.PercentProcessorTimeSpecified)   // Adjust for number of processors
                            PPerfMon.AddMaxPropertyCheck("PercentProcessorTime", ppm.ProcessMaxValues.MaxValues.PercentProcessorTime / PPerfMon.GetNumberOfProcessors());
                        if (ppm.ProcessMaxValues.MaxValues.VirtualBytesMbSpecified)   // Turn Mb's into bytes
                            PPerfMon.AddMaxPropertyCheck("VirtualBytes", ppm.ProcessMaxValues.MaxValues.VirtualBytesMb * 1024 * 1024);
                        if (ppm.ProcessMaxValues.MaxValues.HandleCountSpecified)
                            PPerfMon.AddMaxPropertyCheck("HandleCount", ppm.ProcessMaxValues.MaxValues.HandleCount);
                        if (ppm.ProcessMaxValues.MaxValues.ThreadCountSpecified)
                            PPerfMon.AddMaxPropertyCheck("ThreadCount", ppm.ProcessMaxValues.MaxValues.ThreadCount);
                    }
                    if (ppm.ProcessBaseMultiple != null)
                    {
                        if (ppm.ProcessBaseMultiple.Property.VirtualBytesSpecified)
                            PPerfMon.AddBaseMultplierPropertyCheck("VirtualBytes", ppm.ProcessBaseMultiple.Property.VirtualBytes);
                        if (ppm.ProcessBaseMultiple.Property.HandleCountSpecified)
                            PPerfMon.AddBaseMultplierPropertyCheck("HandleCount", ppm.ProcessBaseMultiple.Property.HandleCount);
                        if (ppm.ProcessBaseMultiple.Property.ThreadCountSpecified)
                            PPerfMon.AddBaseMultplierPropertyCheck("ThreadCount", ppm.ProcessBaseMultiple.Property.ThreadCount);
                    }
                    if (ppm.ProcessPrevPollMultiple != null)
                    {
                        if (ppm.ProcessPrevPollMultiple.Property.VirtualBytesSpecified)
                            PPerfMon.AddBaseMultplierPropertyCheck("VirtualBytes", ppm.ProcessPrevPollMultiple.Property.VirtualBytes);
                        if (ppm.ProcessPrevPollMultiple.Property.HandleCountSpecified)
                            PPerfMon.AddBaseMultplierPropertyCheck("HandleCount", ppm.ProcessPrevPollMultiple.Property.HandleCount);
                        if (ppm.ProcessPrevPollMultiple.Property.ThreadCountSpecified)
                            PPerfMon.AddBaseMultplierPropertyCheck("ThreadCount", ppm.ProcessPrevPollMultiple.Property.ThreadCount);
                    }

                    PPerfMon.CallbackUserObject = ppm;
                    PPerfMon.SetMaxCallback(MaxValueCallback);
                    PPerfMon.SetBaseMultiplierCallback(BaseValueCallback);
                    PPerfMon.SetPrevMultiplierCallback(PrevPollValueCallback);
                    PPerfMon.Start();
                    Log.Write(MethodBase.GetCurrentMethod(), "Monitoring preformance data of process '" + ppm.TargetProcess.Item.ToString()
                            + "' using a " + ppm.PollingIntervalSecs + " sec polling interval ...", Log.LogType.Info);
                    ProcPerfMonList.Add(PPerfMon);
                }
            }
        }

        public void Stop()
        {
            if(oMonitoringConfig == null)
                return;

            Log.Write(MethodBase.GetCurrentMethod(), "Terminating monitoring threads", Log.LogType.Info);

            if (null != oMonitoringConfig.PostMortemDebugger)
            {
                Process oFuzzwareDBG = new Process();
#if DEBUG
                String FuzzwareDBGStubPath = @"..\..\..\FuzzwareDBG\debug\FuzzwareDBG.exe";
#else
                String FuzzwareDBGStubPath = @"FuzzwareDBG.exe";
#endif
                oFuzzwareDBG.StartInfo.FileName = Path.GetFullPath(Path.Combine(Path.GetDirectoryName(Assembly.GetEntryAssembly().Location), FuzzwareDBGStubPath));
                oFuzzwareDBG.StartInfo.Arguments = "-uI";
                oFuzzwareDBG.StartInfo.WorkingDirectory = Environment.CurrentDirectory;
                oFuzzwareDBG.Start();
            }

            if (oMonitoringConfig.EventLog != null)
            {
                EVMon.Stop();
            }

            if (oMonitoringConfig.ProcessTerminationMonitor != null)
            {
                for (int i = 0; i < ProcMonList.Count; i++)
                    ProcMonList[i].Stop();
            }

            if (oMonitoringConfig.ProcessPerformanceMonitor != null)
            {
                for (int i = 0; i < ProcPerfMonList.Count; i++)
                    ProcPerfMonList[i].Stop();
            }
        }

        private void EventLogCallback(Win32_NTLogEvent EventLogEntry)
        {
            // Log that an interesting event has occurred
            Log.Write(MethodBase.GetCurrentMethod(), "An '" + EventLogEntry.Logfile + "' log entry has occurred that matches specified keywords.  See log file for complete description.", Log.LogType.Info);

            // Create description
            StringBuilder Desc = new StringBuilder();
            Desc.AppendLine("LogFile: " + EventLogEntry.Logfile);
            Desc.AppendLine("Time: " + EventLogEntry.TimeGenerated);
            Desc.AppendLine("Source: " + EventLogEntry.SourceName);
            Desc.AppendLine("EventCode: " + EventLogEntry.EventCode);
            Desc.AppendLine("Description: " + EventLogEntry.Message);

            // Log to the log file the conplete description
            Log.Write(MethodBase.GetCurrentMethod(), "Event Log entry:\n" + Desc.ToString(), Log.LogType.LogOnlyInfo);

            oState.PrintHistory(EventLogEntry.TimeGenerated, PreviousStatesToShow);
        }

        private void ProcTermCallback(Win32_Process TermProcess, object UserDefined, ProcessMonitor Monitor)
        {
            ProcessTerminationMonitor ptm = (ProcessTerminationMonitor)UserDefined;

            // Log that an interesting event has occurred
            Log.Write(MethodBase.GetCurrentMethod(), "The process '" + TermProcess.Name + "' has terminated.  See log file for process state description.", Log.LogType.Info);

            // Create description
            StringBuilder Desc = new StringBuilder();
            Desc.AppendLine("ProcessId: " + TermProcess.ProcessId);
            Desc.AppendLine("PeakVirtualSize: " + TermProcess.PeakVirtualSize);
            Desc.AppendLine("PeakWorkingSetSize: " + TermProcess.PeakWorkingSetSize);
            Desc.AppendLine("HandleCount: " + TermProcess.HandleCount);

            // Log to the log file the conplete description
            Log.Write(MethodBase.GetCurrentMethod(), "Process state:\n" + Desc.ToString(), Log.LogType.LogOnlyInfo);

            oState.PrintHistory(TermProcess.Time, PreviousStatesToShow);

            PerformActions(ptm.ActionsToTake, Monitor.RunCommand);

        }

        private void MaxValueCallback(String Property, UInt64 Value, PerfProc_Process Current, PerfProc_Process Previous, object UserDefined, ProcessPerfMonitor Monitor)
        {
            ProcessPerformanceMonitor ppm = (ProcessPerformanceMonitor)UserDefined;

            Log.Write(MethodBase.GetCurrentMethod(), "The '" + Current.Name + "'(" + Current.IDProcess + ") process' " + Property +
                " has exceeded " + Value + " for " + ppm.PollingIntervalSecs + " secs", Log.LogType.Info);

            oState.PrintHistory(Previous.Time, PreviousStatesToShow);

            PerformActions(ppm.ProcessMaxValues.ActionsToTake, Monitor.RunCommand);
        }

        private void PrevPollValueCallback(String Property, UInt64 Value, PerfProc_Process Current, PerfProc_Process Previous, object UserDefined, ProcessPerfMonitor Monitor)
        {
            ProcessPerformanceMonitor ppm = (ProcessPerformanceMonitor)UserDefined;

            Log.Write(MethodBase.GetCurrentMethod(), "The '" + Current.Name + "'(" + Current.IDProcess + ") process' " + Property +
                " value of " + Current.Properties(Property) + " has exceeded previous poll value of " + Previous.Properties(Property) + " by " +
                "a factor of " + Value + " within " + ppm.PollingIntervalSecs + " secs", Log.LogType.Info);

            oState.PrintHistory(Previous.Time, PreviousStatesToShow);

            PerformActions(ppm.ProcessPrevPollMultiple.ActionsToTake, Monitor.RunCommand);
        }

        private void BaseValueCallback(String Property, UInt64 Value, PerfProc_Process Current, PerfProc_Process Previous, object UserDefined, ProcessPerfMonitor Monitor)
        {
            ProcessPerformanceMonitor ppm = (ProcessPerformanceMonitor)UserDefined;

            Log.Write(MethodBase.GetCurrentMethod(), "The '" + Current.Name + "'(" + Current.IDProcess + ") process' " + Property +
                " value of " + Current.Properties(Property) + " has exceeded the base value of " + Previous.Properties(Property) + " by " +
                "a factor of " + Value + " within " + ppm.PollingIntervalSecs + " secs", Log.LogType.Info);

            oState.PrintHistory(Previous.Time, PreviousStatesToShow);

            PerformActions(ppm.ProcessBaseMultiple.ActionsToTake, Monitor.RunCommand);
        }

        private void PerformActions(ActionsToTake Actions, RunCommandDelegate RunCommand)
        {
            if (Actions.PauseFuzzing)
                oFuzzController.Pause();

            if (Actions.RunCommand != null)
            {
                string[] Commands = Actions.RunCommand;
                // Run commands
                for (int i = 0; i < Commands.Length; i++)
                {
                    Log.Write(MethodBase.GetCurrentMethod(), "Running command: " + Commands[i], Log.LogType.Info);
                    uint ret = RunCommand(Commands[i]);
                    switch (ret)
                    {
                        case 0:
                            Log.Write(MethodBase.GetCurrentMethod(), "Command successful", Log.LogType.Info);
                            break;
                        case 2:
                            Log.Write(MethodBase.GetCurrentMethod(), "Access Denied", Log.LogType.Info);
                            break;
                        case 3:
                            Log.Write(MethodBase.GetCurrentMethod(), "Insufficient Privilege", Log.LogType.Info);
                            break;
                        case 8:
                            Log.Write(MethodBase.GetCurrentMethod(), "Unknown Failure", Log.LogType.Info);
                            break;
                        case 9:
                            Log.Write(MethodBase.GetCurrentMethod(), "Path Not Found", Log.LogType.Info);
                            break;
                        case 21:
                            Log.Write(MethodBase.GetCurrentMethod(), "Invalid Parameter", Log.LogType.Info);
                            break;
                        default:
                            Log.Write(MethodBase.GetCurrentMethod(), "Return code not recognised", Log.LogType.Info);
                            break;
                    }
                }
            }


            // To Resume we must have paused first
            if ((Actions.PauseFuzzing) && (Actions.ResumeFuzzing))
                oFuzzController.Resume();
        }
    }
}
