using System;
using System.IO;
using System.Collections.Generic;
using System.Text;
using System.Reflection;
using System.Xml;
using System.Xml.Schema;
using System.Xml.Serialization;
using Fuzzware.Common;
using Fuzzware.Common.XML;
using Fuzzware.Schemas.AutoGenerated;

namespace Fuzzware.Evaluate
{
    class Program
    {
        private static String ValidatorCaller;

        static void Copyright()
        {
            Console.Out.WriteLine();
            Console.Out.WriteLine("Evaluate.exe 2007 dave@fuzzware.net");
            Console.Out.WriteLine();
        }

        static void Usage()
        {
            Console.Out.WriteLine("Evaluates the input binary file according to the XML Configuration file");
            Console.Out.WriteLine();
            Console.Out.WriteLine("Usage:");
            Console.Out.WriteLine("Evaluate.exe /ib:<filename> /cx:<filename>");
            //Console.Out.WriteLine("Evaluate.exe /ib:<filename> /cx:<filename> [/pd:<filename> /is:<filename>]");
            Console.Out.WriteLine();
            Console.Out.WriteLine("where");
            Console.Out.WriteLine("  /ib: - Input binary file to be evaluated.");
            Console.Out.WriteLine("  /cx: - Config Xml specifying configuration options.");
            //Console.Out.WriteLine("  /pd: - Protocol Definition file.");
            //Console.Out.WriteLine("  /is: - .");
            Console.Out.WriteLine();
            Console.Out.WriteLine();
        }

        /// <summary>
        /// Used to receive validate failures of the schemas or XML.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private static void GeneralValidationEventHandler(Object sender, ValidationEventArgs e)
        {
            Console.Out.WriteLine("Validation Error = " + Program.ValidatorCaller + Environment.NewLine + e.Message);
        }

        static void Main(string[] args)
        {
            Copyright();
            // Take as input the xml input, the xml schema, the XML config, and the output file
            //if ((args.Length != 2) && (args.Length != 4))
            if (args.Length != 2)
            {
                // Print out usage
                Usage();
                return;
            }

            String[] ValidArgs = null;
            if (!ValidateCommandLine(args, out ValidArgs))
            {
                // Print out usage
                Usage();
                return;
            }

            String BinaryFilename = ValidArgs[0];
            String XMLConfig = ValidArgs[1];
            //String ProtocolFilename = ValidArgs[2];
            //String XSDInputFilename = ValidArgs[3];

            Console.Out.WriteLine("Reading input file...");
            MemoryStream BinaryFile = new MemoryStream();
            FileStream BinaryFileStream = new FileStream(BinaryFilename, FileMode.Open, FileAccess.Read, FileShare.Read);
            // Read the input binary file
            try
            {
                using (BinaryReader br = new BinaryReader(BinaryFileStream))
                {
                    BinaryFile.Write(br.ReadBytes((int)BinaryFileStream.Length), 0, (int)BinaryFileStream.Length);
                }
            }
            catch (Exception e)
            {
                Console.WriteLine(e);
                Console.WriteLine("Graceful exit");
                return;
            }
            
            // Read in configuration information
            Console.Out.WriteLine("Reading and verifying the input configuration...");
            Fuzzware.Schemas.AutoGenerated.EvaluationFunction cfg = GetConfiguration(XMLConfig);

            if (null == cfg)
            {
                Console.Out.WriteLine("Failed to read configuration file '" + XMLConfig + "'");
                return;
            }

            //if (!String.IsNullOrEmpty(ProtocolFilename))
            //{

            //}
            BinaryFile.Position = 0;
            Console.Out.Write("Evaluating ... ");
            EvaluateEngine EE = new EvaluateEngine();
            EE.Dispatch(BinaryFile, cfg);
            Console.Out.WriteLine("finished.");
        }

        private static Fuzzware.Schemas.AutoGenerated.EvaluationFunction GetConfiguration(String XMLConfig)
        {
            Fuzzware.Schemas.AutoGenerated.EvaluationFunction oConfig = null;

            // Load and compile ConvertFromXML Schema file
            String TargetNamespace;
            ValidatorCaller = "Evaluate Schema";
            Assembly ass = Assembly.GetAssembly(typeof(Fuzzware.Evaluate.EvaluationFunctions));
            XmlSchemaSet oSchemaSet = XMLHelper.LoadAndCompileSchema("Evaluate.xsd", ass, GeneralValidationEventHandler, out TargetNamespace);

            // Load and compile XML ConvertFromXML file
            ValidatorCaller = "Validating Evaluate configuration XML";
            XmlDocument ConfigurationXML = XMLHelper.LoadAndCompileXML(XMLConfig, oSchemaSet, GeneralValidationEventHandler);

            // Open the XML Configuration file
            FileStream myFileStream = null;
            //try
            //{
            myFileStream = new FileStream(XMLConfig, FileMode.Open, FileAccess.Read, FileShare.Read);
            //}
            //catch (Exception e)
            //{
            //    Log.Write(e);
            //}

            // Deserialise the XML file into the auto generated object
            XmlSerializer Serializer = new XmlSerializer(typeof(Fuzzware.Schemas.AutoGenerated.EvaluationFunction));
            //try
            //{
            oConfig = (Fuzzware.Schemas.AutoGenerated.EvaluationFunction)Serializer.Deserialize(myFileStream);
            //}
            //catch (Exception)
            //{
            //    Log.Write("Program.GetConfiguration", "Could not deserialise '" + XMLConfig + "'", Log.LogType.Error);
            //}

            myFileStream.Close();

            return oConfig;
        }

        private static bool ValidateCommandLine(string[] args, out String[] ValidArgs)
        {
            ValidArgs = new String[4];
            bool[] HandledArgs = new bool[4];

            for (int i = 0; i < args.Length; i++)
            {
                if (args[i].Length < 4)
                {
                    Console.Out.WriteLine("The command line parameter '" + args[i] + "' is too short.");
                    Console.Out.WriteLine();
                    return false;
                }

                String ArgSwitch = args[i].Substring(0, 4);
                switch (ArgSwitch)
                {
                    case "/ib:":
                        ValidArgs[0] = args[i].Substring(4, args[i].Length - 4);
                        if (0 == ValidArgs[0].Length)
                        {
                            Console.Out.WriteLine("The command line parameter '" + args[i] + "' did not specify a filename.");
                            Console.Out.WriteLine();
                            return false;
                        }
                        if (HandledArgs[0])
                        {
                            Console.Out.WriteLine("The command line parameter with switch '/is:' has been specified twice.");
                            Console.Out.WriteLine();
                            return false;
                        }
                        HandledArgs[0] = true;
                        break;
                    case "/cx:":
                        ValidArgs[1] = args[i].Substring(4, args[i].Length - 4);
                        if (0 == ValidArgs[1].Length)
                        {
                            Console.Out.WriteLine("The command line parameter '" + args[i] + "' did not specify a filename.");
                            Console.Out.WriteLine();
                            return false;
                        }
                        if (HandledArgs[1])
                        {
                            Console.Out.WriteLine("The command line parameter with switch '/cx:' has been specified twice.");
                            Console.Out.WriteLine();
                            return false;
                        }
                        HandledArgs[1] = true;
                        break;
                    case "/pd:":
                        ValidArgs[2] = args[i].Substring(4, args[i].Length - 4);
                        if (0 == ValidArgs[2].Length)
                        {
                            Console.Out.WriteLine("The command line parameter '" + args[i] + "' did not specify a filename.");
                            Console.Out.WriteLine();
                            return false;
                        }
                        if (HandledArgs[2])
                        {
                            Console.Out.WriteLine("The command line parameter with switch '/cx:' has been specified twice.");
                            Console.Out.WriteLine();
                            return false;
                        }
                        HandledArgs[2] = true;
                        break;
                    case "/is:":
                        ValidArgs[3] = args[i].Substring(4, args[i].Length - 4);
                        if (0 == ValidArgs[3].Length)
                        {
                            Console.Out.WriteLine("The command line parameter '" + args[i] + "' did not specify a filename.");
                            Console.Out.WriteLine();
                            return false;
                        }
                        if (HandledArgs[3])
                        {
                            Console.Out.WriteLine("The command line parameter with switch '/cx:' has been specified twice.");
                            Console.Out.WriteLine();
                            return false;
                        }
                        HandledArgs[3] = true;
                        break;
                    default:
                        Console.Out.WriteLine("The command line parameter '" + args[i] + "' has an invalid switch.");
                        Console.Out.WriteLine();
                        return false;
                }

            }
            return true;
        }
    }
}
