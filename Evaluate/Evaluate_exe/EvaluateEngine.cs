using System;
using System.IO;
using System.Collections.Generic;
using System.Text;
using System.Xml;
using System.Xml.Schema;
using Fuzzware.Common;
using Fuzzware.Common.XML;
using Fuzzware.ConvertFromXML;
using Fuzzware.Schemas.AutoGenerated;
using Fuzzware.Evaluate.Statistics;

namespace Fuzzware.Evaluate
{
    class EvaluateEngine
    {
        public delegate bool EvaluateFn(MemoryStream XMLMemoryStream, EvaluationFunction EvalFunction, String StateDesc);
        EvaluateFn EvaluateFunction;
        
        private void SetEvaluateFunction(Fuzzware.Schemas.AutoGenerated.EvaluationFunction EvalFnConfig)
        {
            EvaluateFn Eval = null;
            if (EvalFnConfig.Item is OutputFile)
            {
                Eval = EvaluationFunctions.OutputToFile;
            }
            else if (EvalFnConfig.Item is outputToNetwork)
            {
                Eval = EvaluationFunctions.OutputToNetwork;
            }
            else if (EvalFnConfig.Item is outputToExe)
            {
                Eval = EvaluationFunctions.OutputToExe;
            }
            else if (EvalFnConfig.Item is outputToCode)
            {
                Eval = EvaluationFunctions.OutputToCode;
            }
            else
            {
                Console.WriteLine("The evaluation function was not recognised");
            }

            this.EvaluateFunction = Eval;
        }

        /// <summary>
        /// At this staqe the ability to run protocols is a lot of effort, so initially Evaluate.exe won't support this
        /// </summary>
        //private void RunProtocol(ProtocolDefinition ProtoDefn, XmlSchemaSet oSchemaSet, Fuzzware.Schemas.AutoGenerated.EvaluationFunction EvalConfig)
        //{
        //    OutputSettings oSettings = new OutputSettings();
        //    oSettings.XmlSettings.Encoding = new ASCIIEncoding();

        //    // Create namespace prefix dict and name elememnt list
        //    List<XmlQualifiedName> oElementNameList = new List<XmlQualifiedName>();
        //    SortedDictionary<XmlQualifiedName, ParticleDBEntry> oNameParticleDictionary = new SortedDictionary<XmlQualifiedName,ParticleDBEntry>(new XMLHelper.XmlQualifiedNameComparer());
        //    XMLHelper.CreateParticleDatabase(null, oSchemaSet, oElementNameList, oNameParticleDictionary);

        //    oSettings.NameParticleDictionary = oNameParticleDictionary;

        //    if (oConfigData.Config.input.ItemElementName == ItemChoiceType.ProtocolDefnXML)
        //    {
        //        //Run the protocol
        //        if (!EvaluationFunctions.RunProtocol(ProtoDefn, EvalConfig.Item as outputToNetwork, oSettings))
        //        {
        //            Log.Write("Dispatcher.TestDispatch", "Specified protocol did not run correctly", Log.LogType.UnexpectedError);
        //        }
        //    }
        //}

        public void Dispatch(MemoryStream BinaryStream, Fuzzware.Schemas.AutoGenerated.EvaluationFunction EvalConfig)
        {
            OutputStats.InitialiseOutputStats("Output");
            SetEvaluateFunction(EvalConfig);

            if (!EvaluateFunction(BinaryStream, EvalConfig, "Output"))
                Console.Out.WriteLine("No evaluation function specified");
        }
    }
}
