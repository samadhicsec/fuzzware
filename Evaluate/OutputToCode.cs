using System;
using System.IO;
using System.Collections.Generic;
using System.Text;
using System.Reflection;
using Fuzzware.Common;
using Fuzzware.Schemas.AutoGenerated;
using Fuzzware.ConvertFromXML.Processors;

namespace Fuzzware.Evaluate
{
    public partial class EvaluationFunctions
    {
        public static bool OutputToCode(MemoryStream XMLMemoryStream, EvaluationMethod EvalFunction, String StateDesc)
        {
            //UserDefinedCode config = EvalFunction.Item as UserDefinedCode;

            //// Create an instance of the object

            //object ClassInstance = DynamicCodeFn.CreateClassInstance(config.SourceFile, config.ReferenceAssembly, config.NamespaceDotClass);
            //if (null == ClassInstance)
            //{
            //    Log.Write(MethodBase.GetCurrentMethod(), "Could not create class '" + config.NamespaceDotClass + "'", Log.LogType.Error);
            //    return false;
            //}

            //object[] parameters = new object[2];
            //parameters[0] = XMLMemoryStream;
            //parameters[1] = StateDesc;
            bool Result = false;
            //// Execute the function
            //try
            //{
            //    Result = (bool)ClassInstance.GetType().InvokeMember(config.Method, BindingFlags.InvokeMethod, null, ClassInstance, parameters);
            //}
            //catch (Exception e)
            //{
            //    Log.Write(e);
            //}
            return Result;
        }
    }
}
