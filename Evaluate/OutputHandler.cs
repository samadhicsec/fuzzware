using System;
using System.Collections.Generic;
using System.IO;
using System.Reflection;
using System.Text;
using Fuzzware.Common;
using Fuzzware.Convert2XML;
using Fuzzware.Schemas.AutoGenerated;

namespace Fuzzware.Evaluate
{
    public abstract class OutputHandler
    {
        public abstract void Initialise(object Settings, InputHandler oInputHandler);

        public abstract bool Output(MemoryStream XMLMemoryStream, String StateDesc);

        protected void CreateDirectory(String DirectoryPath)
        {
            if (String.IsNullOrEmpty(DirectoryPath))
                return;

            // Try to create the output directory
            if (!Directory.Exists(DirectoryPath))
            {
                try
                {
                    Directory.CreateDirectory(DirectoryPath);
                }
                catch (Exception e)
                {
                    Log.Write(e);
                }
            }
        }

        protected String CreateOutputFilePathString(String DirectoryPath, String FileName, String FileExtension)
        {
            CreateDirectory(DirectoryPath);

            // Get the path to the file
            String PathAndFile = Path.Combine(DirectoryPath, FileName);

            // Since the FileName may contain a '.' we add a '.' at the end to ensure we don't change the filename but do indeed
            // just add an extension
            PathAndFile = PathAndFile + ".";

            PathAndFile = Path.ChangeExtension(PathAndFile, FileExtension);

            return PathAndFile;
        }

        /// <summary>
        /// Writes a MemoryStream to file.
        /// </summary>
        /// <param name="oMemoryStream">The MemoryStream to write to file</param>
        /// <param name="PathAndFile">The path and filename to write to</param>
        /// <param name="StateDesc">The current state to quote if something goes wrong</param>
        /// <returns>true if the file write was successful, otherwise a Warning is logged and false is returned</returns>
        protected virtual bool WriteToFile(MemoryStream oMemoryStream, String PathAndFile, String StateDesc)
        {
            try
            {
                using (FileStream fs = new FileStream(PathAndFile, FileMode.Create, FileAccess.Write))
                {
                    oMemoryStream.WriteTo(fs);
                }
            }
            catch (Exception e)
            {
                Log.Write(MethodBase.GetCurrentMethod(), "An error occurred writing the testcase for state '" + StateDesc + "'.  Skipping." +
                    Environment.NewLine + e.Message, Log.LogType.Warning);
                return false;
            }
            return true;
        }
    }
}
