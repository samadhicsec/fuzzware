using System;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Reflection;
using System.Xml;
using System.Xml.XPath;
using System.Xml.Schema;
using System.Web.Services.Description;
using Fuzzware.Common;
using Fuzzware.Common.XML;
using Fuzzware.Schemas.AutoGenerated;

namespace Fuzzware.Common.MethodInterface
{
    /// <summary>
    /// The purpose of WSDLInterfaceDescription is to convert a WSDL Service into an InterfaceDescription.
    /// Other interface representations should convert into WSDL and then use this class to create the 
    /// InterfaceDescription.
    /// </summary>
    public class WSDLInterfaceDescription : InterfaceDescription
    {
        WSDLInputProtocol eProtocol;
        String sLocation;

        protected WSDLInterfaceDescription()
            : base()
        {
        }

        public WSDLInterfaceDescription(Service oService, WSDLInputProtocol Protocol, string InterfaceNS, Dictionary<string, XmlSchema> oSchemaDictionary)
            : base()
        {
            LoadService(oService, Protocol, InterfaceNS, oSchemaDictionary);
        }

        /// <summary>
        /// Loads a WSDL Service into ana InterfaceDescription
        /// </summary>
        protected void LoadService(Service oService, WSDLInputProtocol Protocol, string InterfaceNamespace, Dictionary<string, XmlSchema> oSchemaDictionary)
        {
            eProtocol = Protocol;

            // Get the name of the Service
            m_InterfaceName = oService.Name;
            m_InterfaceNS = InterfaceNamespace;

            m_oMethodDescriptions = new List<MethodDescription>();

            // Get the list of Ports (methods) exposed by the Service
            for (int i = 0; i < oService.Ports.Count; i++)
            {
                // From the service get the Port
                Port oPort = oService.Ports[i];

                // Check if this Port has an Address Extension that is consistant with the Protocol we want to use
                if (ProtocolCheck(oPort))
                {
                    // From the Port get the Binding
                    Binding b = oService.ServiceDescription.Bindings[oPort.Binding.Name];

                    // From the Bindings get the Operations.  The Operation specifics are listed under the PortType of the Binding.
                    for (int j = 0; j < b.Operations.Count; j++)
                    {
                        WSDLMethodDescription wsdlMethDesc = new WSDLMethodDescription();
                        wsdlMethDesc.Create(b.Operations[j], oService.ServiceDescription, oSchemaDictionary);
                        m_oMethodDescriptions.Add(wsdlMethDesc);
                    }
                    break;
                }
            }

            // Interfaces can have 2 methods of the same name but this is a problem for the XSD, so alter names.
            ProcessDuplicateMethodNames();
        }

        //public override String GetMethodNodeName(MethodDescription oMethodDesc)
        //{
        //    return oMethodDesc.MethodName;
        //}

        /// <summary>
        /// Return the address of the web service
        /// </summary>
        public String WebServiceLocation
        {
            get
            {
                return sLocation;
            }
        }


        // A Port can support multiple bindings, if any of them use the protocol specified, return true.
        private bool ProtocolCheck(Port oPort)
        {
            // Check if this Port has an Address Extension that is consistant with the Protocol we want to use
            for (int i = 0; i < oPort.Extensions.Count; i++)
            {
                if ((oPort.Extensions[i].GetType() == typeof(SoapAddressBinding)) && (eProtocol == WSDLInputProtocol.Soap))
                {
                    sLocation = ((SoapAddressBinding)oPort.Extensions[i]).Location;
                    return true;
                }
                if ((oPort.Extensions[i].GetType() == typeof(Soap12AddressBinding)) && (eProtocol == WSDLInputProtocol.Soap12))
                {
                    sLocation = ((Soap12AddressBinding)oPort.Extensions[i]).Location;
                    return true;
                }
                if ((oPort.Extensions[i].GetType() == typeof(HttpAddressBinding)) && (eProtocol == WSDLInputProtocol.Http))
                {
                    sLocation = ((HttpAddressBinding)oPort.Extensions[i]).Location;
                    return true;
                }
            }
            return false;
        }

        //public String ProcessSoapRequests(WSDLInputExampleSoapRequestPathAndFile[] oExamples, String OutputDir)
        //{
        //    // Create a new XML file
        //    XmlDocument oXmlDoc = new XmlDocument();

        //    // InterfaceName and InterfaceNS were set in the constructor

        //    // Add the root node, this is the service name
        //    XmlElement oRootElement = oXmlDoc.CreateElement(InterfaceName, InterfaceNS);
        //    String RootNSPrefix = null;

        //    // Process supplied Web Service call examples
        //    for (int i = 0; i < oExamples.Length; i++)
        //    {
        //        XmlDocument oExampleCallXmlDoc = new XmlDocument();

        //        // Read in the file
        //        StringWriter oFile = new StringWriter();
        //        using (FileStream fs = new FileStream(oExamples[i].Value, FileMode.Open, FileAccess.Read, FileShare.ReadWrite))
        //        {
        //            oExampleCallXmlDoc.Load(fs);
        //        }

        //        // Extract the method called and the parameters used
        //        XPathNavigator oParamXML;

        //        if (!GetParameterXML(oExampleCallXmlDoc, oExamples[i], out oParamXML))
        //            continue;

        //        // We need something we can import to the new XmlDocument, otherwise we have to clean up
        //        // namespaces etc.
        //        XmlNode oParamNode = oXmlDoc.ImportNode(((IHasXmlNode)oParamXML).GetNode(), true);
                
        //        oRootElement.AppendChild(oParamNode);

        //        if (null == RootNSPrefix)
        //            RootNSPrefix = oParamNode.Prefix;
        //        // TODO: Update this so we go through and fix up the NS prefixs.  We can do this by adjusting the prefix for
        //        // all nodes from the same namespace.
        //        else if(!RootNSPrefix.Equals(oParamNode.Prefix, StringComparison.CurrentCultureIgnoreCase))
        //            Log.Write(MethodBase.GetCurrentMethod(), "The SOAP request '" + oExamples[i] + "' had a different NS prefix than the other SOAP requests", Log.LogType.Error);
        //    }

        //    if (String.IsNullOrEmpty(oRootElement.InnerXml))
        //        Log.Write(MethodBase.GetCurrentMethod(), "No methods were extracted from the examples given.", Log.LogType.Error);

        //    oRootElement.Prefix = RootNSPrefix;
        //    oXmlDoc.AppendChild(oRootElement);

        //    // Set the location of the XML
        //    String XMLPath = Path.Combine(Path.GetFullPath(OutputDir), InterfaceName + ".xml");

        //    // Write out the XML
        //    XmlWriter oWriter = XmlWriter.Create(XMLPath);
        //    oXmlDoc.WriteTo(oWriter);
        //    oWriter.Flush();
        //    oWriter.Close();

        //    return XMLPath;
        //}

        /// <summary>
        /// Matches the passed in soapAction to a method with a soapAction recorded from the WSDL
        /// </summary>
        private int GetIndexOfMethodFromSoapAction(String soapAction)
        {
            if (!String.IsNullOrEmpty(soapAction))
            {
                for (int i = 0; i < m_oMethodDescriptions.Count; i++)
                {
                    if (((WSDLMethodDescription)m_oMethodDescriptions[i]).SoapAction.Equals(soapAction, StringComparison.CurrentCultureIgnoreCase))
                    {
                        return i;
                    }
                }
            }
            return -1;
        }

        /// <summary>
        /// Determine the parameter XML.  We might require an extra wrapper element depending on the method being called.
        /// </summary>
        /// <returns></returns>
        //private bool GetParameterXML(XmlDocument oExampleCallXmlDoc, WSDLInputExampleSoapRequestPathAndFile Example, out XPathNavigator oParamXML)
        //{
        //    int iExampleMethodIndex = -1;
        //    oParamXML = null;

        //    // Get XPath navigator to the parameters
        //    XPathNavigator oXPathNav = GetXPathToParameters(oExampleCallXmlDoc, Example);
        //    if (null == oXPathNav)
        //        return false;

        //    // See if we were passed in the method via the soapAction
        //    if (-1 == (iExampleMethodIndex = GetIndexOfMethodFromSoapAction(Example.soapAction)))
        //    {
        //        // Try to find the method based on parameter name matching
        //        if (-1 == (iExampleMethodIndex = MatchMethodParams(oXPathNav, Example)))
        //        {
        //            Log.Write(MethodBase.GetCurrentMethod(), "Could not find a method with soapAction '" + Example.soapAction + "' for example '" + Example.Value + "'.  Ignoring example", Log.LogType.Warning);
        //            return false;
        //        }
        //    }
        //    else
        //    {
        //        Log.Write(MethodBase.GetCurrentMethod(), "Could not find a method with soapAction '" + Example.soapAction + "' for example '" + Example.Value + "'.  Ignoring example", Log.LogType.Warning);
        //        return false;
        //    }

        //    // We have the index of the web service method
        //    // Get the parameters, need to import the XML
        //    if (!oMethodDescriptions[iExampleMethodIndex].AddedWrapperElement)
        //    {
        //        // Return the XPathVavigator directly
        //        oParamXML = oXPathNav;
        //    }
        //    else
        //    {
        //        // Create the wrapper element
        //        XmlElement oXmlWrapper = oExampleCallXmlDoc.CreateElement(oXPathNav.Prefix, oMethodDescriptions[iExampleMethodIndex].MethodName, oXPathNav.NamespaceURI);
        //        oXmlWrapper.AppendChild(((IHasXmlNode)oParamXML).GetNode());
        //        oParamXML = oXmlWrapper.CreateNavigator();
        //    }

        //    return true;
        //}

        /// <summary>
        /// Navigates the example XML and returns an XPathNavigator to the occurrence of the first node in the target namespace
        /// inside the SOAP Body.
        /// </summary>
        //private XPathNavigator GetXPathToParameters(XmlDocument oExampleCallXmlDoc, WSDLInputExampleSoapRequestPathAndFile Example)
        //{
        //    // Find the body of the SOAP request
        //    XPathNavigator oXPathNav = XMLHelper.GetRootNode(oExampleCallXmlDoc);

        //    if (!oXPathNav.LocalName.Equals("Envelope", StringComparison.CurrentCultureIgnoreCase))
        //    {
        //        Log.Write(MethodBase.GetCurrentMethod(), "Expected root node of XML in '" + Example.Value + "' is '" + oXPathNav.Name + "', when 'Envelope' was expected.  Skipping this example.", Log.LogType.Warning);
        //        return null;
        //    }

        //    if (!oXPathNav.MoveToFirstChild())
        //    {
        //        Log.Write(MethodBase.GetCurrentMethod(), "No child of 'Envelope' node in '" + Example.Value + "'.  Skipping this example.", Log.LogType.Warning);
        //        return null;
        //    }

        //    // Either this node is the Body node, or the next one is (meaning the current is the Header)
        //    if (!oXPathNav.LocalName.Equals("Body", StringComparison.CurrentCultureIgnoreCase))
        //    {
        //        oXPathNav.MoveToNext();
        //        if (!oXPathNav.LocalName.Equals("Body", StringComparison.CurrentCultureIgnoreCase))
        //        {
        //            Log.Write(MethodBase.GetCurrentMethod(), "Expected 'Body' node to be child of 'Envelope' node in '" + Example.Value + "'.  Skipping this example.", Log.LogType.Warning);
        //            return null;
        //        }
        //    }

        //    // Now the XPath is pointing at the SOAP Body element, move it to the first child
        //    if (!oXPathNav.MoveToFirstChild())
        //    {
        //        Log.Write(MethodBase.GetCurrentMethod(), "No child of 'Body' node in '" + Example.Value + "'.  Skipping this example.", Log.LogType.Warning);
        //        return null;
        //    }

        //    // Now the XPath is pointing to the first child of the SOAP Body, find the first child in the right namespace
        //    do
        //    {
        //        if (oXPathNav.NamespaceURI.Equals(InterfaceNS, StringComparison.CurrentCultureIgnoreCase))
        //            break;
        //    }
        //    while (oXPathNav.MoveToNext());
        //    if (!oXPathNav.NamespaceURI.Equals(InterfaceNS, StringComparison.CurrentCultureIgnoreCase))
        //    {
        //        Log.Write(MethodBase.GetCurrentMethod(), "No child elements of the 'Body' node in '" + Example.Value + "' were in the right namespace.  Skipping this example.", Log.LogType.Warning);
        //        return null;
        //    }

        //    return oXPathNav;
        //}

        /// <summary>
        /// Attempts to match the method parameters names from the example SOAP request to the method parameter names
        /// recorded from the WSDL
        /// </summary>
        //private int MatchMethodParams(XPathNavigator oXPathNav, WSDLInputExampleSoapRequestPathAndFile Example)
        //{
        //    // Search the MethodDescriptions for this request message
        //    for (int i = 0; i < oMethodDescriptions.Count; i++)
        //    {
        //        XPathNavigator SOAPRequestMessage = oXPathNav.Clone();

        //        bool bNoError = true;
        //        if (((WSDLMethodDescription)oMethodDescriptions[i]).AddedWrapperElement)
        //        {
        //            XmlSchemaSequence oSequence = (XmlSchemaSequence)((XmlSchemaComplexType)(oMethodDescriptions[i].ParameterDescs[0].ParamSchemaElement.SchemaType)).Particle;
        //            // Find a MethodDescription that has parameters that match the children of the SOAP Body
        //            for (int j = 0; j < oSequence.Items.Count && bNoError; j++)
        //            {
        //                XmlSchemaElement oSchemaElement = (XmlSchemaElement)oSequence.Items[j];
        //                if (!oSchemaElement.Name.Equals(SOAPRequestMessage.LocalName, StringComparison.CurrentCultureIgnoreCase))
        //                    bNoError = false;

        //                // Check there is another parameter, if so check we can move to the next sibling
        //                if ((j < oSequence.Items.Count - 1) && !SOAPRequestMessage.MoveToNext())
        //                    bNoError = false;
        //            }
        //        }
        //        else
        //        {
        //            // There should only be one parameter description
        //            ParameterDesc oParameterDesc = oMethodDescriptions[i].ParameterDescs[0];
        //            if (!oParameterDesc.ParamSchemaElement.Name.Equals(SOAPRequestMessage.LocalName, StringComparison.CurrentCultureIgnoreCase))
        //                bNoError = false;
        //        }

        //        // If there was no error then we found the method
        //        if (bNoError)
        //        {
        //            return i;
        //        }
        //    }

        //    Log.Write(MethodBase.GetCurrentMethod(), "The Body of the SOAP message in '" + Example.Value + "' had an unknown method, try specifying a soapAction attribute.  Skipping this example.", Log.LogType.Warning);
        //    return -1;
        //}
    }
}
