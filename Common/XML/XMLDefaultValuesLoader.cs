using System;
using System.Collections.Generic;
using System.Text;
using System.Reflection;
using System.Diagnostics;
using System.Xml;
using System.Xml.Schema;
using System.Xml.Serialization;
using System.IO;
using Fuzzware.Common;
using Fuzzware.Common.XML;
using Fuzzware.Schemas.AutoGenerated;

namespace Fuzzware.Common.XML
{
    public class XmlDefaultValuesLoader
    {
        String ValidatorCaller;

        /// <summary>
        /// Used to receive validate failures of the schemas or XML.
        /// </summary>
        private void GeneralValidationEventHandler(Object sender, ValidationEventArgs e)
        {
            Log.Write("Validation Error = " + ValidatorCaller, e.Message, Log.LogType.Warning);
        }

        private String GetDefaultValuesFile(String DefaultValuesFile, Assembly[] Assemblies)
        {
            // Check to see if a file was passed in, if so tell the user we are loading it
            if (!String.IsNullOrEmpty(DefaultValuesFile))
            {
                Log.Write(MethodBase.GetCurrentMethod(), "Loading DefaultValues file '" + Path.GetFullPath(DefaultValuesFile) + "'", Log.LogType.Info);

                // See if the file exists
                if (!File.Exists(Path.GetFullPath(DefaultValuesFile)))
                {
                    // If a file was passed in but does not exist, tell the user    
                    Log.Write(MethodBase.GetCurrentMethod(), "Could not locate DefaultValues file '" + Path.GetFullPath(DefaultValuesFile)
                        + "'", Log.LogType.Warning);
                    DefaultValuesFile = "";
                }
            }

            // The user did not pass in a file we can use
            if (String.IsNullOrEmpty(DefaultValuesFile))
            {
                // Try to load the default one in the Resources directory that the user may have edited
#if DEBUG
                String ResourcesRelativePath = @"..\..\..\Resources";
#else
                String ResourcesRelativePath = @"Resources";
#endif
                DefaultValuesFile = Path.GetFullPath(Path.Combine(Path.GetDirectoryName(Assembly.GetExecutingAssembly().Location), ResourcesRelativePath + Path.DirectorySeparatorChar + "XmlDefaultValues.xml"));
                Log.Write(MethodBase.GetCurrentMethod(), "Loading DefaultValues file '" + Path.GetFullPath(DefaultValuesFile) + "'", Log.LogType.Info);
                
                // See if this one exists
                if (!File.Exists(Path.GetFullPath(DefaultValuesFile)))
                {
                    // It doesn't, tell the user
                    Log.Write(MethodBase.GetCurrentMethod(), "Could not locate DefaultValues file '" + Path.GetFullPath(DefaultValuesFile)
                        + "'", Log.LogType.Warning);

                    // Get the default one compiled into the assembly
                    Stream XmlStream = Resources.GetResource("XmlDefaultValues.xml", Assemblies);
                    // Write it to the temp directory
                    DefaultValuesFile = Path.Combine(Path.GetTempPath(), "XmlDefaultValues.xml");
                    using (FileStream fs = new FileStream(DefaultValuesFile, FileMode.Create, FileAccess.Write, FileShare.None))
                    {
                        byte[] Buf = new byte[XmlStream.Length];
                        XmlStream.Read(Buf, 0, (int)XmlStream.Length);
                        fs.Write(Buf, 0, (int)XmlStream.Length);
                        fs.Flush();
                    }
                }
            }

            // If we get to here the file should at least exist
            return DefaultValuesFile;
        }

        public XmlDefaultValues Load(String DefaultValuesFile)
        {
            // Create Assembly[] of Schemas referenced in Configuration.xsd
            Assembly[] Assemblies = new Assembly[1];
            Assemblies[0] = Assembly.GetAssembly(typeof(Fuzzware.Common.Log));
            // Load and compile Configuration Schema file
            String TargetNamespace;
            ValidatorCaller = "XML Default Values Schema";
            XmlSchemaSet oSchemaSet = XMLHelper.LoadAndCompileSchema("XmlDefaultValues.xsd", Assemblies, GeneralValidationEventHandler, out TargetNamespace);

            // Get the DefaultValuesFile, ensuring it actually exists
            DefaultValuesFile = GetDefaultValuesFile(DefaultValuesFile, Assemblies);

            // Load and compilie XML Default Values file
            ValidatorCaller = "XML Default Values XML";
            XmlDocument ConfigurationXMLDoc = XMLHelper.LoadAndCompileXML(DefaultValuesFile, oSchemaSet, GeneralValidationEventHandler);

            // Open the XML Configuration file
            FileStream myFileStream = null;
            try
            {
                myFileStream = new FileStream(DefaultValuesFile, FileMode.Open, FileAccess.Read, FileShare.ReadWrite);
            }
            catch (Exception e)
            {
                Log.Write(e);
            }

            // Deserialise the XML file into the auto generated object
            XmlSerializer Serializer = new XmlSerializer(typeof(XmlDefaultValues));
            XmlDefaultValues oXmlDefaultValues = null;
            try
            {
                oXmlDefaultValues = (XmlDefaultValues)Serializer.Deserialize(myFileStream);
            }
            catch (Exception e)
            {
                Log.Write(MethodInfo.GetCurrentMethod(), "Could not deserialise '" + DefaultValuesFile + "'\n" + e.ToString(), Log.LogType.Error);
            }

            myFileStream.Close();

            // Clean up if we need to
            if(DefaultValuesFile.StartsWith(Path.GetTempPath()))
                File.Delete(DefaultValuesFile);

            return oXmlDefaultValues;
        }
    }
}
