<?xml version="1.0" encoding="utf-8"?>
<xs:schema targetNamespace="urn:Fuzzware.Schemas.Configuration"
    elementFormDefault="qualified"
    xmlns="urn:Fuzzware.Schemas.Configuration"
    xmlns:cfg="urn:Fuzzware.Schemas.Configuration"
    xmlns:xs="http://www.w3.org/2001/XMLSchema">

  <xs:complexType name="FileStore">
    <xs:annotation>
      <xs:documentation>
        Allows for specification of the location of files.
      </xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="Directory" type="xs:string" default="" minOccurs="0" />
      <xs:element name="FileExtension" type="xs:string" default="xml" minOccurs="0" />
    </xs:sequence>
  </xs:complexType>

  <xs:complexType name="FileStoreWithTolerance">
    <xs:annotation>
      <xs:documentation>
        Any unique responses the fuzzer encounters will have a default output file extension of '.txt'.  This is specified
        in the fuzzer code, not in this schema.
      </xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="cfg:FileStore">
        <xs:attribute name="Tolerance" type="xs:integer" default="0">
          <xs:annotation>
            <xs:documentation>
              The Tolerance attribute specifies how many consecutive characters in the output can differ from a pervious response before it is
              considered a unique response.  This is useful if the response contains a time/nonce/cookie, as without this all responses will 
              be considered unique.  The Tolerance is only applied to reponses of the same length.
            </xs:documentation>
          </xs:annotation>
        </xs:attribute>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>

  <xs:element name="OutputToNetwork">
    <xs:annotation>
      <xs:documentation>
        Specifies a network location, either an IP address or URI, on the specified port.  Also specifies a location to store unique
        responses from the network.
      </xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:sequence>
        <xs:choice>
          <xs:element name="IPAddress" type="xs:string" />
          <xs:element name="URI">
            <xs:complexType>
              <xs:simpleContent>
                <xs:extension base="xs:anyURI">
                  <xs:attribute name="UseSSL" type="xs:boolean" default="false">
                    <xs:annotation>
                      <xs:documentation>
                        If using SSL then the client authenticates the server, ensuring the server name on the certificate is the same as the
                        URI specified.
                      </xs:documentation>
                    </xs:annotation>
                  </xs:attribute>
                </xs:extension>
              </xs:simpleContent>
            </xs:complexType>
          </xs:element>
        </xs:choice>
        <xs:element name="Port" type="xs:unsignedShort" />
        <xs:element name="UniqueResponses" type="cfg:FileStoreWithTolerance" minOccurs="1" />
      </xs:sequence>
    </xs:complexType>
  </xs:element>

  <xs:complexType name="UserDefinedCode">
    <xs:annotation>
      <xs:documentation>
        The type used to allow extensibility for the user.  The type of interface the user code needs to implement is dependant
        on the where the extension point is.
      </xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="LoadAssembly" type="xs:string" minOccurs="1" maxOccurs="unbounded">
        <xs:annotation>
          <xs:documentation>
            A list of assemblies (full or relative paths) which must include the assembly containing the Namespace.Class to
            instantiate and can optionally include any reference assemblies.
          </xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="NamespaceDotClass" type="xs:string">
        <xs:annotation>
          <xs:documentation>
            The Namespace.Class name of the class that is to be instantiated.
          </xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="UserDefinedData" type="xs:anyType">
        <xs:annotation>
          <xs:documentation>
            This will be passed as a System.Xml.XmlNode[] to the user code.  This should be well formatted XML.
          </xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:sequence>
  </xs:complexType>

  <xs:element name="MethodsConfig">
    <xs:annotation>
      <xs:documentation>
        Configuration information for the construction of method calls.
      </xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:sequence>
        <xs:element name="InitialMethods" minOccurs="0">
          <xs:annotation>
            <xs:documentation>
              A sequence of method names that will be the initial methods called.  The values used for
              the parameters of these methods should be specified in the DefaultValues file.
            </xs:documentation>
          </xs:annotation>
          <xs:complexType>
            <xs:sequence>
              <xs:element name="MethodName" type="xs:string" minOccurs="0" maxOccurs="unbounded">
                <xs:annotation>
                  <xs:documentation>
                    The method name specified here should match a method name listed in the corresponding XML Schema.
                  </xs:documentation>
                </xs:annotation>
              </xs:element>
            </xs:sequence>
          </xs:complexType>
        </xs:element>
        <xs:element name="DefaultValues" type="xs:string" minOccurs="0">
          <xs:annotation>
            <xs:documentation>
              A path and filename of the XML file that contains the default values that will be used during XML generation.  The XML
              file should be an instance of Schemas\XmlDefaultValues.xsd.  If this is not specified the default XML file
              Resources\XmlDefaultValues.xml is used.
            </xs:documentation>
          </xs:annotation>
        </xs:element>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  
</xs:schema>
