using System;
using System.Collections.Generic;
using System.Text;
using System.Reflection;
using System.Xml;
using Fuzzware.Common;
using Fuzzware.Common.XML;
using Fuzzware.Schemas.AutoGenerated;

namespace Fuzzware.Convert2XML
{
    public class Convert2XMLInput : InputHandler
    {
        protected Fuzzware.Schemas.AutoGenerated.Convert2XML C2XSettings;

        public override void Initialise(object Settings, Encoding OutputEncoding)
        {
            this.OutputEncoding = OutputEncoding;
            if (!(Settings is Fuzzware.Schemas.AutoGenerated.Convert2XMLInput))
                Log.Write(MethodInfo.GetCurrentMethod(), "Expected Settings object of type 'Convert2XMLInput', got '" + Settings.GetType().ToString() + "'", Log.LogType.Error);

            Fuzzware.Schemas.AutoGenerated.Convert2XMLInput oConvert2XMLInput = Settings as Fuzzware.Schemas.AutoGenerated.Convert2XMLInput;

            // Get the path to the XML Schemas
            SchemaPaths = oConvert2XMLInput.XSDPathAndFilename;

            // Store the Convert2XML settings
            C2XSettings = oConvert2XMLInput.Convert2XML as Fuzzware.Schemas.AutoGenerated.Convert2XML;
        }

        public override ObjectDataBase ObjectDB
        {
            get
            {
                if (null == oObjectDB)
                {
                    oObjectDB = new ObjectDataBase(SchemaSet);
                    XmlQualifiedName QRootName = new XmlQualifiedName(C2XSettings.RootNodeName, C2XSettings.RootNodeNamespace);
                    // Create the particle database
                    Log.Write(MethodInfo.GetCurrentMethod(), "Creating Element database", Log.LogType.Info);
                    XMLHelper.CreateSchemaObjectDatabase(QRootName, SchemaSet, oObjectDB);
                }
                return oObjectDB;
            }
        }

        public override String XMLFilePath
        {
            get
            {
                if(String.IsNullOrEmpty(XMLPath))
                {
                    // Call the get for these objects first so the output to the user is ordered correctly, otherwise it says converting
                    // then it says generating element database, but it is actually going to continue converting after that
                    object o = SchemaSet;
                    o = ObjectDB;
                    Log.Write(MethodInfo.GetCurrentMethod(), "Converting '" + C2XSettings.SourceFile + "' to XML", Log.LogType.Info);
                    C2X.Convert2XML C2X = new C2X.Convert2XML(SchemaSet, ObjectDB, OutputEncoding);
                    if (!C2X.Convert(C2XSettings))
                    {
                        Log.Write(MethodInfo.GetCurrentMethod(), "Could not convert '" + C2XSettings.SourceFile + "' to XML", Log.LogType.Error);
                    }

                    // Set the XML
                    XMLPath = C2XSettings.OutputXMLFile;
                }
                return XMLPath;
            }
        }
    }
}
