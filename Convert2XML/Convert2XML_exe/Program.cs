using System;
using System.IO;
using System.Collections.Generic;
using System.Text;
using System.Reflection;
using System.Xml;
using System.Xml.Schema;
using System.Xml.Serialization;
using Fuzzware.Common.XML;
using Fuzzware.Schemas.AutoGenerated;
using Fuzzware.Convert2XML;

namespace Convert2XML
{
    public class Program
    {
        private static string ValidatorCaller;

        static void Usage()
        {
            Console.Out.WriteLine();
            Console.Out.WriteLine("Convert2XML.exe 2007 dave@fuzzwre.net");
            Console.Out.WriteLine("Converts an input of any form to XML based on node names in the associated XML Schema");
            Console.Out.WriteLine("The source and destination files are specified in the configuration XML file.");
            Console.Out.WriteLine();
            Console.Out.WriteLine("Usage:");
            Console.Out.WriteLine("Convert2XML.exe /is:<filename> /cx:<filename>");
            Console.Out.WriteLine();
            Console.Out.WriteLine("where");
            Console.Out.WriteLine("  /is: - Input Schema of the source file.");
            Console.Out.WriteLine("  /cx: - Config Xml specifying other configuration options.");
            Console.Out.WriteLine();
            Console.Out.WriteLine();
        }

        static void Main(string[] args)
        {
            // Take as input the xml input, the xml schema, the XML config, and the output file
            if (args.Length != 2)
            {
                // Print out usage
                Usage();
                return;
            }

            String[] ValidArgs = null;
            if (!ValidateCommandLine(args, out ValidArgs))
            {
                // Print out usage
                Usage();
                return;
            }

            String XSDInputFilename = ValidArgs[0];
            String XMLConfig = ValidArgs[1];

            // Read in configuration information
            Console.Out.WriteLine("Reading and verifying the input configuration...");
            Fuzzware.Schemas.AutoGenerated.Convert2XML cfg = GetConfiguration(XMLConfig);
            
            // Read in input Schema
            Console.Out.WriteLine("Reading and verifying the input Schema...");
            String TargetNamespace = "";
            XmlSchemaSet oSchemaSet = XMLHelper.LoadAndCompileSchema(XSDInputFilename, GeneralValidationEventHandler, out TargetNamespace);

            // Create root node qualified name
            XmlQualifiedName QRootName = new XmlQualifiedName(cfg.RootNodeName, cfg.RootNodeNamespace);

            // Create Namespace Particle dictionary
            Console.Out.WriteLine("Creating Namespace/Particle dictionary...");
            List<XmlQualifiedName> oElementNameList = new List<XmlQualifiedName>();
            SortedDictionary<XmlQualifiedName, ParticleDBEntry> oNameParticleDictionary = new SortedDictionary<XmlQualifiedName, ParticleDBEntry>(new XMLHelper.XmlQualifiedNameComparer());
            XMLHelper.CreateParticleDatabase(QRootName, oSchemaSet, oElementNameList, oNameParticleDictionary);

            Fuzzware.Convert2XML.Convert2XML C2X = new Fuzzware.Convert2XML.Convert2XML(oSchemaSet, oNameParticleDictionary, Encoding.UTF8);

            Console.Out.WriteLine("Converting input to XML...");
            try
            {
                if (!C2X.Convert(cfg))
                {
                    Console.Out.WriteLine("Conversion failed.");
                }
                else
                {
                    Console.Out.WriteLine("Conversion successful.");
                }
            }
            catch (Exception e)
            {
                Console.Out.WriteLine(e);
            }
            
        }

        /// <summary>
        /// Used to receive validate failures of the schemas or XML.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private static void GeneralValidationEventHandler(Object sender, ValidationEventArgs e)
        {
            Console.Out.WriteLine("Validation Error = " + Program.ValidatorCaller + Environment.NewLine + e.Message);
        }

        private static Fuzzware.Schemas.AutoGenerated.Convert2XML GetConfiguration(String XMLConfig)
        {

            Fuzzware.Schemas.AutoGenerated.Convert2XML oConfig = null;

            // Load and compile ConvertFromXML Schema file
            String TargetNamespace;
            ValidatorCaller = "Convert2XML Schema";
            Assembly ass = Assembly.GetAssembly(typeof(Fuzzware.Convert2XML.Convert2XML));
            XmlSchemaSet oSchemaSet = XMLHelper.LoadAndCompileSchema("Convert2XML.xsd", ass, GeneralValidationEventHandler, out TargetNamespace);

            // Load and compile XML ConvertFromXML file
            ValidatorCaller = "Validating Convert2XML configuration XML";
            XmlDocument ConfigurationXML = XMLHelper.LoadAndCompileXML(XMLConfig, oSchemaSet, GeneralValidationEventHandler);

            // Open the XML Configuration file
            FileStream myFileStream = null;
            //try
            //{
            myFileStream = new FileStream(XMLConfig, FileMode.Open);
            //}
            //catch (Exception e)
            //{
            //    Log.Write(e);
            //}

            // Deserialise the XML file into the auto generated object
            XmlSerializer Serializer = new XmlSerializer(typeof(Fuzzware.Schemas.AutoGenerated.Convert2XML));
            //try
            //{
            oConfig = (Fuzzware.Schemas.AutoGenerated.Convert2XML)Serializer.Deserialize(myFileStream);
            //}
            //catch (Exception)
            //{
            //    Log.Write("Program.GetConfiguration", "Could not deserialise '" + XMLConfig + "'", Log.LogType.Error);
            //}

            myFileStream.Close();

            return oConfig;
        }

        private static bool ValidateCommandLine(string[] args, out String[] ValidArgs)
        {
            ValidArgs = new String[2];
            bool[] HandledArgs = new bool[2];

            for (int i = 0; i < args.Length; i++)
            {
                if (args[i].Length < 4)
                {
                    Console.Out.WriteLine("The command line parameter '" + args[i] + "' is too short.");
                    return false;
                }

                String ArgSwitch = args[i].Substring(0, 4);
                switch (ArgSwitch)
                {
                    case "/is:":
                        ValidArgs[0] = args[i].Substring(4, args[i].Length - 4);
                        if (0 == ValidArgs[0].Length)
                        {
                            Console.Out.WriteLine("The command line parameter '" + args[i] + "' did not specify a filename.");
                            return false;
                        }
                        if (HandledArgs[0])
                        {
                            Console.Out.WriteLine("The command line parameter with switch '/is:' has been specified twice.");
                            return false;
                        }
                        HandledArgs[0] = true;
                        break;
                    case "/cx:":
                        ValidArgs[1] = args[i].Substring(4, args[i].Length - 4);
                        if (0 == ValidArgs[1].Length)
                        {
                            Console.Out.WriteLine("The command line parameter '" + args[i] + "' did not specify a filename.");
                            return false;
                        }
                        if (HandledArgs[1])
                        {
                            Console.Out.WriteLine("The command line parameter with switch '/cx:' has been specified twice.");
                            return false;
                        }
                        HandledArgs[1] = true;
                        break;
                    default:
                        Console.Out.WriteLine("The command line parameter '" + args[i] + "' has an invalid switch.");
                        return false;
                }

            }
            return true;
        }
    }
}
