using System;
using System.Collections.Generic;
using System.Text;
using System.Reflection;
using System.Xml;
using System.Xml.Schema;
using Fuzzware.Common;
using Fuzzware.Common.XML;
using Fuzzware.Extensible;
using Fuzzware.Schemas.AutoGenerated;

namespace Fuzzware.Convert2XML
{
    public abstract class InputHandler
    {
        /// <remarks>
        /// A note of debugging this class, since many values are set in properties, by viewing their values in any of the debugger windows,
        /// the code gets called, which means their values are set before they would normally be.
        /// </remarks>
        protected String XMLPath;
        private XmlDocument oXMLDoc;
        protected String[] SchemaPaths;
        private XmlSchemaSet oSchemaSet;
        protected Encoding OutputEncoding;
        protected ObjectDataBase oObjectDB;
        
        protected static string ValidatorCaller;

        /// <summary>
        /// Initialises the InputHandler
        /// </summary>
        /// <param name="Settings">The settings used to initialise the object</param>
        abstract public void Initialise(object Settings, Encoding OutputEncoding);

        /// <summary>
        /// Used to receive validate failures of the schemas or XML.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        protected void GeneralValidationEventHandler(Object sender, ValidationEventArgs e)
        {
            Log.Write("Validation Error = " + ValidatorCaller, e.Message, Log.LogType.Warning);
        }

        /// <summary>
        /// Gets the XmlSchemaSet for the input
        /// </summary>
        public virtual XmlSchemaSet SchemaSet
        {
            get
            {
                if (null == oSchemaSet)
                {
                    if ((null == SchemaPaths) || (0 == SchemaPaths.Length))
                        Log.Write(MethodInfo.GetCurrentMethod(), "Could not get XmlSchemaSet as no Xml schema paths were specified", Log.LogType.Error);

                    Log.Write(MethodInfo.GetCurrentMethod(), "Validating Input Schema", Log.LogType.Info);
                    List<String> TargetNamespaces;
                    ValidatorCaller = "Validating Input Schema";
                    oSchemaSet = XMLHelper.LoadAndCompileSchema(SchemaPaths, GeneralValidationEventHandler, out TargetNamespaces);

                }
                return oSchemaSet;
            }
        }

        public XmlDocument XMLDoc
        {
            get
            {
                if (null == oXMLDoc)
                {
                    if(String.IsNullOrEmpty(XMLPath))
                        Log.Write(MethodInfo.GetCurrentMethod(), "Could not get XmlDocument as no XML file path was specified", Log.LogType.Error);

                    ValidatorCaller = "Validating Input XML";
                    Log.Write(MethodInfo.GetCurrentMethod(), "Compiling XML '" + XMLPath + "'", Log.LogType.Info);
                    oXMLDoc = XMLHelper.LoadAndCompileXML(XMLPath, SchemaSet, GeneralValidationEventHandler);
                }
                return oXMLDoc;
            }
        }

        public virtual ObjectDataBase ObjectDB
        {
            get
            {
                if (null == oObjectDB)
                {
                    oObjectDB = new ObjectDataBase(SchemaSet);
                    // Create the particle database
                    Log.Write(MethodInfo.GetCurrentMethod(), "Creating Schema Object database", Log.LogType.Info);
                    XMLHelper.CreateSchemaObjectDatabase(XMLDoc, SchemaSet, oObjectDB);
                }
                return oObjectDB;
            }
        }

        public virtual String XMLFilePath
        {
            get
            {
                return XMLPath;
            }
        }

        public virtual IUserInputHandler UserInputHandlerInterface
        {
            get
            {
                return null;
            }
        }
    }
}
