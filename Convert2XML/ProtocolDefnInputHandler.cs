using System;
using System.Collections.Generic;
using System.IO;
using System.Text;
using System.Reflection;
using System.Xml;
using System.Xml.Schema;
using System.Xml.Serialization;
using Fuzzware.Common;
using Fuzzware.Common.XML;
using Fuzzware.Schemas.AutoGenerated;

namespace Fuzzware.Convert2XML
{
    public class ProtocolDefnInputHandler : Convert2XMLInput
    {
        ProtocolDefnInput oProtocolDefnInput;
        ProtocolDefinition oProtocolDefn;

        public override void Initialise(object Settings, Encoding OutputEncoding)
        {
            this.OutputEncoding = OutputEncoding;
            if (!(Settings is ProtocolDefnInput))
                Log.Write(MethodInfo.GetCurrentMethod(), "Expected Settings object of type 'ProtocolDefnInput', got '" + Settings.GetType().ToString() + "'", Log.LogType.Error);

            oProtocolDefnInput = Settings as ProtocolDefnInput;

            oProtocolDefn = InitialiseProtocolDefn(oProtocolDefnInput.ProtocolDefnXML);

            SchemaPaths = oProtocolDefnInput.XSDPathAndFilename;
            // Do this to compile the schema and inform the user
            object obj = SchemaSet;

            bool FoundFuzzMsg = false;
            // Search the protocol definition for the message to fuzz
            for (int i = 0; i < oProtocolDefn.Message.Length; i++)
            {
                ProtocolDefinitionMessage Mes = oProtocolDefn.Message[i];
                if ((Mes.Item is ProtocolDefinitionMessageXMLMessage) && ((Mes.Item as ProtocolDefinitionMessageXMLMessage).Fuzz))
                {
                    FoundFuzzMsg = true;
                    ProtocolDefinitionMessageXMLMessage XMLMes = (Mes.Item as ProtocolDefinitionMessageXMLMessage);
                    // Get the path to the XML file
                    if (XMLMes.Item is string)
                    {
                        XMLPath = XMLMes.Item as string;
                        // Compile the XML and inform the user
                        obj = XMLDoc;
                        // Compile the element DB and inform the user
                        // This will call the overridden ObjectDB property (which is just a copy of the property from InputHandler
                        // because stupid C# won't let me access it).
                        obj = ObjectDB;
                    }
                    else
                    {
                        C2XSettings = XMLMes.Item as Fuzzware.Schemas.AutoGenerated.Convert2XML;
                        // Compile the element DB and inform the user
                        // We call the Convert2XML ObjectDB property, as ObjectDB has been overridden in this class, but we need to
                        // call Convert2XML ObjectDB property and not the one in this class.  Strangely enough once in Convert2XML we don't
                        // have access to it's ObjectDB property!, only the most overridden one or it's base one which is in InputHandler.
                        // Since XMLFilePath needs the object DB, we need to call ObjectDB (the right one!) first.
                        obj = base.ObjectDB;
                        // Set the XML path and inform the user
                        obj = XMLFilePath;
                        // Compile the XML and inform the user
                        obj = XMLDoc;
                    }
                    break;
                }
            }

            if (!FoundFuzzMsg)
            {
                // If we get to here there was no element specified to fuzz.  This is a problem since we need to know the root element
                Log.Write(MethodInfo.GetCurrentMethod(), "Need to set the Fuzz attribute to true on one message in the protocol", Log.LogType.Error);
            }
        }

        public ProtocolDefinition ProtocolDefn
        {
            get
            {
                return oProtocolDefn;
            }
        }

        private ProtocolDefinition InitialiseProtocolDefn(String ProtocolDefnXML)
        {
            ProtocolDefinition ProtocolDefn = null;

            Assembly[] Assemblies = new Assembly[2];
            Assemblies[0] = Assembly.GetAssembly(typeof(Fuzzware.Common.Log));                  // ProtocolDefn
            Assemblies[1] = Assembly.GetAssembly(typeof(Fuzzware.Convert2XML.InputHandler));    // Convert2XML

            // Load and compile Configuration Schema file
            String TargetNamespace;
            ValidatorCaller = "ProtocolDefn Configuration Schema";
            XmlSchemaSet oProtoSchemaSet = XMLHelper.LoadAndCompileSchema("ProtocolDefn.xsd", Assemblies, GeneralValidationEventHandler, out TargetNamespace);

            // Load and compilie XML Configuration file
            ValidatorCaller = "Validating ProtocolDefn XML";
            XmlDocument ConfigurationXML = XMLHelper.LoadAndCompileXML(ProtocolDefnXML, oProtoSchemaSet, GeneralValidationEventHandler);

            // Open the XML Configuration file
            FileStream myFileStream = null;
            try
            {
                myFileStream = new FileStream(ProtocolDefnXML, FileMode.Open);
            }
            catch (Exception e)
            {
                Log.Write(MethodBase.GetCurrentMethod(), "Could not open '" + ProtocolDefnXML + "'.\n" + e.Message, Log.LogType.Error);
            }

            // Deserialise the XML file into the auto generated object
            XmlSerializer Serializer = new XmlSerializer(typeof(ProtocolDefinition));
            try
            {
                ProtocolDefn = (ProtocolDefinition)Serializer.Deserialize(myFileStream);
            }
            catch (Exception e)
            {
                Log.Write(MethodInfo.GetCurrentMethod(), "Could not deserialise '" + ProtocolDefnXML + "'\n" + e.Message, Log.LogType.Error);
            }

            myFileStream.Close();

            return ProtocolDefn;
        }

        // This is a copy of the ObjectDB from InputHandler as stupid C# won't let me access a grandparent class.
        public override ObjectDataBase ObjectDB
        {
            get
            {
                if (null == oObjectDB)
                {
                    oObjectDB = new ObjectDataBase(SchemaSet);
                    // Create the particle database
                    Log.Write(MethodInfo.GetCurrentMethod(), "Creating Schema Object database", Log.LogType.Info);
                    XMLHelper.CreateSchemaObjectDatabase(XMLDoc, SchemaSet, oObjectDB);
                }
                return oObjectDB;
            }
        }
    }
}
