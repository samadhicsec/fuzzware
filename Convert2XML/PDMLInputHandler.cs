using System;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Reflection;
using System.Xml;
using System.Xml.Xsl;
using System.Xml.Schema;
using Fuzzware.Common;
using Fuzzware.Schemas.AutoGenerated;

namespace Fuzzware.Convert2XML
{
    public class PDMLInputHandler : InputHandler
    {
        protected PDMLInput oPDMLInput;
        protected String Prefix;
        protected String Namespace;

        public override void Initialise(object Settings, Encoding OutputEncoding)
        {
            this.OutputEncoding = OutputEncoding;
            if (!(Settings is PDMLInput))
                Log.Write(MethodInfo.GetCurrentMethod(), "Expected Settings object of type 'PDMLInput', got '" + Settings.GetType().ToString() + "'", Log.LogType.Error);

            oPDMLInput = Settings as PDMLInput;

            Prefix = oPDMLInput.OutputPrefix;
            if (String.IsNullOrEmpty(Prefix))
                Prefix = "pdml";

            Namespace = oPDMLInput.OutputNamespace;
            if (String.IsNullOrEmpty(Namespace))
                Namespace = "urn:Fuzzware.Examples.PDML";
        }

        public override String XMLFilePath
        {
            get
            {
                if (String.IsNullOrEmpty(XMLPath))
                {
                    Log.Write(MethodBase.GetCurrentMethod(), "Converting '" + oPDMLInput.InputPDMLPathAndFile + "' to XML", Log.LogType.Info);
                    // Check the input PDML file exists
                    if (!File.Exists(oPDMLInput.InputPDMLPathAndFile))
                        Log.Write(MethodBase.GetCurrentMethod(), "PDML file '" + oPDMLInput.InputPDMLPathAndFile + "' does not exist", Log.LogType.Error);

                    Stream oPDML2XML = null;
                    // Get the path and file name of the PDML2XML XSLT file
                    if ((null != oPDMLInput.OptionalXSLT) && !String.IsNullOrEmpty(oPDMLInput.OptionalXSLT.PDML2XML))
                    {
                        if (!File.Exists(oPDMLInput.OptionalXSLT.PDML2XML))
                            Log.Write(MethodBase.GetCurrentMethod(), "XSLT File '" + oPDMLInput.OptionalXSLT.PDML2XML + "' does not exist", Log.LogType.Error);
                        try
                        {
                            oPDML2XML = new FileStream(oPDMLInput.OptionalXSLT.PDML2XML, FileMode.Open, FileAccess.Read, FileShare.ReadWrite);
                        }
                        catch (Exception e)
                        {
                            Log.Write(e);
                        }
                    }
                    else
                    {
                        oPDML2XML = Resources.GetResource("PDML2XML.xslt");
                        if (null == oPDML2XML)
                            Log.Write(MethodBase.GetCurrentMethod(), "Could not get PDML2XML.xslt resource from assemblies", Log.LogType.Error);
                    }

                    // Create the arguments to set prefix and namespace
                    XsltArgumentList oArgumentList = new XsltArgumentList();
                    oArgumentList.AddParam("prefix", "", Prefix);
                    oArgumentList.AddParam("ns", "", Namespace);

                    String OutputDir = Path.GetDirectoryName(Path.GetFullPath(oPDMLInput.OutputXMLPathAndFile));
                    if (!Directory.Exists(OutputDir))
                        Directory.CreateDirectory(OutputDir);

                    try
                    {
                        // Create output stream
                        Stream oOutput = new FileStream(oPDMLInput.OutputXMLPathAndFile, FileMode.Create, FileAccess.Write, FileShare.ReadWrite);

                        // Create the transform
                        XslCompiledTransform oTransform = new XslCompiledTransform();
                        oTransform.Load(XmlReader.Create(oPDML2XML));
                        // Convert PDML to XML
                        oTransform.Transform(oPDMLInput.InputPDMLPathAndFile, oArgumentList, oOutput);
                        oOutput.Flush();
                        oOutput.Close();
                    }
                    catch (Exception e)
                    {
                        Log.Write(e);
                    }

                    XMLPath = oPDMLInput.OutputXMLPathAndFile;
                }
                return XMLPath;
            }
        }

        public override XmlSchemaSet SchemaSet
        {
            get
            {
                if (null == SchemaPaths)
                {
                    Log.Write(MethodBase.GetCurrentMethod(), "Converting '" + oPDMLInput.InputPDMLPathAndFile + "' to XSD", Log.LogType.Info);
                    // Check the input PDML file exists
                    if (!File.Exists(oPDMLInput.InputPDMLPathAndFile))
                        Log.Write(MethodBase.GetCurrentMethod(), "PDML file '" + oPDMLInput.InputPDMLPathAndFile + "' does not exist", Log.LogType.Error);

                    Stream oPDML2XSD = null;
                    // Get the path and file name of the PDML2XML XSLT file
                    if ((null != oPDMLInput.OptionalXSLT) && !String.IsNullOrEmpty(oPDMLInput.OptionalXSLT.PDML2XSD))
                    {
                        if (!File.Exists(oPDMLInput.OptionalXSLT.PDML2XSD))
                            Log.Write(MethodBase.GetCurrentMethod(), "XSLT File '" + oPDMLInput.OptionalXSLT.PDML2XSD + "' does not exist", Log.LogType.Error);
                        try
                        {
                            oPDML2XSD = new FileStream(oPDMLInput.OptionalXSLT.PDML2XSD, FileMode.Open, FileAccess.Read, FileShare.ReadWrite);
                        }
                        catch (Exception e)
                        {
                            Log.Write(e);
                        }
                    }
                    else
                    {
                        oPDML2XSD = Resources.GetResource("PDML2XSD.xslt");
                        if (null == oPDML2XSD)
                            Log.Write(MethodBase.GetCurrentMethod(), "Could not get PDML2XSD.xslt resource from assemblies", Log.LogType.Error);
                    }

                    // Create the arguments to set prefix and namespace
                    XsltArgumentList oArgumentList = new XsltArgumentList();
                    oArgumentList.AddParam("prefix", "", Prefix);
                    oArgumentList.AddParam("ns", "", Namespace);

                    try
                    {
                        // Create output stream
                        Stream oOutput = new FileStream(oPDMLInput.OutputXSDPathAndFile, FileMode.Create, FileAccess.Write, FileShare.ReadWrite);

                        // Create the transform
                        XslCompiledTransform oTransform = new XslCompiledTransform();
                        oTransform.Load(XmlReader.Create(oPDML2XSD));
                        // Convert PDML to XSD
                        oTransform.Transform(oPDMLInput.InputPDMLPathAndFile, oArgumentList, oOutput);
                        oOutput.Flush();
                        oOutput.Close();
                    }
                    catch (Exception e)
                    {
                        Log.Write(e);
                    }

                    SchemaPaths = new String[1];
                    SchemaPaths[0] = oPDMLInput.OutputXSDPathAndFile;
                }
                return base.SchemaSet;
            }
        }
    }
}
