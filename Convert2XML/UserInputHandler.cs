using System;
using System.Collections.Generic;
using System.IO;
using System.Text;
using System.Reflection;
using System.Xml;
using Fuzzware.Common;
using Fuzzware.Common.UserCode;
using Fuzzware.Schemas.AutoGenerated;
using Fuzzware.Extensible;

namespace Fuzzware.Convert2XML
{
    /// <summary>
    /// The user can provide a InputHandler, but must implement IInputHandler from Schemer.Extensible
    /// </summary>
    public class UserInputHandler : InputHandler
    {
        UserDefinedCode oUserDefinedCode;
        IUserInputHandler oIUserInputHandler;

        public override void Initialise(object Settings, Encoding OutputEncoding)
        {
            this.OutputEncoding = OutputEncoding;
            if (!(Settings is UserDefinedCode))
                Log.Write(MethodInfo.GetCurrentMethod(), "Expected Settings object of type 'UserDefinedCode', got '" + Settings.GetType().ToString() + "'", Log.LogType.Error);

            oUserDefinedCode = Settings as UserDefinedCode;

            oIUserInputHandler = CodeLoader.LoadUserCode<IUserInputHandler>(oUserDefinedCode);

            Log.Write(MethodBase.GetCurrentMethod(), "Getting input from '" + oUserDefinedCode.NamespaceDotClass + "'", Log.LogType.Info);
            try
            {
                // Initialise
                oIUserInputHandler.Initialise(oUserDefinedCode.UserDefinedData as XmlNode[]);

                // Get the XmlSchemaSet
                XMLPath = oIUserInputHandler.GetXMLPathAndFile();

                // Get the XmlQualifiedName of the root XML node
                SchemaPaths = oIUserInputHandler.GetXSDPathAndFile();
            }
            catch (ExtensibilityException e)
            {
                Log.Write(MethodBase.GetCurrentMethod(), "An error occurred in '" + e.Source + "':\nMessage\n   " + e.Message 
                    + "\nStackTrace\n" + e.StackTrace, Log.LogType.Error);
            }
        }

        public override IUserInputHandler UserInputHandlerInterface
        {
            get
            {
                return oIUserInputHandler;
            }
        }
    }
}
